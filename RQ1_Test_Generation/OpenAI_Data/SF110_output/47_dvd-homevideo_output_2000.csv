ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uAI6UB5faVGU4fPyIAgFGX1poP6b,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Author.java,42.15841507911682,length,"// Author.java
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;

/**
 * @author Shane Santner
 * This class create the DVD filesystem that will be burned
 * to disc.
 *
 * TODO - Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Author {

    /**
     * Creates a new instance of Author
     */
    public Author() {
    }

    /* Author Member Variables */
    private String m_dvdauthor = ""dvdauthor -x vmgm.xml"";

    private String m_BaseErr = ""Authoring Error - "";

    /**
     * Create a DVD filestructure necessary to play in dvd player using dvdauthor
     * @param   DVD_GUI This is the GUI object used to control the form
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean CreateDVDFileStructure(GUI DVD_GUI) {
        try {
            /* 
             * Set progress bar to 50% since we have completed dvd-menu.
             * In the future would like a better way to track progress, this
             * is not very precise.
             */
            DVD_GUI.prgAuthor.setValue(50);
            DVD_GUI.lblAuthorProg.setText(""50%"");
            /* Build up the dvdauthor_cmd string and execute dvd-author */
            String[] dvdauthor_cmd = { ""/bin/sh"", ""-c"", m_dvdauthor };
            /*
             * exec(...) throws IOException, NullPointerException and
             *                  IllegalArgumentException.
             */
            Process p = Runtime.getRuntime().exec(dvdauthor_cmd, null, new File(DVD_GUI.strOutputDir));
            try {
                /* Instantiate input and output readers for dvd-author streams */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.err""));
                String line;
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: dvdauthor: command not found"")) {
                        DVD_GUI.MessageBox(""Could not locate dvdauthor in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        return true;
                    }
                }
                /*
                 * Lets look for indications of problems and display these to the user
                 * through the txtAreaOutput interface.
                 */
                StringTokenizer st;
                /*
                 * err_in.readLine() throws an IOException
                 */
                while ((line = err_in.readLine()) != null) {
                    st = new StringTokenizer(line, "":"");
                    if (st.hasMoreTokens()) {
                        /*
                         * st.nextToken() throws NoSuchElementException
                         */
                        if (!st.nextToken().equals(""WARN"")) {
                            DVD_GUI.txtAreaOutput.append(line + ""\n"");
                            DVD_GUI.txtAreaOutput.setCaretPosition(DVD_GUI.txtAreaOutput.getDocument().getLength());
                            out.write(line);
                            out.newLine();
                        }
                    }
                }
                /*
                 * close() throws an IOException
                 */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                p.waitFor();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (NoSuchElementException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Looked for a token that didn't exist\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            }
            /* Set progress bar to 100% and disable it */
            DVD_GUI.prgAuthor.setIndeterminate(false);
            DVD_GUI.prgAuthor.setValue(100);
            DVD_GUI.lblAuthorProg.setText(""100%"");
            DVD_GUI.lblAuthor.setEnabled(false);
            DVD_GUI.lblAuthorProg.setEnabled(false);
            DVD_GUI.prgAuthor.setEnabled(false);
            /* Put in a slight delay to ensure author.log closes */
            Thread.sleep(2000);
        } catch (IOException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (NullPointerException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IllegalArgumentException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (Exception ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        /* Look for any indication of an error in the author log file */
        return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + ""/log/dvdauthor.log"");
    }
}
","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {

	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is not found.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_not_found() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""/bin/sh: dvdauthor: command not found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""dvdauthor found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertFalse(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found and there is an error.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found_error() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""dvdauthor found"");
			out.newLine();
			out.write(""ERROR: dvdauthor found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found and there is a warning.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found_warning() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""dvdauthor found"");
			out.newLine();
			out.write(""WARN: dvdauthor found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertFalse(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found and there is an error and a warning.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found_error_warning() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""dvdauthor found"");
			out.newLine();
			out.write(""ERROR: dvdauthor found"");
			out.newLine();
			out.write(""WARN: dvdauthor found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found and there is an error and a warning and a message.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found_error_warning_message() {
		Author author = new Author();
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""test_output"";
		File dir = new File(DVD_GUI.strOutputDir);
		dir.mkdir();
		File log = new File(DVD_GUI.strOutputDir + ""/log"");
		log.mkdir();
		File err = new File(DVD_GUI.strOutputDir + ""/log/dvdauthor.err"");
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(err));
			out.write(""dvdauthor found"");
			out.newLine();
			out.write(""ERROR: dvdauthor found"");
			out.newLine();
			out.write(""WARN: dvdauthor found"");
			out.newLine();
			out.write(""dvdauthor found"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(author.CreateDVDFileStructure(DVD_GUI));
		dir.delete();
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
"
cmpl-6uAJ9SydLSq2pJ0mcAbuBAdPen20D,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Burn.java,40.7067666053772,length,"// Burn.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author Shane Santner
 * This class burns the DVD file structure previously created by
 * dvd-author to a DVD disc.
 */
public class Burn {

    /**
     * Creates a new instance of Burn
     */
    public Burn() {
    }

    /**
     * Creates a new instance of Burn
     * @param   burnToDVD   boolean value used to determine whether or not to burn to a DVD
     *                      when dvd-homevideo completes
     */
    public Burn(boolean burnToDVD) {
        m_Burn = burnToDVD;
    }

    /**
     * Burn Member Variables
     */
    private boolean m_Burn;

    private String m_growisofs = ""growisofs -speed=4 -Z /dev/dvd -dvd-video temp/DVD/"";

    private String m_BaseErr = ""Burn Error - "";

    /**
     * Optionally burn to DVD when complete and no errors, uses growisofs
     * @param   DVD_GUI    This is the GUI object used to control the form
     * return   A boolean to determine if an error occurred in the function
     */
    public boolean BurnToDVD(GUI DVD_GUI) {
        /* Update growisofs command with the correct paths */
        m_growisofs = m_growisofs.replaceAll(""temp"", DVD_GUI.strOutputDir);
        /* 
         * Burn object always gets created, so m_Burn will not always be true,
         * must be checked. 
         */
        if (m_Burn == true) {
            try {
                /* Create the growisofs process which actually burns the DVD */
                Process p = Runtime.getRuntime().exec(m_growisofs);
                /* Instantiate input and output readers for dvd-author streams */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/burn.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/burn.err""));
                String line;
                /* We will miss the error without this delay */
                Thread.sleep(50);
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: growisofs: command not found"")) {
                        DVD_GUI.MessageBox(""Could not locate growisofs in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        return true;
                    } else {
                        DVD_GUI.txtAreaOutput.append(line + ""\n"");
                        out.write(line);
                        out.newLine();
                    }
                }
                out.write(""burn.log--->dvd-homevideo"");
                out.newLine();
                /* Write the output to the txtAreaOutput user display */
                while ((line = in.readLine()) != null) {
                    DVD_GUI.txtAreaOutput.append(line + ""\n"");
                    out.write(line);
                    out.newLine();
                }
                /*
                 * close() throws an IOException
                 */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                p.waitFor();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (NullPointerException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (IllegalArgumentException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (Exception ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            }
        }
        if (m_Burn)
            return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + ""/log/burn.log"");
        return false;
    }
}
","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {

		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_1() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_2() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_3() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_4() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_5() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_6() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_7() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_8() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_9() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
		
		/**
		* Test case for {@link Burn#BurnToDVD(GUI)} method.
		* This test case checks if the method returns true when the growisofs command is not found.
		*/
		@Test
		void testBurnToDVD_10() {
				Burn burn = new Burn();
				GUI DVD_GUI = new GUI();
				DVD_GUI.strOutputDir = ""temp"";
				boolean result = burn.BurnToDVD(DVD_GUI);
				assertTrue(result);
		}
}

// DVD_Author.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author Shane Santner
 * This class creates the DVD file structure using dvd-author
 */
public class DVD_Author {

    /**
     * Creates a new instance of DVD_Author
     */
    public DVD_Author() {
    }

    /**
     * DVD_Author Member Variables
     */
    private String m_dvdauthor = ""dvdauthor -o temp/DVD -t -v -c temp/DVD/dvd.xml"";

    private String m_BaseErr = ""DVD_Author Error - "";

    /**
     * Create the DVD file structure using dvd-author
     * @param   DVD_GUI    This is the GUI object used to control the form
     * return   A boolean to determine if an error occurred in the function
     */
    public boolean CreateDVD(GUI DVD_GUI) {
        /* Update dvd-author command with the correct paths */
        m_dvdauthor = m_dvdauthor.replaceAll(""temp"", DVD_GUI.strOutputDir);
        try {
            /* Create the dvd-author process */
            Process p = Runtime.getRuntime().exec(m_dvdauthor);
            /* Instantiate input and output readers for dvd-author streams */
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvd-author.log""));
            BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvd-author.err""));
            String line;
            /* We will miss the error without this delay */
            Thread.sleep(50);
            /* 
             * Check for the case where the necessary dependencies are not
             * installed, but the user tries to run dvd-homevideo anyway
             */
            if (err_in.ready()) {
                line = err_in."
cmpl-6uAKCozCjxXPujmn4zwGq6CLKQUkX,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Capture.java,41.53522086143494,length,"// Capture.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 * @author Shane Santner
 * The Capture class utilizes dvgrab to capture audio and video
 * data from a dv camcorder.  It captures for the amount of time
 * specified by the user.
 *
 * TODO - Is there a way to get the camcorder time from dvgrab?
 *        This would be a more accurate way of determining when
 *        to stop the camcorder.  Also need to handle input, output
 *        and error streams more appropriatly.
 */
public class Capture implements Runnable {

    /**
     * Creates a default instance of Capture
     */
    public Capture() {
    }

    /**
     * Creates a new instance of Capture
     * @param   min         The amount of time in minutes to capture audio/video
     * @param   sec         The amount of time in seconds to capture audio/video
     * @param   DVD_GUI     This is the GUI object used to control the form
     */
    public Capture(int min, int sec, GUI DVD_GUI) {
        m_Minutes = min;
        m_Seconds = sec;
        m_GUI = DVD_GUI;
    }

    /**
     * Capture Member Variables
     */
    private int m_Minutes;

    private int m_Seconds;

    private GUI m_GUI;

    private Thread m_Thread;

    private boolean m_Error;

    private String m_BaseErr = ""Capture Error - "";

    private String m_dvgrab = ""dvgrab --autosplit --size 0 --format raw --opendml"" + "" --buffers 200 dv/dv_file-"";

    /**
     * Used to instantiate a new thread and to perform error checking.
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        if (m_GUI.menuChkThread.isSelected()) {
            /* Create and start the new thread */
            m_Thread = new Thread(this);
            /* Increase priority so we don't drop frames */
            m_Thread.setPriority(10);
            m_Thread.start();
            /* Need to fix this */
            return false;
        } else {
            DV_Capture();
            return (m_Error | m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/dvgrab.log""));
        }
        /* 
         * If an error occurred while executing DV_Capture then m_Error will be set
         * to true.  Also check the log file for any evidence of an error.
         */
    }

    /**
     * Implements the run() method of the Runnable interface.  Makes multi-threading
     * possible.
     */
    public void run() {
        DV_Capture();
    }

    /**
     * Captures audio and video from a dv camcorder by calling dvgrab
     */
    public void DV_Capture() {
        /* local variables */
        long start, current, end;
        int diff, total;
        /* Create output directory */
        File CreateOutDir = new File(m_GUI.strOutputDir);
        /* 
         * Check and see if the directory already exists.
         * Give the user an option to delete the directory
         * and procede.
         */
        if (CreateOutDir.exists() && CreateOutDir.isDirectory()) {
            int response = m_GUI.MessageBox(""The Output Directory "" + m_GUI.strOutputDir + "" already exists!"" + ""\nWould you like to delete it?"");
            if (response == JOptionPane.YES_OPTION) {
                try {
                    /* Put all of the necessary parameters into a String array */
                    String rm = ""rm -fr "" + m_GUI.strOutputDir;
                    String[] rm_cmd = { ""/bin/sh"", ""-c"", rm };
                    /* Execute the rm utility to recursively delete the directory */
                    Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);
                    remove_dir.waitFor();
                } catch (IOException ex) {
                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                    m_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                    ex.printStackTrace();
                } catch (InterruptedException ex) {
                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                    m_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                    ex.printStackTrace();
                }
            } else {
                m_GUI.MessageBox(""Please choose a different name for your"" + ""\ntitle or move the directory to another location."", JOptionPane.WARNING_MESSAGE);
                m_GUI.blnBegin = false;
                m_Error = true;
            }
        } else /* 
         * Check and see if a file with that name already exists.
         * Give the user an option to delete the directory
         * and procede.
         */
        if (CreateOutDir.exists() && !CreateOutDir.isDirectory()) {
            int response = m_GUI.MessageBox(""There exists a file with the Output directory name"" + ""\nat this location!  Would you like to delete it?"");
            if (response == JOptionPane.YES_OPTION) {
                try {
                    /* Put all of the necessary parameters into a String array */
                    String rm = ""rm -fr "" + m_GUI.strOutputDir;
                    String[] rm_cmd = { ""/bin/sh"", ""-c"", rm };
                    /* Execute the rm utility to recursively delete the directory */
                    Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);
                    remove_dir.waitFor();
                } catch (IOException ex) {
                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                    m_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                    ex.printStackTrace();
                } catch (InterruptedException ex) {
                    SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                    m_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                    ex.printStackTrace();
                }
            } else {
                m_GUI.MessageBox(""Please choose a different name for your"" + ""\ntitle or move the file to another location."", JOptionPane.WARNING_MESSAGE);
                m_GUI.blnBegin = false;
            }
        }
        /* If blnBegin is still true, then continue */
        if (m_GUI.blnBegin == true) {
            CreateOutDir.mkdir();
            CreateOutDir = new File(m_GUI.strOutputDir + ""/DVD"");
            CreateOutDir.mkdir();
            CreateOutDir = new File(m_GUI.strOutputDir + ""/log"");
            CreateOutDir.mkdir();
            CreateOutDir = new File(m_GUI.strOutputDir + ""/dv"");
            CreateOutDir.mkdir();
            try {
                /* Put all of the necessary parameters into a String array */
                String[] dvgrab_cmd = { ""/bin/sh"", ""-c"", m_dvgrab };
                /* Execute the dvgrab program to capture video from the camcorder */
                Process p = Runtime.getRuntime().exec(dvgrab_cmd, null, new File(m_GUI.strOutputDir));
                /* Create an input reader, an error reader and an output writer */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/dvgrab.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/dvgrab.err""));
                String line;
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: dvgrab: command not found"")) {
                        m_GUI.MessageBox(""Could not locate dvgrab in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        m_Error = true;
                    } else {
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        out.write(line);
                        out.newLine();
                    }
                }
                /* Set the GUI feedback widgets to enabled */
                m_GUI.lblCapture.setEnabled(true);
                m_GUI.prgCapture.setEnabled(true);
                m_GUI.lblCaptureProg.setEnabled(true);
                /* Do some time calculations - this will be used for the progress bar*/
                start = System.currentTimeMillis();
                total = m_Minutes * 60 * 1000 + m_Seconds * 1000 + 5000;
                end = start + total;
                current = System.currentTimeMillis();
                diff = (int) (current - start);
                int track = 0;
                //String line;
                /* Stay in the while loop until we have reached the user specified amount of time */
                while ((diff / total) < 1) {
                    /* Do some GUI stuff */
                    m_GUI.prgCapture.setValue((int) (((double) (diff) / total) * 100));
                    m_GUI.lblCaptureProg.setText(Integer.toString(((int) (((double) (diff) / total) * 100))) + ""%"");
                    current = System.currentTimeMillis();
                    diff = (int) (current - start);
                    line = in.readLine();
                    /* I don't know why but this is critical!!!!! */
                    /* Check for anything written to the error stream */
                    if (err_in.ready()) {
                        line = err_in.readLine();
                        /* Look for this specific error code - indicates that the cable is not connected/loose */
                        if (line.equals(""Error: no camera exists"")) {
                            /* Give feedback to the user */
                            m_GUI.MessageBox(""It appears that your camcorder is not "" + ""connected to your computer!"", 0);
                            /* Put all of the necessary parameters into a String array */
                            String rm = ""rm -fr "" + m_GUI.strOutputDir;
                            String[] rm_cmd = { ""/bin/sh"", ""-c"", rm };
                            /* Execute the rm utility to recursively delete the directory */
                            Process remove_dir = Runtime.getRuntime().exec(rm_cmd, null);
                            remove_dir.waitFor();
                            /* Close all open streams */
                            in.close();
                            out.close();
                            err_in.close();
                            err_out.close();
                            /* Indicate that there was an error */
                            m_Error = true;
                        }
                        /* Output information to the GUI text box */
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                        out.write(line);
                        out.newLine();
                    }
                }
                /* 
                 * close() throws an IOException
                 */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /* kill dvgrab process */
                /* Since this now runs as a thread do I need to modify this? */
                p.destroy();
                /* Final GUI stuff */
                m_GUI.prgCapture.setValue(100);
                m_GUI.prgCapture.setValue(100);
                m_GUI.lblCaptureProg.setText(""100%"");
                m_GUI.prgCapture.setEnabled(false);
                m_GUI.lblCapture.setEnabled(false);
                m_GUI.lblCaptureProg.setEnabled(false);
                /* Put in a slight delay to ensure dvgrab.log closes */
                Thread.sleep(2000);
            } catch (IOException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (NullPointerException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (IllegalArgumentException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (Exception ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
        }
    }
}
","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains ten unit test cases for the {@link Capture#init()} method.
*/
class CaptureTest {","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains ten unit test cases for the {@link Capture#init()} method.
*/
class CaptureTest {

		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected.
		*/
		@Test
		void testInit_1() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(true);
				assertTrue(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected.
		*/
		@Test
		void testInit_2() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(false);
				assertFalse(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns true.
		*/
		@Test
		void testInit_3() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(true);
				assertTrue(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns true.
		*/
		@Test
		void testInit_4() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(false);
				assertFalse(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns false.
		*/
		@Test
		void testInit_5() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(true);
				assertTrue(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns false.
		*/
		@Test
		void testInit_6() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(false);
				assertFalse(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns true and the {@link Capture#m_Error} is true.
		*/
		@Test
		void testInit_7() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(true);
				capture.m_Error = true;
				assertTrue(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns true and the {@link Capture#m_Error} is true.
		*/
		@Test
		void testInit_8() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(false);
				capture.m_Error = true;
				assertFalse(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns true when the {@link GUI#menuChkThread} is selected and the {@link GUI#ErrorCheck(String)} method returns false and the {@link Capture#m_Error} is true.
		*/
		@Test
		void testInit_9() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(true);
				capture.m_Error = true;
				assertTrue(capture.init());
		}
		
		/**
		* Test case for {@link Capture#init()} method.
		* This test case checks if the {@link Capture#init()} method returns false when the {@link GUI#menuChkThread} is not selected and the {@link GUI#ErrorCheck(String)} method returns false and the {@link Capture#m_Error} is true.
		*/
		@Test
		void testInit_10() {
				GUI DVD_GUI = new GUI();
				Capture capture = new Capture(0, 0, DVD_GUI);
				DVD_GUI.menuChkThread.setSelected(false);
				capture.m_Error = true;
				assertFalse(capture.init());
		}
}

// DV_Capture.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 * @author Shane Santner
 * The DV_Capture class utilizes dvgrab to capture audio and video
 * data from a dv camcorder.  It captures for the amount of time
 * specified by the user.
 *
 * TODO - Is there a way to get the camcorder time from dvgrab?
 *        This would be a more accurate way of determining when
 *        to stop the camcorder.  Also need to handle input, output
 *        and error streams more appropriatly.
 */
public class DV_Capture {

    /**
     * Creates a default instance of DV_Capture
     */
    public DV_Capture() {
    }

    /**
     * Creates a new instance of DV_Capture
     * @param   min         The amount of time in minutes to capture audio/video
"
ba9fc3b9-1d7f-4268-a12c-e55938bf7619,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Convert.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8237 tokens (6237 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Convert.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class is used to transcode the video captured
 * from the digital camcorder into mpeg4, the DVD compatible
 * format.  It explicitly calls the transcode command
 * after meticulously preparing the options that can be passed
 * to transcode.
 *
 * TODO - Break mplex out into its own class.
 *        Figure out how to calculate remaining time even if
 *        video was not captured from the camcorder during the
 *        current session.
 *        Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Convert implements Runnable {

    /**
     * Creates a new instance of Convert based on the video
     * format and aspect ratio specified.
     * @param   format      This specifies either PAL or NTSC
     * @param   aspectRatio This can be either 4:3 or 16:9
     * @param   DVD_GUI     This is the GUI object used to control the form
     */
    public Convert(String format, String aspectRatio, GUI DVD_GUI) {
        if (format.equals(""dvd-ntsc""))
            m_fps = 29.97;
        else
            m_fps = 25;
        m_GUI = DVD_GUI;
        m_Format = format;
        m_AspectRatio = aspectRatio;
        thread_track = 0;
    }

    /**
     * Overloaded Constructor - accounts for quality being selected
     * @param   quality     The quality of the video compression
     * @param   format      This specifies either PAL or NTSC
     * @param   aspectRatio This can be either 4:3 or 16:9
     * @param   DVD_GUI     This is the GUI object used to control the form
     */
    public Convert(int quality, String format, String aspectRatio, GUI DVD_GUI) {
        if (format.equals(""dvd-ntsc""))
            m_fps = 29.97;
        else
            m_fps = 25;
        m_GUI = DVD_GUI;
        m_Quality = quality;
        m_Format = format;
        m_AspectRatio = aspectRatio;
        thread_track = 0;
    }

    /**
     * Convert Member Variables
     */
    private int m_Quality;

    private double m_fps;

    private String m_Format;

    private String m_AspectRatio;

    private String m_flags;

    private String m_bitrate = ""8500"";

    protected String[] video_files;

    private GUI m_GUI;

    private Thread m_Thread;

    private boolean m_Error;

    private int thread_track;

    private String m_BaseErr = ""Transcoding Error - "";

    private String m_transcode = ""transcode -i dv/inp -m test1.ac3 -o test1 -w bitr -x dv,dv"" + "" -F flags -y mpeg2enc,raw -N 0x2000 -b 256 --encode_fields b"" + "" -E 48000,16,2 -J resample"" + "" --export_prof format --export_fps frames/s --export_asr aspectRatio"" + "" -j 0,8,0,8 --print_status 30"";

    /* -i                 input video/audio files from the camcorder
       -m                 output .ac3 audio file
       -o                 output .m2v (mpeg2) video file
       -b                 audio bit rate - 256 should be sufficient
       -w                 maximum bit rate (audio + video) ~8500 kbps
       -x                 import module [video,audio]
       -F                 parameters passed to mpeg2enc
       -E                 audio output samplerate [Hz], bits per sample and channels
       -y                 export module [video,audio] - mpeg2enc and ffmpeg are similar in quality,
                                could use either
       --export_prof      either dvd_ntsc or dvd_pal
       --encode_fields    'b' means to encode bottom up - used for interlacing which is critical when
                                watching the video on television
       --export_asr       '2' gives an aspect ratio of 4:3 and '3' would give an aspect ratio of 16:9
       --export_fps       either 29.97 for NTSC or 25 for PAL
       --print_status     print the status of transcode every 30 frames ~1s for NTSC
       -j 0,8,0,8         clip off 8 pixels from the left and right sides of the screen to fit
                                the television screen correctly */
    private String mplex = ""mplex -f 8 -V -o inp.vob inp.m2v inp.ac3"";

    /* -f                 format - '8' equates to DVD
       -V                 needed to multiplex variable bit-rate video streams correctly
       -o                 output file created from the merged .m2v and .ac3 files */
    /**
     * Used to instantiate a new thread and to perform error checking.
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        if (m_GUI.menuChkThread.isSelected()) {
            m_Thread = new Thread(this);
            m_Thread.start();
            try {
                m_Thread.join();
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Could not join Convert.java thread\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
        } else
            Transcode();
        /* 
         * Check transcode.log and mplex.log for any sign of an error.
         * If either file contains an error then return an error.  Also
         * check m_Error to see if it was set while executing the 
         * Transcode method.
         */
        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/transcode.log"") || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/mplex.log""));
    }

    /**
     * Implements the run() method of the Runnable interface.  Makes multi-threading
     * possible.
     */
    public void run() {
        Transcode();
    }

    /**
     * Encodes dv files to mpeg using transcode, then uses mplex to combine
     * the .ac3 audio and .m2v video files into a DVD compatible .vob file
     */
    public void Transcode() {
        /* 
         * Get a list of all of the .dv files captured from the camcorder 
         * and stored in the dv directory
         */
        File ListDir = new File(m_GUI.strOutputDir + ""/dv/"");
        /* High quality, 80 min /DVD - slower encoding, classic MPEG2 */
        if (m_Quality == 0)
            m_flags = ""'8, -c -q 2 -4 1 -2 1 -H -K file=matrix.txt -R 2'"";
        else /* High quality, 80 min DVD */
        if (m_Quality == 1)
            m_flags = ""'8, -c -q 4 -4 2 -2 2 -K file=matrix.txt -R 1'"";
        else
            /* OK quality, 120 min DVD -  slower encoding, classic MPEG2 */
            m_flags = ""'8, -c -q 6 -4 3 -2 3 -N 0.5 -E -10 -K tmpgenc -R 0'"";
        /* Perform some String manipulation */
        m_transcode = m_transcode.replaceAll(""flags"", m_flags);
        m_transcode = m_transcode.replaceAll(""bitr"", m_bitrate);
        m_transcode = m_transcode.replaceAll(""format"", m_Format);
        m_transcode = m_transcode.replaceAll(""aspectRatio"", m_AspectRatio);
        m_transcode = m_transcode.replaceAll(""frames/s"", String.valueOf(m_fps));
        /* 
         * Write out matrix.txt which is a quantization table passed to 
         * mpeg2enc from transcode
         */
        matrix();
        /* Enable the GUI widgets for the conversion */
        m_GUI.lblConvert.setEnabled(true);
        m_GUI.prgConvert.setEnabled(true);
        m_GUI.lblConvertProg.setEnabled(true);
        /* 
         * Need to create doubles and ints to track the progess
         * of transcode.  The idea is that if we know the total
         * amount of capture time, and we also know the number of 
         * frames processed by transcode, then we can display a 
         * relatively accurate estimate of the amount of time left
         * to transcode.  Since this is the most time consuming part
         * of dvd-homevideo, I thought it was important.
         */
        double cummulative_time = 0;
        double current_time = 0;
        double[] average_fps = new double[5];
        average_fps[4] = -1;
        int hour, min, sec;
        int total_time = (((Integer) m_GUI.spnMinutes.getValue()).intValue() * 60) + ((Integer) m_GUI.spnSeconds.getValue()).intValue();
        StringTokenizer st, time;
        while (thread_track < ListDir.list().length) {
            video_files = ListDir.list();
            try {
                /* Insert the appropriate parameters into transcode */
                if (thread_track == 0) {
                    m_transcode = m_transcode.replaceAll(""inp"", video_files[thread_track]);
                    m_transcode = m_transcode.replaceAll(""test1"", video_files[thread_track].substring(0, 11));
                    mplex = mplex.replaceAll(""inp"", video_files[thread_track].substring(0, 11));
                } else {
                    m_transcode = m_transcode.replaceAll(video_files[thread_track - 1], video_files[thread_track]);
                    m_transcode = m_transcode.replaceAll(video_files[thread_track - 1].substring(0, 11), video_files[thread_track].substring(0, 11));
                    mplex = mplex.replaceAll(video_files[thread_track - 1].substring(0, 11), video_files[thread_track].substring(0, 11));
                }
            } catch (StringIndexOutOfBoundsException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Are there non-standard (not .dv)"" + ""\nfiles in the dv directory?\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
            try {
                /* 
                 * transcode the .avi files from the camcorder into two separate 
                 * streams, one for audio and the other for video
                 */
                String[] transcode_cmd = { ""/bin/sh"", ""-c"", m_transcode };
                Process p = Runtime.getRuntime().exec(transcode_cmd, null, new File(m_GUI.strOutputDir));
                /* Create an input reader, an error reader and an output writer */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/transcode.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/transcode.err""));
                /* Write out the actual transcode command to the log file */
                out.write(m_transcode);
                out.newLine();
                String line;
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: transcode: command not found"")) {
                        m_GUI.MessageBox(""Could not locate transcode in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        m_Error = true;
                    } else {
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        out.write(line);
                        out.newLine();
                    }
                }
                int k = 0;
                while ((line = in.readLine()) != null) {
                    st = new StringTokenizer(line);
                    if (st.hasMoreTokens()) {
                        if (st.nextToken().equals(""encoding"")) {
                            st.nextToken();
                            st.nextToken();
                            average_fps[k % 5] = Double.valueOf(st.nextToken()).doubleValue();
                            st.nextToken();
                            st.nextToken();
                            time = new StringTokenizer(st.nextToken(), "":,"");
                            if (time.hasMoreTokens()) {
                                /* Calculate the estimated time left for transcode */
                                hour = Integer.valueOf(time.nextToken()).intValue();
                                min = Integer.valueOf(time.nextToken()).intValue();
                                sec = Integer.valueOf(time.nextToken()).intValue();
                                current_time = (hour * 3600) + (min * 60) + sec + cummulative_time;
                                m_GUI.prgConvert.setValue((int) ((current_time / total_time) * 100));
                                m_GUI.lblConvertProg.setText(String.valueOf((int) ((current_time / total_time) * 100)) + ""%"");
                                /*
                                 * Display to the user an approximation of the conversion time
                                 * left on the prgConvert progress bar using the tool tip (on mouse hover)
                                 */
                                double fps_sum = 0;
                                int time_remaining;
                                /* If the array has been filled... */
                                if (average_fps[4] != -1) {
                                    for (int j = 0; j < 5; j++) {
                                        fps_sum += average_fps[j];
                                    }
                                    /* Average the fps readings from transcode */
                                    fps_sum /= 5;
                                    /* Added (int)m_fps to account for PAL (25 fps) and NTSC (29.97 fps) */
                                    time_remaining = (int) (((total_time - current_time) * (int) m_fps) / fps_sum);
                                    int captureTipHour = (time_remaining / 3600);
                                    int captureTipMinute = (time_remaining - 3600 * captureTipHour) / 60;
                                    if ((captureTipHour == 0) && (captureTipMinute < 5))
                                        m_GUI.prgConvert.setToolTipText(""Less than 5 minutes remaining"");
                                    else if (captureTipMinute < 10)
                                        m_GUI.prgConvert.setToolTipText(captureTipHour + "":0"" + captureTipMinute + "" Remaining"");
                                    else
                                        m_GUI.prgConvert.setToolTipText(captureTipHour + "":"" + captureTipMinute + "" Remaining"");
                                }
                                m_GUI.txtAreaOutput.append(line + ""\n"");
                                m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                                out.write(line);
                                out.newLine();
                            } else {
                                m_GUI.txtAreaOutput.append(line + ""\n"");
                                m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                                out.write(line);
                                out.newLine();
                            }
                            k++;
                        }
                    }
                }
                while ((line = err_in.readLine()) != null) {
                    m_GUI.txtAreaOutput.append(line + ""\n"");
                    m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                    out.write(line);
                    out.newLine();
                }
                /* Close all open streams */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                /* This now runs as a thread...need to fix this */
                //p.waitFor();
                /* Timekeeping */
                cummulative_time = current_time;
                /**
                 * ****************************************************
                 *  This is the separation between transcode and mplex. *
                 *  Need to break this out into a separate class.       *
                 * *****************************************************
                 */
                /* 
                 * Combine the separate streams together into a .vob (DVD) file 
                 */
                String[] mplex_cmd = { ""/bin/sh"", ""-c"", mplex };
                p = Runtime.getRuntime().exec(mplex_cmd, null, new File(m_GUI.strOutputDir));
                /* Create an input reader, an error reader and an output writer */
                in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/mplex.log""));
                err_out = new BufferedWriter(new FileWriter(m_GUI.strOutputDir + ""/log/mplex.err""));
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: mplex: command not found"")) {
                        m_GUI.MessageBox(""Could not locate mplex in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        m_Error = true;
                    } else {
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        out.write(line);
                        out.newLine();
                    }
                }
                while ((line = err_in.readLine()) != null) {
                    m_GUI.txtAreaOutput.append(line + ""\n"");
                    m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                    out.write(line);
                    out.newLine();
                }
                /* Close all open streams */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                /* This now runs as a thread...need to fix this */
                //p.waitFor();
                /* Put in a slight delay to ensure transcode.log and mplex.log closes */
                Thread.sleep(2000);
            } catch (IOException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }//            catch(InterruptedException ex)
            //            {
            //                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            //                m_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
            //                ex.printStackTrace();
            //                m_Error = true;
            //            }
             catch (NullPointerException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (IllegalArgumentException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (Exception ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
            thread_track++;
        }
        /* Disable GUI widgets for the conversion */
        m_GUI.prgConvert.setValue(100);
        m_GUI.lblConvertProg.setText(""100%"");
        m_GUI.prgConvert.setEnabled(false);
        m_GUI.lblConvert.setEnabled(false);
        m_GUI.lblConvertProg.setEnabled(false);
    }

    /**
     * Outputs a text file to be used by mpeg2enc for encoding
     * @param   m_GUI This is the GUI object used to control the form
     */
    public void matrix() {
        try {
            FileWriter fw = new FileWriter(m_GUI.strOutputDir + ""/"" + ""matrix.txt"");
            BufferedWriter wr = new BufferedWriter(fw);
            wr.write(""# High resolution INTRA table\n"");
            wr.write(""8,16,18,20,24,25,26,30\n"");
            wr.write(""16,16,20,23,25,26,30,30\n"");
            wr.write(""18,20,22,24,26,28,29,31\n"");
            wr.write(""20,21,23,24,26,28,31,31\n"");
            wr.write(""21,23,24,25,28,30,30,33\n"");
            wr.write(""23,24,25,28,30,30,33,36\n"");
            wr.write(""24,25,26,29,29,31,34,38\n"");
            wr.write(""25,26,28,29,31,34,38,42\n"");
            wr.write(""# TMPEGEnc NON-INTRA table\n"");
            wr.write(""16,17,18,19,20,21,22,23\n"");
            wr.write(""17,18,19,20,21,22,23,24\n"");
            wr.write(""18,19,20,21,22,23,24,25\n"");
            wr.write(""19,20,21,22,23,24,26,27\n"");
            wr.write(""20,21,22,23,25,26,27,28\n"");
            wr.write(""21,22,23,24,26,27,28,30\n"");
            wr.write(""22,23,24,26,27,28,30,31\n"");
            wr.write(""23,24,25,27,28,30,31,33\n"");
            wr.close();
            fw.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            System.exit(1);
        }
    }
}
","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains ten unit test cases for the {@link Convert#init()} method.
*/
class ConvertTest {","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains ten unit test cases for the {@link Convert#init()} method.
*/
class ConvertTest {
"
1d7de35c-27b8-49ff-8b49-b2a5ed525a1c,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/GUI_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 29977 tokens (27977 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author  Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /* 
     * Creates a new form, probably the most compilcated - or
     * messiest constructor I have ever developed.
     */
    public GUI() {
        /*
         * initComponents is a netbeans generated method that does
         * all of the GUI stuff for dvd-homevideo.
         */
        initComponents();
        /* 
         * Sets the maximum allowable values for the minutes
         * and seconds Spinners.
         */
        spnSeconds.setModel(spnSecondsSize);
        spnMinutes.setModel(spnMinutesSize);
        /* First do a check for the required programs */
        if (!checkForProg(DependentPrograms))
            MessageBox(""You do not appear to have the necessary\n"" + ""programs installed for dvd-homevideo to operate\n"" + ""correctly.  Please check the README file for the\n"" + ""list of dependencies.  dvd-homevideo will not\n"" + ""function correctly until all dependencies are installed!"", 1);
        /* Now check for the required ieee1394 module */
        if (!checkForModules())
            MessageBox(""You do not have the correct modules loaded\n"" + ""for dvd-homevideo to function properly.  Please\n"" + ""check the README file for further instructions!"", 1);
        if (getJMenuBar() != null)
            (this.getJMenuBar()).setOpaque(false);
        /* 
         * Create Project directory.  This is where (~/.dvd-homevideo) the 
         * .xml files for each session get stored as well as user preferences.
         */
        File ProjectDir = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        if (!ProjectDir.exists()) {
            MessageBox(""All projects will be automatically saved to: "" + System.getProperty(""user.home"") + ""/.dvd-homevideo/"", 1);
            ProjectDir.mkdir();
        }
        File ProjProperties = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        if (!ProjProperties.exists()) {
            try {
                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));
                projProp.close();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(strOutputDir, ex);
                MessageBox(""IO Error writing to properties file...in GUI.java\n"" + ex.toString(), 0);
                ex.printStackTrace();
            }
        }
        /* If the user has specified individual customization, then read it */
        ReadProjProperties();
    }

    /* End of constructor */
    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));

    protected String strOutputDir;

    protected boolean blnBegin;

    /* My list of dependent programs for dvd-homevideo */
    protected String[] DependentPrograms = { ""dvgrab"", ""transcode"", ""mplex"", ""dvd-menu"", ""dvdauthor"", ""growisofs"", ""ffmpeg"", ""lame"", ""sox"" };

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate=""collapsed"" desc="" Generated Code "">//GEN-BEGIN:initComponents
    private void initComponents() {
        grpQuality = new javax.swing.ButtonGroup();
        fcOpen = new javax.swing.JFileChooser();
        grpFormat = new javax.swing.ButtonGroup();
        grpAspectRatio = new javax.swing.ButtonGroup();
        fcMenuOpen = new javax.swing.JFileChooser();
        grpMenuFormat = new javax.swing.ButtonGroup();
        grpMenuAspectRatio = new javax.swing.ButtonGroup();
        grpMenuMode = new javax.swing.ButtonGroup();
        grpMenuIgnore = new javax.swing.ButtonGroup();
        pnlGUI = new javax.swing.JPanel();
        lblMinutes = new javax.swing.JLabel();
        spnMinutes = new javax.swing.JSpinner();
        lblSeconds = new javax.swing.JLabel();
        spnSeconds = new javax.swing.JSpinner();
        chkQuality = new javax.swing.JCheckBox();
        rdSuper = new javax.swing.JRadioButton();
        rdGood = new javax.swing.JRadioButton();
        rdAverage = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        chkMenu = new javax.swing.JCheckBox();
        lblPicture = new javax.swing.JLabel();
        txtPicture = new javax.swing.JTextField();
        lblAudio = new javax.swing.JLabel();
        txtAudio = new javax.swing.JTextField();
        btnOpen_Picture = new javax.swing.JButton();
        prgCapture = new javax.swing.JProgressBar();
        prgConvert = new javax.swing.JProgressBar();
        prgAuthor = new javax.swing.JProgressBar();
        btnOpen_Audio = new javax.swing.JButton();
        lblTextFile = new javax.swing.JLabel();
        txtTextFile = new javax.swing.JTextField();
        btnOpen_TextFile = new javax.swing.JButton();
        txtOutputDir = new javax.swing.JTextField();
        lblOutputDir = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnOpen_OutputDir = new javax.swing.JButton();
        chkBurn = new javax.swing.JCheckBox();
        lblCaptureProg = new javax.swing.JLabel();
        lblConvertProg = new javax.swing.JLabel();
        lblAuthorProg = new javax.swing.JLabel();
        lblCapture = new javax.swing.JLabel();
        lblConvert = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        sprCapConvert = new javax.swing.JSeparator();
        sprMenuAuthor = new javax.swing.JSeparator();
        spTextArea = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        rdNTSC = new javax.swing.JRadioButton();
        rdPAL = new javax.swing.JRadioButton();
        rd4_3 = new javax.swing.JRadioButton();
        rd16_9 = new javax.swing.JRadioButton();
        lblFormat = new javax.swing.JLabel();
        lblAspectRatio = new javax.swing.JLabel();
        sprAspectRatio = new javax.swing.JSeparator();
        btnPlay = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        sprOpen = new javax.swing.JSeparator();
        menuSave = new javax.swing.JMenuItem();
        sprSave = new javax.swing.JSeparator();
        menuExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();
        sprIgnore = new javax.swing.JSeparator();
        menuProjProp = new javax.swing.JMenu();
        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();
        menuRdPAL = new javax.swing.JRadioButtonMenuItem();
        sprMenuFormatAspect = new javax.swing.JSeparator();
        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();
        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();
        sprMenuThread = new javax.swing.JSeparator();
        menuChkThread = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuInternet = new javax.swing.JMenuItem();
        menuREADME = new javax.swing.JMenuItem();
        menuBug = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();
        fcOpen.setName(""fcOpen"");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(""dvd-homevideo"");
        setIconImage(image.getImage());
        setName(""dvd-homevideo"");
        setResizable(false);
        pnlGUI.setLayout(null);
        pnlGUI.setToolTipText(""dvd-homevideo"");
        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setName(""pnlGUI"");
        pnlGUI.setOpaque(false);
        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));
        lblMinutes.setText(""Capture Time in Minutes"");
        lblMinutes.setName(""lblMinutes"");
        pnlGUI.add(lblMinutes);
        lblMinutes.setBounds(20, 10, 154, 15);
        spnMinutes.setToolTipText(""Minutes Portion of the Capture Time"");
        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));
        spnMinutes.setName(""spnMinutes"");
        spnMinutes.setNextFocusableComponent(spnSeconds);
        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));
        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinutesStateChanged(evt);
            }
        });
        pnlGUI.add(spnMinutes);
        spnMinutes.setBounds(140, 30, 35, 20);
        lblSeconds.setText(""Capture Time in Seconds"");
        lblSeconds.setName(""lblSeconds"");
        pnlGUI.add(lblSeconds);
        lblSeconds.setBounds(20, 50, 155, 15);
        spnSeconds.setToolTipText(""Seconds Portion of the Capture Time"");
        spnSeconds.setName(""spnSeconds"");
        spnSeconds.setNextFocusableComponent(chkQuality);
        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));
        spnSeconds.setRequestFocusEnabled(false);
        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnSecondsStateChanged(evt);
            }
        });
        pnlGUI.add(spnSeconds);
        spnSeconds.setBounds(140, 70, 35, 20);
        chkQuality.setText(""Quality for DVD compression"");
        chkQuality.setToolTipText(""Check this box to enable quality control"");
        chkQuality.setName(""chkQuality"");
        chkQuality.setNextFocusableComponent(rdSuper);
        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkQualityKeyTyped(evt);
            }
        });
        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkQualityMouseClicked(evt);
            }
        });
        pnlGUI.add(chkQuality);
        chkQuality.setBounds(260, 10, 208, 23);
        grpQuality.add(rdSuper);
        rdSuper.setSelected(true);
        rdSuper.setText(""Super"");
        rdSuper.setToolTipText(""Best Quality...recommended"");
        rdSuper.setEnabled(false);
        rdSuper.setName(""rdSuper"");
        rdSuper.setNextFocusableComponent(rdGood);
        pnlGUI.add(rdSuper);
        rdSuper.setBounds(280, 30, 60, 23);
        grpQuality.add(rdGood);
        rdGood.setText(""Good"");
        rdGood.setToolTipText(""Good Quality...a little faster"");
        rdGood.setEnabled(false);
        rdGood.setName(""rdGood"");
        rdGood.setNextFocusableComponent(rdAverage);
        pnlGUI.add(rdGood);
        rdGood.setBounds(280, 50, 58, 23);
        grpQuality.add(rdAverage);
        rdAverage.setText(""Average"");
        rdAverage.setToolTipText(""Nothing special...but fast"");
        rdAverage.setEnabled(false);
        rdAverage.setName(""rdAverage"");
        rdAverage.setNextFocusableComponent(rdNTSC);
        pnlGUI.add(rdAverage);
        rdAverage.setBounds(280, 70, 75, 23);
        btnStart.setText(""Start"");
        btnStart.setToolTipText(""Start Capturing Video from your Digital Camcorder"");
        btnStart.setEnabled(false);
        btnStart.setName(""btnStart"");
        btnStart.setNextFocusableComponent(btnExit);
        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnStartKeyTyped(evt);
            }
        });
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        pnlGUI.add(btnStart);
        btnStart.setBounds(250, 400, 70, 25);
        btnExit.setText(""Exit"");
        btnExit.setToolTipText(""Exit dvd-homevideo"");
        btnExit.setName(""btnExit"");
        btnExit.setNextFocusableComponent(btnPlay);
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnExitKeyTyped(evt);
            }
        });
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        pnlGUI.add(btnExit);
        btnExit.setBounds(330, 400, 70, 25);
        chkMenu.setText(""Custom DVD Menu"");
        chkMenu.setToolTipText(""Enables Custom Picture and Audio for DVD Background"");
        chkMenu.setName(""chkMenu"");
        chkMenu.setNextFocusableComponent(txtPicture);
        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkMenuKeyTyped(evt);
            }
        });
        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkMenuMouseClicked(evt);
            }
        });
        pnlGUI.add(chkMenu);
        chkMenu.setBounds(10, 170, 144, 23);
        lblPicture.setText(""Path to DVD Menu Picture"");
        lblPicture.setEnabled(false);
        lblPicture.setName(""lblPicture"");
        pnlGUI.add(lblPicture);
        lblPicture.setBounds(10, 200, 160, 15);
        txtPicture.setEnabled(false);
        txtPicture.setName(""txtPicture"");
        txtPicture.setNextFocusableComponent(btnOpen_Picture);
        pnlGUI.add(txtPicture);
        txtPicture.setBounds(10, 220, 170, 19);
        lblAudio.setText(""Path to DVD Menu Audio"");
        lblAudio.setEnabled(false);
        lblAudio.setName(""lblAudio"");
        pnlGUI.add(lblAudio);
        lblAudio.setBounds(10, 250, 155, 15);
        txtAudio.setEnabled(false);
        txtAudio.setName(""txtAudio"");
        txtAudio.setNextFocusableComponent(btnOpen_Audio);
        pnlGUI.add(txtAudio);
        txtAudio.setBounds(10, 270, 170, 19);
        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Picture.setEnabled(false);
        btnOpen_Picture.setName(""btnOpen_Picture"");
        btnOpen_Picture.setNextFocusableComponent(txtAudio);
        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_PictureKeyTyped(evt);
            }
        });
        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_PictureMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Picture);
        btnOpen_Picture.setBounds(190, 220, 30, 25);
        prgCapture.setEnabled(false);
        prgCapture.setName(""prgCapture"");
        pnlGUI.add(prgCapture);
        prgCapture.setBounds(10, 360, 148, 14);
        prgConvert.setEnabled(false);
        prgConvert.setName(""prgConvert"");
        pnlGUI.add(prgConvert);
        prgConvert.setBounds(180, 360, 148, 14);
        prgAuthor.setEnabled(false);
        prgAuthor.setName(""prgAuthor"");
        pnlGUI.add(prgAuthor);
        prgAuthor.setBounds(350, 360, 148, 14);
        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Audio.setEnabled(false);
        btnOpen_Audio.setName(""btnOpen_Audio"");
        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);
        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_AudioKeyTyped(evt);
            }
        });
        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_AudioMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Audio);
        btnOpen_Audio.setBounds(190, 270, 30, 25);
        lblTextFile.setText(""Path to Text File (optional)"");
        lblTextFile.setToolTipText(""This text file specifies the chapter titles for the DVD"");
        lblTextFile.setName(""lblTextFile"");
        pnlGUI.add(lblTextFile);
        lblTextFile.setBounds(260, 270, 165, 15);
        txtTextFile.setName(""txtTextFile"");
        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);
        pnlGUI.add(txtTextFile);
        txtTextFile.setBounds(260, 290, 200, 19);
        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_TextFile.setName(""btnOpen_TextFile"");
        btnOpen_TextFile.setNextFocusableComponent(btnStart);
        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_TextFileKeyTyped(evt);
            }
        });
        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_TextFileMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_TextFile);
        btnOpen_TextFile.setBounds(470, 290, 30, 25);
        txtOutputDir.setName(""txtOutputDir"");
        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);
        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOutputDirFocusLost(evt);
            }
        });
        pnlGUI.add(txtOutputDir);
        txtOutputDir.setBounds(260, 190, 200, 19);
        lblOutputDir.setText(""Path to the Output Directory"");
        lblOutputDir.setName(""lblOutputDir"");
        pnlGUI.add(lblOutputDir);
        lblOutputDir.setBounds(260, 170, 177, 15);
        txtTitle.setName(""txtTitle"");
        txtTitle.setNextFocusableComponent(txtTextFile);
        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTitleFocusLost(evt);
            }
        });
        pnlGUI.add(txtTitle);
        txtTitle.setBounds(260, 240, 200, 19);
        lblTitle.setText(""Enter a Title for the DVD"");
        lblTitle.setName(""lblTitle"");
        pnlGUI.add(lblTitle);
        lblTitle.setBounds(260, 220, 153, 15);
        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_OutputDir.setName(""btnOpen_OutputDir"");
        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);
        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_OutputDirKeyTyped(evt);
            }
        });
        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_OutputDirMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_OutputDir);
        btnOpen_OutputDir.setBounds(470, 190, 30, 25);
        chkBurn.setText(""Burn to DVD"");
        chkBurn.setName(""chkBurn"");
        chkBurn.setNextFocusableComponent(chkMenu);
        pnlGUI.add(chkBurn);
        chkBurn.setBounds(340, 120, 103, 23);
        lblCaptureProg.setText(""0%"");
        lblCaptureProg.setEnabled(false);
        lblCaptureProg.setName(""lblCaptureProg"");
        pnlGUI.add(lblCaptureProg);
        lblCaptureProg.setBounds(20, 380, 40, 15);
        lblConvertProg.setText(""0%"");
        lblConvertProg.setEnabled(false);
        lblConvertProg.setName(""lblConvertProg"");
        pnlGUI.add(lblConvertProg);
        lblConvertProg.setBounds(190, 380, 40, 15);
        lblAuthorProg.setText(""0%"");
        lblAuthorProg.setEnabled(false);
        lblAuthorProg.setName(""lblAuthorProg"");
        pnlGUI.add(lblAuthorProg);
        lblAuthorProg.setBounds(360, 380, 40, 15);
        lblCapture.setText(""Capture Progress"");
        lblCapture.setEnabled(false);
        lblCapture.setName(""lblCapture"");
        pnlGUI.add(lblCapture);
        lblCapture.setBounds(10, 340, 107, 15);
        lblConvert.setText(""Conversion Progress"");
        lblConvert.setEnabled(false);
        lblConvert.setName(""lblConvert"");
        pnlGUI.add(lblConvert);
        lblConvert.setBounds(180, 340, 129, 15);
        lblAuthor.setText(""Authoring DVD"");
        lblAuthor.setEnabled(false);
        lblAuthor.setName(""lblAuthor"");
        pnlGUI.add(lblAuthor);
        lblAuthor.setBounds(350, 340, 95, 15);
        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));
        sprCapConvert.setName(""sprCapConvert"");
        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprCapConvert);
        sprCapConvert.setBounds(10, 160, 490, 5);
        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));
        sprMenuAuthor.setName(""sprMenuAuthor"");
        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprMenuAuthor);
        sprMenuAuthor.setBounds(10, 330, 490, 5);
        spTextArea.setAutoscrolls(true);
        spTextArea.setName(""spTextArea"");
        txtAreaOutput.setEditable(false);
        txtAreaOutput.setLineWrap(true);
        txtAreaOutput.setToolTipText(""Output during program execution"");
        txtAreaOutput.setWrapStyleWord(true);
        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtAreaOutput.setName(""txtAreaOutput"");
        spTextArea.setViewportView(txtAreaOutput);
        pnlGUI.add(spTextArea);
        spTextArea.setBounds(20, 470, 470, 140);
        grpFormat.add(rdNTSC);
        rdNTSC.setSelected(true);
        rdNTSC.setText(""NTSC"");
        rdNTSC.setName(""rdNTSC"");
        rdNTSC.setNextFocusableComponent(rdPAL);
        pnlGUI.add(rdNTSC);
        rdNTSC.setBounds(20, 130, 58, 23);
        grpFormat.add(rdPAL);
        rdPAL.setText(""PAL"");
        rdPAL.setName(""rdPAL"");
        rdPAL.setNextFocusableComponent(rd4_3);
        pnlGUI.add(rdPAL);
        rdPAL.setBounds(90, 130, 60, 23);
        grpAspectRatio.add(rd4_3);
        rd4_3.setSelected(true);
        rd4_3.setText(""4:3"");
        rd4_3.setName(""rd4_3"");
        rd4_3.setNextFocusableComponent(rd16_9);
        pnlGUI.add(rd4_3);
        rd4_3.setBounds(190, 130, 50, 23);
        grpAspectRatio.add(rd16_9);
        rd16_9.setText(""16:9"");
        rd16_9.setName(""rd16_9"");
        rd16_9.setNextFocusableComponent(chkBurn);
        pnlGUI.add(rd16_9);
        rd16_9.setBounds(240, 130, 60, 23);
        lblFormat.setText(""Video Format"");
        lblFormat.setName(""lblFormat"");
        pnlGUI.add(lblFormat);
        lblFormat.setBounds(20, 110, 110, 15);
        lblAspectRatio.setText(""Aspect Ratio"");
        lblAspectRatio.setName(""lblAspectRatio"");
        pnlGUI.add(lblAspectRatio);
        lblAspectRatio.setBounds(190, 110, 100, 15);
        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));
        sprAspectRatio.setName(""sprAspectRatio"");
        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprAspectRatio);
        sprAspectRatio.setBounds(10, 100, 490, 5);
        btnPlay.setText(""Play"");
        btnPlay.setEnabled(false);
        btnPlay.setNextFocusableComponent(spnMinutes);
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        pnlGUI.add(btnPlay);
        btnPlay.setBounds(410, 400, 70, 25);
        txtStatus.setBackground(new java.awt.Color(153, 153, 153));
        txtStatus.setEditable(false);
        txtStatus.setFont(new java.awt.Font(""Dialog"", 1, 12));
        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStatus.setText(""Status"");
        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));
        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));
        pnlGUI.add(txtStatus);
        txtStatus.setBounds(410, 430, 70, 30);
        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());
        menuBarMain.setName(""menuBarMain"");
        menuFile.setMnemonic('f');
        menuFile.setText(""File"");
        menuFile.setName(""menuFile"");
        menuOpen.setMnemonic('o');
        menuOpen.setText(""Open"");
        menuOpen.setName(""menuOpen"");
        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuOpenMousePressed(evt);
            }
        });
        menuFile.add(menuOpen);
        sprOpen.setName(""sprOpen"");
        menuFile.add(sprOpen);
        menuSave.setMnemonic('s');
        menuSave.setText(""Save"");
        menuSave.setName(""menuSave"");
        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSaveMousePressed(evt);
            }
        });
        menuFile.add(menuSave);
        sprSave.setName(""sprSave"");
        menuFile.add(sprSave);
        menuExit.setMnemonic('x');
        menuExit.setText(""Exit"");
        menuExit.setBorderPainted(false);
        menuExit.setFocusable(true);
        menuExit.setName(""menuExit"");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuExitMousePressed(evt);
            }
        });
        menuFile.add(menuExit);
        menuBarMain.add(menuFile);
        menuTools.setMnemonic('t');
        menuTools.setText(""Tools"");
        menuTools.setName(""menuTools"");
        grpMenuIgnore.add(menuRd_IgnoreNone);
        menuRd_IgnoreNone.setText(""Reset"");
        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreNoneStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreNone);
        grpMenuIgnore.add(menuRd_IgnoreCap);
        menuRd_IgnoreCap.setText(""Skip Capture"");
        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCap);
        grpMenuIgnore.add(menuRd_IgnoreCapConv);
        menuRd_IgnoreCapConv.setText(""Skip Capture/Transcode"");
        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConv);
        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);
        menuRd_IgnoreCapConvMenu.setText(""Skip Capture/Transcode/Menu"");
        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvMenuStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConvMenu);
        menuTools.add(sprIgnore);
        menuProjProp.setText(""Project Properties (Default)"");
        grpMenuFormat.add(menuRdNTSC);
        menuRdNTSC.setSelected(true);
        menuRdNTSC.setText(""NTSC"");
        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdNTSCItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdNTSC);
        grpMenuFormat.add(menuRdPAL);
        menuRdPAL.setText(""PAL"");
        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdPALItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdPAL);
        menuProjProp.add(sprMenuFormatAspect);
        grpMenuAspectRatio.add(menuRd_4_3);
        menuRd_4_3.setSelected(true);
        menuRd_4_3.setText(""4:3"");
        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_4_3ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_4_3);
        grpMenuAspectRatio.add(menuRd_16_9);
        menuRd_16_9.setText(""16:9"");
        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_16_9ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_16_9);
        menuProjProp.add(sprMenuThread);
        menuChkThread.setText(""Enable Multi-Threading"");
        menuChkThread.setToolTipText(""EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%"");
        menuChkThread.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuChkThreadItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuChkThread);
        menuTools.add(menuProjProp);
        menuBarMain.add(menuTools);
        menuHelp.setMnemonic('h');
        menuHelp.setText(""Help"");
        menuHelp.setName(""menuHelp"");
        menuInternet.setText(""dvd-homevideo website"");
        menuInternet.setName(""menuInternet"");
        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuInternetMousePressed(evt);
            }
        });
        menuHelp.add(menuInternet);
        menuREADME.setText(""README File"");
        menuREADME.setName(""menuREADME"");
        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuREADMEMousePressed(evt);
            }
        });
        menuHelp.add(menuREADME);
        menuBug.setText(""Submit Bug"");
        menuBug.setName(""menuBug"");
        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBugMousePressed(evt);
            }
        });
        menuHelp.add(menuBug);
        menuAbout.setText(""About dvd-homevideo"");
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuAboutMousePressed(evt);
            }
        });
        menuHelp.add(menuAbout);
        menuBarMain.add(menuHelp);
        setJMenuBar(menuBarMain);
        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged
        if (menuRd_IgnoreNone.isSelected()) {
            lblMinutes.setEnabled(true);
            spnMinutes.setEnabled(true);
            lblSeconds.setEnabled(true);
            spnSeconds.setEnabled(true);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(false);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged
        if (menuRd_IgnoreCap.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapStateChanged
    private //GEN-FIRST:event_txtOutputDirFocusLost
    void //GEN-FIRST:event_txtOutputDirFocusLost
    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtOutputDirFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtOutputDirFocusLost
    private //GEN-FIRST:event_txtTitleFocusLost
    void //GEN-FIRST:event_txtTitleFocusLost
    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtTitleFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtTitleFocusLost
    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    java.awt.event.KeyEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirKeyTyped
    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    java.awt.event.MouseEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirMouseClicked
    private //GEN-FIRST:event_spnSecondsStateChanged
    void //GEN-FIRST:event_spnSecondsStateChanged
    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnSecondsStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnSecondsStateChanged
    private //GEN-FIRST:event_spnMinutesStateChanged
    void //GEN-FIRST:event_spnMinutesStateChanged
    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnMinutesStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnMinutesStateChanged
    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnStartKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER) {
            try {
                /* 
                 * Automatically save the configuration in the users ~/.dvd-homevideo
                 * directory.  This way if they forget to click on the Save button in
                 * the File menu, it will still be saved once they start capturing 
                 * from their camcorder. 
                 */
                WriteSession();
            } catch (IOException e) {
            }
            blnBegin = true;
            btnPlay.setEnabled(false);
        }
    }

    //GEN-LAST:event_btnStartKeyTyped
    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnExitKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER)
            ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitKeyTyped
    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuChkThreadItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuChkThreadItemStateChanged
    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuAboutMousePressed
        MessageBox(""dvd-homevideo, version 0.4\n"" + ""Created by: Shane Santner"", 1);
    }

    //GEN-LAST:event_menuAboutMousePressed
    /**
     * This is the code that handles the user clicking the Exit button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnExitMouseClicked
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitMouseClicked
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_16_9ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_16_9ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_4_3ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_4_3ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdPALItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdPALItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdNTSCItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdNTSCItemStateChanged
    /**
     * This is the code that handles the user clicking the Play button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnPlayMouseClicked
        /*
         * Try to play the DVD in kaffeine first, if that fails then
         * try xine next.  TODO Need to also add code for mplayer as well.
         */
        try {
            String[] cmd = { ""kaffeine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""xine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have xine or kaffeine installed.\n"", 1);
            }
        }
    }

    //GEN-LAST:event_btnPlayMouseClicked
    /**
     * This is the code that handles the user clicking on the SubmitBug button
     * in the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuBugMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\n"" + ""in the address bar to submit a bug for dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuBugMousePressed
    /**
     * If you don't need to recapture video from the camcorder because of
     * an error later in the program, then you can check this box in the Tools
     * menu and this will allow you to not have to recapture.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you don't need to recapture video or retranscode the video to DVD format
     * because of an error later in the program, then you can check this box in
     * the Tools menu and this will allow you to not have to recapture or retranscode.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you only need to rerun dvd-author then you can check this box in
     * the Tools menu.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * This is the code that handles the user clicking the Open button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuOpenMousePressed
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter("".xml""));
        fcMenuOpen.setCurrentDirectory(home);
        int returnVal = fcMenuOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            ReadSession(fcMenuOpen.getSelectedFile().getPath());
        enableStartButton();
    }

    //GEN-LAST:event_menuOpenMousePressed
    /**
     * This is the code that handles the user clicking the Save button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuSaveMousePressed
        /* 
         * The default action is to call WriteSession to store all of the 
         * GUI widget information for later retrieval.
         */
        try {
            WriteSession();
        } catch (IOException e) {
        }
    }

    //GEN-LAST:event_menuSaveMousePressed
    /**
     * This is the code that handles the user clicking the dvd-homevideo website
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuInternetMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuInternetMousePressed
    /**
     * This is the code that handles the user clicking the README file
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuREADMEMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/README.html\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuREADMEMousePressed
    /**
     * This is the code that handles the user clicking the Exit button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuExitMousePressed
        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_menuExitMousePressed
    /**
     * This is the code that handles the user clicking the Start button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnStartMouseClicked
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This way if they forget to click on the Save button in
             * the File menu, it will still be saved once they start capturing 
             * from their camcorder. 
             */
            WriteSession();
        } catch (IOException e) {
        }
        blnBegin = true;
        btnPlay.setEnabled(false);
    }

    //GEN-LAST:event_btnStartMouseClicked
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for a title file to use for dvd-menu.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to store
     * everything in.
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate an
     * audio file.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioKeyTyped
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureKeyTyped
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkMenuKeyTyped
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        } else {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkMenuKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the quality group of radio buttons
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkQualityKeyTyped
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        } else {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkQualityKeyTyped
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureMouseClicked
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate an
     * audio file in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioMouseClicked
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to store
     * all of their files in
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for a title file to be used for
     * the background menu of the DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to select the quality of video conversion for
     * their DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkQualityMouseClicked
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        } else {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkQualityMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to specify details for the DVD menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkMenuMouseClicked
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        } else {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkMenuMouseClicked
    public void enableStartButton() {
        int tempMinutes, tempSeconds, tempTotal;
        String tempStrTitle, tempStrOutputDir;
        /* First, load the values from the form into local variables */
        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();
        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();
        tempTotal = tempSeconds + tempMinutes;
        tempStrTitle = txtTitle.getText();
        tempStrOutputDir = txtOutputDir.getText();
        /*
         * Now do the error checking.  Here we look for a capture time
         * that is greater than zero and less than 65 minutes 
         */
        if (tempTotal >= 1 && !tempStrOutputDir.equals("""") && !tempStrTitle.equals("""")) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else if (!tempStrOutputDir.equals("""") && !tempStrTitle.equals("""") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else
            btnStart.setEnabled(false);
    }

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules() {
        try {
            String line;
            String modules = ""cat /proc/modules | grep raw1394"";
            String[] module_cmd = { ""/bin/sh"", ""-c"", modules };
            Process p = Runtime.getRuntime().exec(module_cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            line = in.readLine();
            p.waitFor();
            if (line == null)
                return false;
            else
                return true;
        } catch (Exception ioe) {
            /* If we have made it here then the module is not loaded */
            return false;
        }
    }

    /**
     * On startup, checks to ensure that all dependent programs are installed
     * @param   Prog[]  List of dependent programs needed for dvd-homevideo
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean checkForProg(String[] Prog) {
        /* Declare local variables */
        int i = 0;
        int j = 0;
        String build_list = """";
        String[] uninstalled = new String[Prog.length];
        while (true) {
            try {
                /* 
                 * Walk through the list of programs needed for dvd-homevideo
                 * to operate correctly.
                 */
                while (i < Prog.length) {
                    /* 
                     * This is how I test for a program.  I simple try to 
                     * execute the application, if it fails then the software
                     * jumps to the catch block and I know that the program
                     * is either not installed or not in the users path.
                     */
                    Process p = Runtime.getRuntime().exec(Prog[i]);
                    /* 
                     * If I make it here then the program exists and I need to
                     * kill it.
                     */
                    p.destroy();
                    i++;
                }
                /* Check for any uninstalled programs */
                for (i = 0; i < uninstalled.length; i++) {
                    /* If not null then add to the list */
                    if (uninstalled[i] != null)
                        build_list += uninstalled[i] + ""\n"";
                }
                /* 
                 * If the first element is null, then all programs are 
                 * installed correctly.
                 */
                if (uninstalled[0] == null)
                    return true;
                else
                    /* Otherwise tell the user what they are missing */
                    MessageBox(""The following programs are not installed or not in "" + ""your path!\n"" + build_list, 0);
                return false;
            } catch (IOException ioe) {
                /* Add the missing program to the uninstalled array */
                uninstalled[j] = Prog[i];
                i++;
                j++;
            }
        }
    }

    /**
     * Displays a message box with the supplied text and yes/no options
     * @param   message    The message to display in the box
     */
    public int MessageBox(String message) {
        return JOptionPane.showConfirmDialog(null, message, ""dvd-homevideo"", JOptionPane.YES_NO_OPTION);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     */
    public void MessageBox(String message, int type) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     * @param   picture    Picture to display in the MessageBox
     */
    public void MessageBox(String message, int type, String picture) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type, new javax.swing.ImageIcon(getClass().getResource(picture)));
    }

    /**
     * Check dvd-homevideo for runtime errors
     * @param   fileName    This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return   A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName) {
        String line;
        StringTokenizer st;
        String testToken;
        boolean error = false;
        /*
         * Need to parse through the supplies file and look for any
         * instances of the words 'error' or 'broken'.  If found, this
         * is treated as a run-time error of one of the dependent programs
         * that dvd-homevideo relies on.
         */
        try {
            BufferedReader in = new BufferedReader(new FileReader(fileName));
            while ((line = in.readLine()) != null) {
                /* Check for a specific burn error */
                if (line.equals("":-( /dev/dvd: media is not recognized as recordable DVD: 9"")) {
                    MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                    return true;
                }
                /*
                 * Need to catch all instances of 'error' or 'broken'.  This
                 * includes cases such as:
                 * **Error:
                 * error~
                 * Broken pipe
                 * etc, etc, etc.  We need to catch ALL instances.
                 */
                st = new StringTokenizer(line, ""*,;:'-~\t "");
                while (st.hasMoreTokens()) {
                    testToken = st.nextToken();
                    if (// ||
                    testToken.equalsIgnoreCase(""Error"")) //testToken.equalsIgnoreCase(""Broken""))
                    {
                        MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                        error = true;
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""Can not find "" + fileName + ""\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        return error;
    }

    /**
     * Update the Status textbox
     * @param   typeColor   red, green, or grey
     * @param   typeUpdate  Values should be PASS, FAIL, Status
     */
    public void UpdateStatus(Color typeColor, String typeUpdate) {
        /* 
         * Set the background and text to let the user know that
         * dvd-homevideo failed
         */
        txtStatus.setBackground(typeColor);
        txtStatus.setText(typeUpdate);
        if (typeUpdate.equals(""FAIL""))
            txtStatus.setToolTipText(""Look at dvd-homevideo.err and files"" + "" in the log directory for possible"" + "" reasons why dvd-homevideo failed."");
        /* 
         * If we need to wait for user input because dvd-homevideo
         * has completed...either because of passing or failing then
         * set blnBegin to false.
         */
        if (!typeUpdate.equals(""Status""))
            blnBegin = false;
    }

    /**
     * This method should be called every time the application exits normally.  This allows the
     * current session to be saved before quiting dvd-homevideo.
     */
    public void ExitDVDHomevideo() {
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This should be the only place in the project where System.exit(0) is called. 
             */
            WriteSession();
            WriteProjProperties();
            System.exit(0);
        } catch (IOException e) {
        }
    }

    /**
     * This method retrieves user specific information from the
     * properties xml file in the users ~/.dvd-homevideo directory
     */
    public void ReadProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        String line, token;
        StringTokenizer st;
        try {
            /* 
             * Read the xml properties file and set widgets on the 
             * form accordingly
             */
            BufferedReader reader = new BufferedReader(new FileReader(home));
            while ((line = reader.readLine()) != null) {
                st = new StringTokenizer(line, ""<>"");
                while (st.hasMoreTokens()) {
                    token = st.nextToken();
                    if (token.equals(""menuRdNTSC"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));
                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));
                        rdNTSC.setSelected(menuRdNTSC.isSelected());
                        rdPAL.setSelected(menuRdPAL.isSelected());
                    } else if (token.equals(""menuRd_4_3"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));
                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));
                        rd4_3.setSelected(menuRd_4_3.isSelected());
                        rd16_9.setSelected(menuRd_16_9.isSelected());
                    } else if (token.equals(""menuChkThread"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuChkThread.setSelected(Boolean.parseBoolean(token));
                    }
                }
            }
            reader.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in ReadProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * This method stores user specific information in a properties xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        try {
            /* Write/rewrite the xml properties file */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home));
            writer.write(""<dvd-homevideo properties>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRdNTSC.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t<menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRd_4_3.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t</JRadioButonMenuItem>"");
            writer.newLine();
            writer.write(""\t<JCheckBoxMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuChkThread>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuChkThread.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuChkThread>"");
            writer.newLine();
            writer.write(""\t</JCheckBoxMenuItem>"");
            writer.newLine();
            writer.close();
            /* Update the states on the form */
            rdNTSC.setSelected(menuRdNTSC.isSelected());
            rdPAL.setSelected(menuRdPAL.isSelected());
            rd4_3.setSelected(menuRd_4_3.isSelected());
            rd16_9.setSelected(menuRd_16_9.isSelected());
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in WriteProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Opens a previous dvd-homevideo session by reading an xml file
     * @param   xmlPath    Path to the xml file
     */
    public void ReadSession(String xmlPath) {
        String line, token;
        StringTokenizer st;
        boolean done = false;
        int i;
        /* 
         * Define an exhaustive list of the widgets that we need to track
         * on the form.
         */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            BufferedReader in = new BufferedReader(new FileReader(xmlPath));
            line = in.readLine();
            st = new StringTokenizer(line, ""<>"");
            token = st.nextToken();
            /* 
             * If the first line does not contain dvd-homevideo then
             * we have a bad xml file.
             */
            if (!token.equals(""dvd-homevideo"")) {
                MessageBox(""Invalid File Format!"", 1);
                done = true;
            }
            while (((line = in.readLine()) != null) && !done) {
                st = new StringTokenizer(line, ""<>"");
                if (!st.nextToken().equals(""/dvd-homevideo""))
                    token = st.nextToken();
                /* Read in the variables and set them on the form */
                if (token.equals(""JLabel"")) {
                    for (i = 0; i < lbl_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JSpinner"")) {
                    for (i = 0; i < spn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        // SDK 1.4 didn't like this
                        spn_widgets[i].setValue(Integer.parseInt(token));
                        //spn_widgets[i].getModel().setValue((Object)token);
                        in.readLine();
                    }
                } else if (token.equals(""JCheckBox"")) {
                    for (i = 0; i < chk_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButton"")) {
                    for (i = 0; i < rd_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JTextField"")) {
                    for (i = 0; i < txt_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        if (!token.substring(1, 4).equals(""tex""))
                            txt_widgets[i].setText(token);
                        in.readLine();
                    }
                } else if (token.equals(""JButton"")) {
                    for (i = 0; i < btn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButtonMenuItem"")) {
                    for (i = 0; i < chkMenu_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else {
                    lblCapture.setEnabled(false);
                    lblConvert.setEnabled(false);
                    lblAuthor.setEnabled(false);
                    lblCaptureProg.setEnabled(false);
                    lblConvertProg.setEnabled(false);
                    lblAuthorProg.setEnabled(false);
                    prgCapture.setEnabled(false);
                    prgConvert.setEnabled(false);
                    prgAuthor.setEnabled(false);
                    lblCaptureProg.setText(""0%"");
                    lblConvertProg.setText(""0%"");
                    lblAuthorProg.setText(""0%"");
                }
            }
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while reading the xml file"" + ""\nfor the requested dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Saves the state of all widgets on the GUI form in an xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteSession() throws IOException {
        int i;
        /* Again, we must have this exhaustive list of widgets to parse through */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            /* Write the file to the users ~/.dvd-homevideo directory */
            String home = System.getProperty(""user.home"");
            File msgboxSave = new File(home + ""/.dvd-homevideo/properties"");
            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/properties""));
            msgboxSaveWriter.close();
            /* Now write the xml file to the users home/dvd-homevideo directory */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/"" + txtTitle.getText() + "".xml""));
            writer.write(""<dvd-homevideo>"");
            writer.newLine();
            writer.write(""\t<JLabel>"");
            writer.newLine();
            for (i = 0; i < lbl_widgets.length; i++) {
                writer.write(""\t\t<"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + lbl_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JLabel>"");
            writer.newLine();
            writer.write(""\t<JSpinner>"");
            writer.newLine();
            for (i = 0; i < spn_widgets.length; i++) {
                writer.write(""\t\t<"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + spn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<value>"" + spn_widgets[i].getValue() + ""</value>"");
                writer.newLine();
                writer.write(""\t\t</"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JSpinner>"");
            writer.newLine();
            writer.write(""\t<JCheckBox>"");
            writer.newLine();
            for (i = 0; i < chk_widgets.length; i++) {
                writer.write(""\t\t<"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chk_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chk_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JCheckBox>"");
            writer.newLine();
            writer.write(""\t<JRadioButton>"");
            writer.newLine();
            for (i = 0; i < rd_widgets.length; i++) {
                writer.write(""\t\t<"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + rd_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + rd_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButton>"");
            writer.newLine();
            writer.write(""\t<JTextField>"");
            writer.newLine();
            for (i = 0; i < txt_widgets.length; i++) {
                writer.write(""\t\t<"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + txt_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<text>"" + txt_widgets[i].getText() + ""</text>"");
                writer.newLine();
                writer.write(""\t\t</"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JTextField>"");
            writer.newLine();
            writer.write(""\t<JButton>"");
            writer.newLine();
            for (i = 0; i < btn_widgets.length; i++) {
                writer.write(""\t\t<"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + btn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JButton>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            for (i = 0; i < chkMenu_widgets.length; i++) {
                writer.write(""\t\t<"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chkMenu_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chkMenu_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""</dvd-homevideo>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while writing the xml file"" + ""\nfor this dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /*
    public void setIcon()
    {
        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));
        setIconImage(new javax.swing.ImageIcon(image.getImage()));
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;

    private javax.swing.JButton btnOpen_Audio;

    private javax.swing.JButton btnOpen_OutputDir;

    private javax.swing.JButton btnOpen_Picture;

    private javax.swing.JButton btnOpen_TextFile;

    protected javax.swing.JButton btnPlay;

    private javax.swing.JButton btnStart;

    protected javax.swing.JCheckBox chkBurn;

    protected javax.swing.JCheckBox chkMenu;

    protected javax.swing.JCheckBox chkQuality;

    private javax.swing.JFileChooser fcMenuOpen;

    private javax.swing.JFileChooser fcOpen;

    private javax.swing.ButtonGroup grpAspectRatio;

    private javax.swing.ButtonGroup grpFormat;

    private javax.swing.ButtonGroup grpMenuAspectRatio;

    private javax.swing.ButtonGroup grpMenuFormat;

    private javax.swing.ButtonGroup grpMenuIgnore;

    private javax.swing.ButtonGroup grpMenuMode;

    private javax.swing.ButtonGroup grpQuality;

    private javax.swing.JLabel lblAspectRatio;

    private javax.swing.JLabel lblAudio;

    protected javax.swing.JLabel lblAuthor;

    protected javax.swing.JLabel lblAuthorProg;

    protected javax.swing.JLabel lblCapture;

    protected javax.swing.JLabel lblCaptureProg;

    protected javax.swing.JLabel lblConvert;

    protected javax.swing.JLabel lblConvertProg;

    private javax.swing.JLabel lblFormat;

    private javax.swing.JLabel lblMinutes;

    private javax.swing.JLabel lblOutputDir;

    private javax.swing.JLabel lblPicture;

    private javax.swing.JLabel lblSeconds;

    private javax.swing.JLabel lblTextFile;

    private javax.swing.JLabel lblTitle;

    private javax.swing.JMenuItem menuAbout;

    protected javax.swing.JMenuBar menuBarMain;

    private javax.swing.JMenuItem menuBug;

    protected javax.swing.JCheckBoxMenuItem menuChkThread;

    protected javax.swing.JMenuItem menuExit;

    protected javax.swing.JMenu menuFile;

    protected javax.swing.JMenu menuHelp;

    protected javax.swing.JMenuItem menuInternet;

    protected javax.swing.JMenuItem menuOpen;

    private javax.swing.JMenu menuProjProp;

    protected javax.swing.JMenuItem menuREADME;

    private javax.swing.JRadioButtonMenuItem menuRdNTSC;

    private javax.swing.JRadioButtonMenuItem menuRdPAL;

    private javax.swing.JRadioButtonMenuItem menuRd_16_9;

    private javax.swing.JRadioButtonMenuItem menuRd_4_3;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;

    protected javax.swing.JMenuItem menuSave;

    protected javax.swing.JMenu menuTools;

    private javax.swing.JPanel pnlGUI;

    protected javax.swing.JProgressBar prgAuthor;

    protected javax.swing.JProgressBar prgCapture;

    protected javax.swing.JProgressBar prgConvert;

    protected javax.swing.JRadioButton rd16_9;

    protected javax.swing.JRadioButton rd4_3;

    protected javax.swing.JRadioButton rdAverage;

    protected javax.swing.JRadioButton rdGood;

    protected javax.swing.JRadioButton rdNTSC;

    protected javax.swing.JRadioButton rdPAL;

    protected javax.swing.JRadioButton rdSuper;

    private javax.swing.JScrollPane spTextArea;

    protected javax.swing.JSpinner spnMinutes;

    protected javax.swing.JSpinner spnSeconds;

    private javax.swing.JSeparator sprAspectRatio;

    private javax.swing.JSeparator sprCapConvert;

    private javax.swing.JSeparator sprIgnore;

    private javax.swing.JSeparator sprMenuAuthor;

    private javax.swing.JSeparator sprMenuFormatAspect;

    private javax.swing.JSeparator sprMenuThread;

    protected javax.swing.JSeparator sprOpen;

    protected javax.swing.JSeparator sprSave;

    protected javax.swing.JTextArea txtAreaOutput;

    protected javax.swing.JTextField txtAudio;

    protected javax.swing.JTextField txtOutputDir;

    protected javax.swing.JTextField txtPicture;

    protected javax.swing.JTextField txtStatus;

    protected javax.swing.JTextField txtTextFile;

    protected javax.swing.JTextField txtTitle;

    // End of variables declaration//GEN-END:variables
    /* My GUI variable declarations */
    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);

    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);
}
","// GUI_0Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForModules()} method.
*/
class GUI_0Test {","// GUI_0Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForModules()} method.
*/
class GUI_0Test {
"
5eeb1074-6103-4621-979f-33494a4d1776,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/GUI_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 29980 tokens (27980 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author  Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /* 
     * Creates a new form, probably the most compilcated - or
     * messiest constructor I have ever developed.
     */
    public GUI() {
        /*
         * initComponents is a netbeans generated method that does
         * all of the GUI stuff for dvd-homevideo.
         */
        initComponents();
        /* 
         * Sets the maximum allowable values for the minutes
         * and seconds Spinners.
         */
        spnSeconds.setModel(spnSecondsSize);
        spnMinutes.setModel(spnMinutesSize);
        /* First do a check for the required programs */
        if (!checkForProg(DependentPrograms))
            MessageBox(""You do not appear to have the necessary\n"" + ""programs installed for dvd-homevideo to operate\n"" + ""correctly.  Please check the README file for the\n"" + ""list of dependencies.  dvd-homevideo will not\n"" + ""function correctly until all dependencies are installed!"", 1);
        /* Now check for the required ieee1394 module */
        if (!checkForModules())
            MessageBox(""You do not have the correct modules loaded\n"" + ""for dvd-homevideo to function properly.  Please\n"" + ""check the README file for further instructions!"", 1);
        if (getJMenuBar() != null)
            (this.getJMenuBar()).setOpaque(false);
        /* 
         * Create Project directory.  This is where (~/.dvd-homevideo) the 
         * .xml files for each session get stored as well as user preferences.
         */
        File ProjectDir = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        if (!ProjectDir.exists()) {
            MessageBox(""All projects will be automatically saved to: "" + System.getProperty(""user.home"") + ""/.dvd-homevideo/"", 1);
            ProjectDir.mkdir();
        }
        File ProjProperties = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        if (!ProjProperties.exists()) {
            try {
                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));
                projProp.close();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(strOutputDir, ex);
                MessageBox(""IO Error writing to properties file...in GUI.java\n"" + ex.toString(), 0);
                ex.printStackTrace();
            }
        }
        /* If the user has specified individual customization, then read it */
        ReadProjProperties();
    }

    /* End of constructor */
    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));

    protected String strOutputDir;

    protected boolean blnBegin;

    /* My list of dependent programs for dvd-homevideo */
    protected String[] DependentPrograms = { ""dvgrab"", ""transcode"", ""mplex"", ""dvd-menu"", ""dvdauthor"", ""growisofs"", ""ffmpeg"", ""lame"", ""sox"" };

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate=""collapsed"" desc="" Generated Code "">//GEN-BEGIN:initComponents
    private void initComponents() {
        grpQuality = new javax.swing.ButtonGroup();
        fcOpen = new javax.swing.JFileChooser();
        grpFormat = new javax.swing.ButtonGroup();
        grpAspectRatio = new javax.swing.ButtonGroup();
        fcMenuOpen = new javax.swing.JFileChooser();
        grpMenuFormat = new javax.swing.ButtonGroup();
        grpMenuAspectRatio = new javax.swing.ButtonGroup();
        grpMenuMode = new javax.swing.ButtonGroup();
        grpMenuIgnore = new javax.swing.ButtonGroup();
        pnlGUI = new javax.swing.JPanel();
        lblMinutes = new javax.swing.JLabel();
        spnMinutes = new javax.swing.JSpinner();
        lblSeconds = new javax.swing.JLabel();
        spnSeconds = new javax.swing.JSpinner();
        chkQuality = new javax.swing.JCheckBox();
        rdSuper = new javax.swing.JRadioButton();
        rdGood = new javax.swing.JRadioButton();
        rdAverage = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        chkMenu = new javax.swing.JCheckBox();
        lblPicture = new javax.swing.JLabel();
        txtPicture = new javax.swing.JTextField();
        lblAudio = new javax.swing.JLabel();
        txtAudio = new javax.swing.JTextField();
        btnOpen_Picture = new javax.swing.JButton();
        prgCapture = new javax.swing.JProgressBar();
        prgConvert = new javax.swing.JProgressBar();
        prgAuthor = new javax.swing.JProgressBar();
        btnOpen_Audio = new javax.swing.JButton();
        lblTextFile = new javax.swing.JLabel();
        txtTextFile = new javax.swing.JTextField();
        btnOpen_TextFile = new javax.swing.JButton();
        txtOutputDir = new javax.swing.JTextField();
        lblOutputDir = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnOpen_OutputDir = new javax.swing.JButton();
        chkBurn = new javax.swing.JCheckBox();
        lblCaptureProg = new javax.swing.JLabel();
        lblConvertProg = new javax.swing.JLabel();
        lblAuthorProg = new javax.swing.JLabel();
        lblCapture = new javax.swing.JLabel();
        lblConvert = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        sprCapConvert = new javax.swing.JSeparator();
        sprMenuAuthor = new javax.swing.JSeparator();
        spTextArea = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        rdNTSC = new javax.swing.JRadioButton();
        rdPAL = new javax.swing.JRadioButton();
        rd4_3 = new javax.swing.JRadioButton();
        rd16_9 = new javax.swing.JRadioButton();
        lblFormat = new javax.swing.JLabel();
        lblAspectRatio = new javax.swing.JLabel();
        sprAspectRatio = new javax.swing.JSeparator();
        btnPlay = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        sprOpen = new javax.swing.JSeparator();
        menuSave = new javax.swing.JMenuItem();
        sprSave = new javax.swing.JSeparator();
        menuExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();
        sprIgnore = new javax.swing.JSeparator();
        menuProjProp = new javax.swing.JMenu();
        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();
        menuRdPAL = new javax.swing.JRadioButtonMenuItem();
        sprMenuFormatAspect = new javax.swing.JSeparator();
        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();
        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();
        sprMenuThread = new javax.swing.JSeparator();
        menuChkThread = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuInternet = new javax.swing.JMenuItem();
        menuREADME = new javax.swing.JMenuItem();
        menuBug = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();
        fcOpen.setName(""fcOpen"");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(""dvd-homevideo"");
        setIconImage(image.getImage());
        setName(""dvd-homevideo"");
        setResizable(false);
        pnlGUI.setLayout(null);
        pnlGUI.setToolTipText(""dvd-homevideo"");
        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setName(""pnlGUI"");
        pnlGUI.setOpaque(false);
        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));
        lblMinutes.setText(""Capture Time in Minutes"");
        lblMinutes.setName(""lblMinutes"");
        pnlGUI.add(lblMinutes);
        lblMinutes.setBounds(20, 10, 154, 15);
        spnMinutes.setToolTipText(""Minutes Portion of the Capture Time"");
        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));
        spnMinutes.setName(""spnMinutes"");
        spnMinutes.setNextFocusableComponent(spnSeconds);
        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));
        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinutesStateChanged(evt);
            }
        });
        pnlGUI.add(spnMinutes);
        spnMinutes.setBounds(140, 30, 35, 20);
        lblSeconds.setText(""Capture Time in Seconds"");
        lblSeconds.setName(""lblSeconds"");
        pnlGUI.add(lblSeconds);
        lblSeconds.setBounds(20, 50, 155, 15);
        spnSeconds.setToolTipText(""Seconds Portion of the Capture Time"");
        spnSeconds.setName(""spnSeconds"");
        spnSeconds.setNextFocusableComponent(chkQuality);
        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));
        spnSeconds.setRequestFocusEnabled(false);
        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnSecondsStateChanged(evt);
            }
        });
        pnlGUI.add(spnSeconds);
        spnSeconds.setBounds(140, 70, 35, 20);
        chkQuality.setText(""Quality for DVD compression"");
        chkQuality.setToolTipText(""Check this box to enable quality control"");
        chkQuality.setName(""chkQuality"");
        chkQuality.setNextFocusableComponent(rdSuper);
        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkQualityKeyTyped(evt);
            }
        });
        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkQualityMouseClicked(evt);
            }
        });
        pnlGUI.add(chkQuality);
        chkQuality.setBounds(260, 10, 208, 23);
        grpQuality.add(rdSuper);
        rdSuper.setSelected(true);
        rdSuper.setText(""Super"");
        rdSuper.setToolTipText(""Best Quality...recommended"");
        rdSuper.setEnabled(false);
        rdSuper.setName(""rdSuper"");
        rdSuper.setNextFocusableComponent(rdGood);
        pnlGUI.add(rdSuper);
        rdSuper.setBounds(280, 30, 60, 23);
        grpQuality.add(rdGood);
        rdGood.setText(""Good"");
        rdGood.setToolTipText(""Good Quality...a little faster"");
        rdGood.setEnabled(false);
        rdGood.setName(""rdGood"");
        rdGood.setNextFocusableComponent(rdAverage);
        pnlGUI.add(rdGood);
        rdGood.setBounds(280, 50, 58, 23);
        grpQuality.add(rdAverage);
        rdAverage.setText(""Average"");
        rdAverage.setToolTipText(""Nothing special...but fast"");
        rdAverage.setEnabled(false);
        rdAverage.setName(""rdAverage"");
        rdAverage.setNextFocusableComponent(rdNTSC);
        pnlGUI.add(rdAverage);
        rdAverage.setBounds(280, 70, 75, 23);
        btnStart.setText(""Start"");
        btnStart.setToolTipText(""Start Capturing Video from your Digital Camcorder"");
        btnStart.setEnabled(false);
        btnStart.setName(""btnStart"");
        btnStart.setNextFocusableComponent(btnExit);
        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnStartKeyTyped(evt);
            }
        });
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        pnlGUI.add(btnStart);
        btnStart.setBounds(250, 400, 70, 25);
        btnExit.setText(""Exit"");
        btnExit.setToolTipText(""Exit dvd-homevideo"");
        btnExit.setName(""btnExit"");
        btnExit.setNextFocusableComponent(btnPlay);
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnExitKeyTyped(evt);
            }
        });
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        pnlGUI.add(btnExit);
        btnExit.setBounds(330, 400, 70, 25);
        chkMenu.setText(""Custom DVD Menu"");
        chkMenu.setToolTipText(""Enables Custom Picture and Audio for DVD Background"");
        chkMenu.setName(""chkMenu"");
        chkMenu.setNextFocusableComponent(txtPicture);
        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkMenuKeyTyped(evt);
            }
        });
        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkMenuMouseClicked(evt);
            }
        });
        pnlGUI.add(chkMenu);
        chkMenu.setBounds(10, 170, 144, 23);
        lblPicture.setText(""Path to DVD Menu Picture"");
        lblPicture.setEnabled(false);
        lblPicture.setName(""lblPicture"");
        pnlGUI.add(lblPicture);
        lblPicture.setBounds(10, 200, 160, 15);
        txtPicture.setEnabled(false);
        txtPicture.setName(""txtPicture"");
        txtPicture.setNextFocusableComponent(btnOpen_Picture);
        pnlGUI.add(txtPicture);
        txtPicture.setBounds(10, 220, 170, 19);
        lblAudio.setText(""Path to DVD Menu Audio"");
        lblAudio.setEnabled(false);
        lblAudio.setName(""lblAudio"");
        pnlGUI.add(lblAudio);
        lblAudio.setBounds(10, 250, 155, 15);
        txtAudio.setEnabled(false);
        txtAudio.setName(""txtAudio"");
        txtAudio.setNextFocusableComponent(btnOpen_Audio);
        pnlGUI.add(txtAudio);
        txtAudio.setBounds(10, 270, 170, 19);
        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Picture.setEnabled(false);
        btnOpen_Picture.setName(""btnOpen_Picture"");
        btnOpen_Picture.setNextFocusableComponent(txtAudio);
        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_PictureKeyTyped(evt);
            }
        });
        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_PictureMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Picture);
        btnOpen_Picture.setBounds(190, 220, 30, 25);
        prgCapture.setEnabled(false);
        prgCapture.setName(""prgCapture"");
        pnlGUI.add(prgCapture);
        prgCapture.setBounds(10, 360, 148, 14);
        prgConvert.setEnabled(false);
        prgConvert.setName(""prgConvert"");
        pnlGUI.add(prgConvert);
        prgConvert.setBounds(180, 360, 148, 14);
        prgAuthor.setEnabled(false);
        prgAuthor.setName(""prgAuthor"");
        pnlGUI.add(prgAuthor);
        prgAuthor.setBounds(350, 360, 148, 14);
        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Audio.setEnabled(false);
        btnOpen_Audio.setName(""btnOpen_Audio"");
        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);
        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_AudioKeyTyped(evt);
            }
        });
        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_AudioMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Audio);
        btnOpen_Audio.setBounds(190, 270, 30, 25);
        lblTextFile.setText(""Path to Text File (optional)"");
        lblTextFile.setToolTipText(""This text file specifies the chapter titles for the DVD"");
        lblTextFile.setName(""lblTextFile"");
        pnlGUI.add(lblTextFile);
        lblTextFile.setBounds(260, 270, 165, 15);
        txtTextFile.setName(""txtTextFile"");
        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);
        pnlGUI.add(txtTextFile);
        txtTextFile.setBounds(260, 290, 200, 19);
        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_TextFile.setName(""btnOpen_TextFile"");
        btnOpen_TextFile.setNextFocusableComponent(btnStart);
        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_TextFileKeyTyped(evt);
            }
        });
        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_TextFileMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_TextFile);
        btnOpen_TextFile.setBounds(470, 290, 30, 25);
        txtOutputDir.setName(""txtOutputDir"");
        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);
        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOutputDirFocusLost(evt);
            }
        });
        pnlGUI.add(txtOutputDir);
        txtOutputDir.setBounds(260, 190, 200, 19);
        lblOutputDir.setText(""Path to the Output Directory"");
        lblOutputDir.setName(""lblOutputDir"");
        pnlGUI.add(lblOutputDir);
        lblOutputDir.setBounds(260, 170, 177, 15);
        txtTitle.setName(""txtTitle"");
        txtTitle.setNextFocusableComponent(txtTextFile);
        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTitleFocusLost(evt);
            }
        });
        pnlGUI.add(txtTitle);
        txtTitle.setBounds(260, 240, 200, 19);
        lblTitle.setText(""Enter a Title for the DVD"");
        lblTitle.setName(""lblTitle"");
        pnlGUI.add(lblTitle);
        lblTitle.setBounds(260, 220, 153, 15);
        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_OutputDir.setName(""btnOpen_OutputDir"");
        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);
        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_OutputDirKeyTyped(evt);
            }
        });
        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_OutputDirMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_OutputDir);
        btnOpen_OutputDir.setBounds(470, 190, 30, 25);
        chkBurn.setText(""Burn to DVD"");
        chkBurn.setName(""chkBurn"");
        chkBurn.setNextFocusableComponent(chkMenu);
        pnlGUI.add(chkBurn);
        chkBurn.setBounds(340, 120, 103, 23);
        lblCaptureProg.setText(""0%"");
        lblCaptureProg.setEnabled(false);
        lblCaptureProg.setName(""lblCaptureProg"");
        pnlGUI.add(lblCaptureProg);
        lblCaptureProg.setBounds(20, 380, 40, 15);
        lblConvertProg.setText(""0%"");
        lblConvertProg.setEnabled(false);
        lblConvertProg.setName(""lblConvertProg"");
        pnlGUI.add(lblConvertProg);
        lblConvertProg.setBounds(190, 380, 40, 15);
        lblAuthorProg.setText(""0%"");
        lblAuthorProg.setEnabled(false);
        lblAuthorProg.setName(""lblAuthorProg"");
        pnlGUI.add(lblAuthorProg);
        lblAuthorProg.setBounds(360, 380, 40, 15);
        lblCapture.setText(""Capture Progress"");
        lblCapture.setEnabled(false);
        lblCapture.setName(""lblCapture"");
        pnlGUI.add(lblCapture);
        lblCapture.setBounds(10, 340, 107, 15);
        lblConvert.setText(""Conversion Progress"");
        lblConvert.setEnabled(false);
        lblConvert.setName(""lblConvert"");
        pnlGUI.add(lblConvert);
        lblConvert.setBounds(180, 340, 129, 15);
        lblAuthor.setText(""Authoring DVD"");
        lblAuthor.setEnabled(false);
        lblAuthor.setName(""lblAuthor"");
        pnlGUI.add(lblAuthor);
        lblAuthor.setBounds(350, 340, 95, 15);
        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));
        sprCapConvert.setName(""sprCapConvert"");
        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprCapConvert);
        sprCapConvert.setBounds(10, 160, 490, 5);
        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));
        sprMenuAuthor.setName(""sprMenuAuthor"");
        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprMenuAuthor);
        sprMenuAuthor.setBounds(10, 330, 490, 5);
        spTextArea.setAutoscrolls(true);
        spTextArea.setName(""spTextArea"");
        txtAreaOutput.setEditable(false);
        txtAreaOutput.setLineWrap(true);
        txtAreaOutput.setToolTipText(""Output during program execution"");
        txtAreaOutput.setWrapStyleWord(true);
        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtAreaOutput.setName(""txtAreaOutput"");
        spTextArea.setViewportView(txtAreaOutput);
        pnlGUI.add(spTextArea);
        spTextArea.setBounds(20, 470, 470, 140);
        grpFormat.add(rdNTSC);
        rdNTSC.setSelected(true);
        rdNTSC.setText(""NTSC"");
        rdNTSC.setName(""rdNTSC"");
        rdNTSC.setNextFocusableComponent(rdPAL);
        pnlGUI.add(rdNTSC);
        rdNTSC.setBounds(20, 130, 58, 23);
        grpFormat.add(rdPAL);
        rdPAL.setText(""PAL"");
        rdPAL.setName(""rdPAL"");
        rdPAL.setNextFocusableComponent(rd4_3);
        pnlGUI.add(rdPAL);
        rdPAL.setBounds(90, 130, 60, 23);
        grpAspectRatio.add(rd4_3);
        rd4_3.setSelected(true);
        rd4_3.setText(""4:3"");
        rd4_3.setName(""rd4_3"");
        rd4_3.setNextFocusableComponent(rd16_9);
        pnlGUI.add(rd4_3);
        rd4_3.setBounds(190, 130, 50, 23);
        grpAspectRatio.add(rd16_9);
        rd16_9.setText(""16:9"");
        rd16_9.setName(""rd16_9"");
        rd16_9.setNextFocusableComponent(chkBurn);
        pnlGUI.add(rd16_9);
        rd16_9.setBounds(240, 130, 60, 23);
        lblFormat.setText(""Video Format"");
        lblFormat.setName(""lblFormat"");
        pnlGUI.add(lblFormat);
        lblFormat.setBounds(20, 110, 110, 15);
        lblAspectRatio.setText(""Aspect Ratio"");
        lblAspectRatio.setName(""lblAspectRatio"");
        pnlGUI.add(lblAspectRatio);
        lblAspectRatio.setBounds(190, 110, 100, 15);
        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));
        sprAspectRatio.setName(""sprAspectRatio"");
        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprAspectRatio);
        sprAspectRatio.setBounds(10, 100, 490, 5);
        btnPlay.setText(""Play"");
        btnPlay.setEnabled(false);
        btnPlay.setNextFocusableComponent(spnMinutes);
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        pnlGUI.add(btnPlay);
        btnPlay.setBounds(410, 400, 70, 25);
        txtStatus.setBackground(new java.awt.Color(153, 153, 153));
        txtStatus.setEditable(false);
        txtStatus.setFont(new java.awt.Font(""Dialog"", 1, 12));
        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStatus.setText(""Status"");
        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));
        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));
        pnlGUI.add(txtStatus);
        txtStatus.setBounds(410, 430, 70, 30);
        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());
        menuBarMain.setName(""menuBarMain"");
        menuFile.setMnemonic('f');
        menuFile.setText(""File"");
        menuFile.setName(""menuFile"");
        menuOpen.setMnemonic('o');
        menuOpen.setText(""Open"");
        menuOpen.setName(""menuOpen"");
        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuOpenMousePressed(evt);
            }
        });
        menuFile.add(menuOpen);
        sprOpen.setName(""sprOpen"");
        menuFile.add(sprOpen);
        menuSave.setMnemonic('s');
        menuSave.setText(""Save"");
        menuSave.setName(""menuSave"");
        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSaveMousePressed(evt);
            }
        });
        menuFile.add(menuSave);
        sprSave.setName(""sprSave"");
        menuFile.add(sprSave);
        menuExit.setMnemonic('x');
        menuExit.setText(""Exit"");
        menuExit.setBorderPainted(false);
        menuExit.setFocusable(true);
        menuExit.setName(""menuExit"");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuExitMousePressed(evt);
            }
        });
        menuFile.add(menuExit);
        menuBarMain.add(menuFile);
        menuTools.setMnemonic('t');
        menuTools.setText(""Tools"");
        menuTools.setName(""menuTools"");
        grpMenuIgnore.add(menuRd_IgnoreNone);
        menuRd_IgnoreNone.setText(""Reset"");
        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreNoneStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreNone);
        grpMenuIgnore.add(menuRd_IgnoreCap);
        menuRd_IgnoreCap.setText(""Skip Capture"");
        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCap);
        grpMenuIgnore.add(menuRd_IgnoreCapConv);
        menuRd_IgnoreCapConv.setText(""Skip Capture/Transcode"");
        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConv);
        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);
        menuRd_IgnoreCapConvMenu.setText(""Skip Capture/Transcode/Menu"");
        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvMenuStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConvMenu);
        menuTools.add(sprIgnore);
        menuProjProp.setText(""Project Properties (Default)"");
        grpMenuFormat.add(menuRdNTSC);
        menuRdNTSC.setSelected(true);
        menuRdNTSC.setText(""NTSC"");
        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdNTSCItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdNTSC);
        grpMenuFormat.add(menuRdPAL);
        menuRdPAL.setText(""PAL"");
        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdPALItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdPAL);
        menuProjProp.add(sprMenuFormatAspect);
        grpMenuAspectRatio.add(menuRd_4_3);
        menuRd_4_3.setSelected(true);
        menuRd_4_3.setText(""4:3"");
        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_4_3ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_4_3);
        grpMenuAspectRatio.add(menuRd_16_9);
        menuRd_16_9.setText(""16:9"");
        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_16_9ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_16_9);
        menuProjProp.add(sprMenuThread);
        menuChkThread.setText(""Enable Multi-Threading"");
        menuChkThread.setToolTipText(""EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%"");
        menuChkThread.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuChkThreadItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuChkThread);
        menuTools.add(menuProjProp);
        menuBarMain.add(menuTools);
        menuHelp.setMnemonic('h');
        menuHelp.setText(""Help"");
        menuHelp.setName(""menuHelp"");
        menuInternet.setText(""dvd-homevideo website"");
        menuInternet.setName(""menuInternet"");
        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuInternetMousePressed(evt);
            }
        });
        menuHelp.add(menuInternet);
        menuREADME.setText(""README File"");
        menuREADME.setName(""menuREADME"");
        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuREADMEMousePressed(evt);
            }
        });
        menuHelp.add(menuREADME);
        menuBug.setText(""Submit Bug"");
        menuBug.setName(""menuBug"");
        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBugMousePressed(evt);
            }
        });
        menuHelp.add(menuBug);
        menuAbout.setText(""About dvd-homevideo"");
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuAboutMousePressed(evt);
            }
        });
        menuHelp.add(menuAbout);
        menuBarMain.add(menuHelp);
        setJMenuBar(menuBarMain);
        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged
        if (menuRd_IgnoreNone.isSelected()) {
            lblMinutes.setEnabled(true);
            spnMinutes.setEnabled(true);
            lblSeconds.setEnabled(true);
            spnSeconds.setEnabled(true);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(false);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged
        if (menuRd_IgnoreCap.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapStateChanged
    private //GEN-FIRST:event_txtOutputDirFocusLost
    void //GEN-FIRST:event_txtOutputDirFocusLost
    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtOutputDirFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtOutputDirFocusLost
    private //GEN-FIRST:event_txtTitleFocusLost
    void //GEN-FIRST:event_txtTitleFocusLost
    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtTitleFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtTitleFocusLost
    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    java.awt.event.KeyEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirKeyTyped
    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    java.awt.event.MouseEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirMouseClicked
    private //GEN-FIRST:event_spnSecondsStateChanged
    void //GEN-FIRST:event_spnSecondsStateChanged
    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnSecondsStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnSecondsStateChanged
    private //GEN-FIRST:event_spnMinutesStateChanged
    void //GEN-FIRST:event_spnMinutesStateChanged
    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnMinutesStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnMinutesStateChanged
    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnStartKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER) {
            try {
                /* 
                 * Automatically save the configuration in the users ~/.dvd-homevideo
                 * directory.  This way if they forget to click on the Save button in
                 * the File menu, it will still be saved once they start capturing 
                 * from their camcorder. 
                 */
                WriteSession();
            } catch (IOException e) {
            }
            blnBegin = true;
            btnPlay.setEnabled(false);
        }
    }

    //GEN-LAST:event_btnStartKeyTyped
    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnExitKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER)
            ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitKeyTyped
    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuChkThreadItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuChkThreadItemStateChanged
    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuAboutMousePressed
        MessageBox(""dvd-homevideo, version 0.4\n"" + ""Created by: Shane Santner"", 1);
    }

    //GEN-LAST:event_menuAboutMousePressed
    /**
     * This is the code that handles the user clicking the Exit button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnExitMouseClicked
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitMouseClicked
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_16_9ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_16_9ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_4_3ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_4_3ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdPALItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdPALItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdNTSCItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdNTSCItemStateChanged
    /**
     * This is the code that handles the user clicking the Play button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnPlayMouseClicked
        /*
         * Try to play the DVD in kaffeine first, if that fails then
         * try xine next.  TODO Need to also add code for mplayer as well.
         */
        try {
            String[] cmd = { ""kaffeine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""xine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have xine or kaffeine installed.\n"", 1);
            }
        }
    }

    //GEN-LAST:event_btnPlayMouseClicked
    /**
     * This is the code that handles the user clicking on the SubmitBug button
     * in the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuBugMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\n"" + ""in the address bar to submit a bug for dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuBugMousePressed
    /**
     * If you don't need to recapture video from the camcorder because of
     * an error later in the program, then you can check this box in the Tools
     * menu and this will allow you to not have to recapture.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you don't need to recapture video or retranscode the video to DVD format
     * because of an error later in the program, then you can check this box in
     * the Tools menu and this will allow you to not have to recapture or retranscode.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you only need to rerun dvd-author then you can check this box in
     * the Tools menu.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * This is the code that handles the user clicking the Open button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuOpenMousePressed
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter("".xml""));
        fcMenuOpen.setCurrentDirectory(home);
        int returnVal = fcMenuOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            ReadSession(fcMenuOpen.getSelectedFile().getPath());
        enableStartButton();
    }

    //GEN-LAST:event_menuOpenMousePressed
    /**
     * This is the code that handles the user clicking the Save button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuSaveMousePressed
        /* 
         * The default action is to call WriteSession to store all of the 
         * GUI widget information for later retrieval.
         */
        try {
            WriteSession();
        } catch (IOException e) {
        }
    }

    //GEN-LAST:event_menuSaveMousePressed
    /**
     * This is the code that handles the user clicking the dvd-homevideo website
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuInternetMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuInternetMousePressed
    /**
     * This is the code that handles the user clicking the README file
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuREADMEMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/README.html\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuREADMEMousePressed
    /**
     * This is the code that handles the user clicking the Exit button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuExitMousePressed
        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_menuExitMousePressed
    /**
     * This is the code that handles the user clicking the Start button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnStartMouseClicked
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This way if they forget to click on the Save button in
             * the File menu, it will still be saved once they start capturing 
             * from their camcorder. 
             */
            WriteSession();
        } catch (IOException e) {
        }
        blnBegin = true;
        btnPlay.setEnabled(false);
    }

    //GEN-LAST:event_btnStartMouseClicked
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for a title file to use for dvd-menu.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to store
     * everything in.
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate an
     * audio file.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioKeyTyped
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureKeyTyped
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkMenuKeyTyped
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        } else {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkMenuKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the quality group of radio buttons
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkQualityKeyTyped
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        } else {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkQualityKeyTyped
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureMouseClicked
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate an
     * audio file in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioMouseClicked
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to store
     * all of their files in
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for a title file to be used for
     * the background menu of the DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to select the quality of video conversion for
     * their DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkQualityMouseClicked
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        } else {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkQualityMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to specify details for the DVD menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkMenuMouseClicked
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        } else {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkMenuMouseClicked
    public void enableStartButton() {
        int tempMinutes, tempSeconds, tempTotal;
        String tempStrTitle, tempStrOutputDir;
        /* First, load the values from the form into local variables */
        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();
        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();
        tempTotal = tempSeconds + tempMinutes;
        tempStrTitle = txtTitle.getText();
        tempStrOutputDir = txtOutputDir.getText();
        /*
         * Now do the error checking.  Here we look for a capture time
         * that is greater than zero and less than 65 minutes 
         */
        if (tempTotal >= 1 && !tempStrOutputDir.equals("""") && !tempStrTitle.equals("""")) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else if (!tempStrOutputDir.equals("""") && !tempStrTitle.equals("""") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else
            btnStart.setEnabled(false);
    }

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules() {
        try {
            String line;
            String modules = ""cat /proc/modules | grep raw1394"";
            String[] module_cmd = { ""/bin/sh"", ""-c"", modules };
            Process p = Runtime.getRuntime().exec(module_cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            line = in.readLine();
            p.waitFor();
            if (line == null)
                return false;
            else
                return true;
        } catch (Exception ioe) {
            /* If we have made it here then the module is not loaded */
            return false;
        }
    }

    /**
     * On startup, checks to ensure that all dependent programs are installed
     * @param   Prog[]  List of dependent programs needed for dvd-homevideo
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean checkForProg(String[] Prog) {
        /* Declare local variables */
        int i = 0;
        int j = 0;
        String build_list = """";
        String[] uninstalled = new String[Prog.length];
        while (true) {
            try {
                /* 
                 * Walk through the list of programs needed for dvd-homevideo
                 * to operate correctly.
                 */
                while (i < Prog.length) {
                    /* 
                     * This is how I test for a program.  I simple try to 
                     * execute the application, if it fails then the software
                     * jumps to the catch block and I know that the program
                     * is either not installed or not in the users path.
                     */
                    Process p = Runtime.getRuntime().exec(Prog[i]);
                    /* 
                     * If I make it here then the program exists and I need to
                     * kill it.
                     */
                    p.destroy();
                    i++;
                }
                /* Check for any uninstalled programs */
                for (i = 0; i < uninstalled.length; i++) {
                    /* If not null then add to the list */
                    if (uninstalled[i] != null)
                        build_list += uninstalled[i] + ""\n"";
                }
                /* 
                 * If the first element is null, then all programs are 
                 * installed correctly.
                 */
                if (uninstalled[0] == null)
                    return true;
                else
                    /* Otherwise tell the user what they are missing */
                    MessageBox(""The following programs are not installed or not in "" + ""your path!\n"" + build_list, 0);
                return false;
            } catch (IOException ioe) {
                /* Add the missing program to the uninstalled array */
                uninstalled[j] = Prog[i];
                i++;
                j++;
            }
        }
    }

    /**
     * Displays a message box with the supplied text and yes/no options
     * @param   message    The message to display in the box
     */
    public int MessageBox(String message) {
        return JOptionPane.showConfirmDialog(null, message, ""dvd-homevideo"", JOptionPane.YES_NO_OPTION);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     */
    public void MessageBox(String message, int type) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     * @param   picture    Picture to display in the MessageBox
     */
    public void MessageBox(String message, int type, String picture) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type, new javax.swing.ImageIcon(getClass().getResource(picture)));
    }

    /**
     * Check dvd-homevideo for runtime errors
     * @param   fileName    This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return   A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName) {
        String line;
        StringTokenizer st;
        String testToken;
        boolean error = false;
        /*
         * Need to parse through the supplies file and look for any
         * instances of the words 'error' or 'broken'.  If found, this
         * is treated as a run-time error of one of the dependent programs
         * that dvd-homevideo relies on.
         */
        try {
            BufferedReader in = new BufferedReader(new FileReader(fileName));
            while ((line = in.readLine()) != null) {
                /* Check for a specific burn error */
                if (line.equals("":-( /dev/dvd: media is not recognized as recordable DVD: 9"")) {
                    MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                    return true;
                }
                /*
                 * Need to catch all instances of 'error' or 'broken'.  This
                 * includes cases such as:
                 * **Error:
                 * error~
                 * Broken pipe
                 * etc, etc, etc.  We need to catch ALL instances.
                 */
                st = new StringTokenizer(line, ""*,;:'-~\t "");
                while (st.hasMoreTokens()) {
                    testToken = st.nextToken();
                    if (// ||
                    testToken.equalsIgnoreCase(""Error"")) //testToken.equalsIgnoreCase(""Broken""))
                    {
                        MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                        error = true;
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""Can not find "" + fileName + ""\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        return error;
    }

    /**
     * Update the Status textbox
     * @param   typeColor   red, green, or grey
     * @param   typeUpdate  Values should be PASS, FAIL, Status
     */
    public void UpdateStatus(Color typeColor, String typeUpdate) {
        /* 
         * Set the background and text to let the user know that
         * dvd-homevideo failed
         */
        txtStatus.setBackground(typeColor);
        txtStatus.setText(typeUpdate);
        if (typeUpdate.equals(""FAIL""))
            txtStatus.setToolTipText(""Look at dvd-homevideo.err and files"" + "" in the log directory for possible"" + "" reasons why dvd-homevideo failed."");
        /* 
         * If we need to wait for user input because dvd-homevideo
         * has completed...either because of passing or failing then
         * set blnBegin to false.
         */
        if (!typeUpdate.equals(""Status""))
            blnBegin = false;
    }

    /**
     * This method should be called every time the application exits normally.  This allows the
     * current session to be saved before quiting dvd-homevideo.
     */
    public void ExitDVDHomevideo() {
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This should be the only place in the project where System.exit(0) is called. 
             */
            WriteSession();
            WriteProjProperties();
            System.exit(0);
        } catch (IOException e) {
        }
    }

    /**
     * This method retrieves user specific information from the
     * properties xml file in the users ~/.dvd-homevideo directory
     */
    public void ReadProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        String line, token;
        StringTokenizer st;
        try {
            /* 
             * Read the xml properties file and set widgets on the 
             * form accordingly
             */
            BufferedReader reader = new BufferedReader(new FileReader(home));
            while ((line = reader.readLine()) != null) {
                st = new StringTokenizer(line, ""<>"");
                while (st.hasMoreTokens()) {
                    token = st.nextToken();
                    if (token.equals(""menuRdNTSC"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));
                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));
                        rdNTSC.setSelected(menuRdNTSC.isSelected());
                        rdPAL.setSelected(menuRdPAL.isSelected());
                    } else if (token.equals(""menuRd_4_3"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));
                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));
                        rd4_3.setSelected(menuRd_4_3.isSelected());
                        rd16_9.setSelected(menuRd_16_9.isSelected());
                    } else if (token.equals(""menuChkThread"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuChkThread.setSelected(Boolean.parseBoolean(token));
                    }
                }
            }
            reader.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in ReadProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * This method stores user specific information in a properties xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        try {
            /* Write/rewrite the xml properties file */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home));
            writer.write(""<dvd-homevideo properties>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRdNTSC.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t<menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRd_4_3.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t</JRadioButonMenuItem>"");
            writer.newLine();
            writer.write(""\t<JCheckBoxMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuChkThread>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuChkThread.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuChkThread>"");
            writer.newLine();
            writer.write(""\t</JCheckBoxMenuItem>"");
            writer.newLine();
            writer.close();
            /* Update the states on the form */
            rdNTSC.setSelected(menuRdNTSC.isSelected());
            rdPAL.setSelected(menuRdPAL.isSelected());
            rd4_3.setSelected(menuRd_4_3.isSelected());
            rd16_9.setSelected(menuRd_16_9.isSelected());
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in WriteProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Opens a previous dvd-homevideo session by reading an xml file
     * @param   xmlPath    Path to the xml file
     */
    public void ReadSession(String xmlPath) {
        String line, token;
        StringTokenizer st;
        boolean done = false;
        int i;
        /* 
         * Define an exhaustive list of the widgets that we need to track
         * on the form.
         */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            BufferedReader in = new BufferedReader(new FileReader(xmlPath));
            line = in.readLine();
            st = new StringTokenizer(line, ""<>"");
            token = st.nextToken();
            /* 
             * If the first line does not contain dvd-homevideo then
             * we have a bad xml file.
             */
            if (!token.equals(""dvd-homevideo"")) {
                MessageBox(""Invalid File Format!"", 1);
                done = true;
            }
            while (((line = in.readLine()) != null) && !done) {
                st = new StringTokenizer(line, ""<>"");
                if (!st.nextToken().equals(""/dvd-homevideo""))
                    token = st.nextToken();
                /* Read in the variables and set them on the form */
                if (token.equals(""JLabel"")) {
                    for (i = 0; i < lbl_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JSpinner"")) {
                    for (i = 0; i < spn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        // SDK 1.4 didn't like this
                        spn_widgets[i].setValue(Integer.parseInt(token));
                        //spn_widgets[i].getModel().setValue((Object)token);
                        in.readLine();
                    }
                } else if (token.equals(""JCheckBox"")) {
                    for (i = 0; i < chk_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButton"")) {
                    for (i = 0; i < rd_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JTextField"")) {
                    for (i = 0; i < txt_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        if (!token.substring(1, 4).equals(""tex""))
                            txt_widgets[i].setText(token);
                        in.readLine();
                    }
                } else if (token.equals(""JButton"")) {
                    for (i = 0; i < btn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButtonMenuItem"")) {
                    for (i = 0; i < chkMenu_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else {
                    lblCapture.setEnabled(false);
                    lblConvert.setEnabled(false);
                    lblAuthor.setEnabled(false);
                    lblCaptureProg.setEnabled(false);
                    lblConvertProg.setEnabled(false);
                    lblAuthorProg.setEnabled(false);
                    prgCapture.setEnabled(false);
                    prgConvert.setEnabled(false);
                    prgAuthor.setEnabled(false);
                    lblCaptureProg.setText(""0%"");
                    lblConvertProg.setText(""0%"");
                    lblAuthorProg.setText(""0%"");
                }
            }
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while reading the xml file"" + ""\nfor the requested dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Saves the state of all widgets on the GUI form in an xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteSession() throws IOException {
        int i;
        /* Again, we must have this exhaustive list of widgets to parse through */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            /* Write the file to the users ~/.dvd-homevideo directory */
            String home = System.getProperty(""user.home"");
            File msgboxSave = new File(home + ""/.dvd-homevideo/properties"");
            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/properties""));
            msgboxSaveWriter.close();
            /* Now write the xml file to the users home/dvd-homevideo directory */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/"" + txtTitle.getText() + "".xml""));
            writer.write(""<dvd-homevideo>"");
            writer.newLine();
            writer.write(""\t<JLabel>"");
            writer.newLine();
            for (i = 0; i < lbl_widgets.length; i++) {
                writer.write(""\t\t<"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + lbl_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JLabel>"");
            writer.newLine();
            writer.write(""\t<JSpinner>"");
            writer.newLine();
            for (i = 0; i < spn_widgets.length; i++) {
                writer.write(""\t\t<"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + spn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<value>"" + spn_widgets[i].getValue() + ""</value>"");
                writer.newLine();
                writer.write(""\t\t</"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JSpinner>"");
            writer.newLine();
            writer.write(""\t<JCheckBox>"");
            writer.newLine();
            for (i = 0; i < chk_widgets.length; i++) {
                writer.write(""\t\t<"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chk_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chk_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JCheckBox>"");
            writer.newLine();
            writer.write(""\t<JRadioButton>"");
            writer.newLine();
            for (i = 0; i < rd_widgets.length; i++) {
                writer.write(""\t\t<"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + rd_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + rd_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButton>"");
            writer.newLine();
            writer.write(""\t<JTextField>"");
            writer.newLine();
            for (i = 0; i < txt_widgets.length; i++) {
                writer.write(""\t\t<"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + txt_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<text>"" + txt_widgets[i].getText() + ""</text>"");
                writer.newLine();
                writer.write(""\t\t</"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JTextField>"");
            writer.newLine();
            writer.write(""\t<JButton>"");
            writer.newLine();
            for (i = 0; i < btn_widgets.length; i++) {
                writer.write(""\t\t<"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + btn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JButton>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            for (i = 0; i < chkMenu_widgets.length; i++) {
                writer.write(""\t\t<"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chkMenu_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chkMenu_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""</dvd-homevideo>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while writing the xml file"" + ""\nfor this dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /*
    public void setIcon()
    {
        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));
        setIconImage(new javax.swing.ImageIcon(image.getImage()));
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;

    private javax.swing.JButton btnOpen_Audio;

    private javax.swing.JButton btnOpen_OutputDir;

    private javax.swing.JButton btnOpen_Picture;

    private javax.swing.JButton btnOpen_TextFile;

    protected javax.swing.JButton btnPlay;

    private javax.swing.JButton btnStart;

    protected javax.swing.JCheckBox chkBurn;

    protected javax.swing.JCheckBox chkMenu;

    protected javax.swing.JCheckBox chkQuality;

    private javax.swing.JFileChooser fcMenuOpen;

    private javax.swing.JFileChooser fcOpen;

    private javax.swing.ButtonGroup grpAspectRatio;

    private javax.swing.ButtonGroup grpFormat;

    private javax.swing.ButtonGroup grpMenuAspectRatio;

    private javax.swing.ButtonGroup grpMenuFormat;

    private javax.swing.ButtonGroup grpMenuIgnore;

    private javax.swing.ButtonGroup grpMenuMode;

    private javax.swing.ButtonGroup grpQuality;

    private javax.swing.JLabel lblAspectRatio;

    private javax.swing.JLabel lblAudio;

    protected javax.swing.JLabel lblAuthor;

    protected javax.swing.JLabel lblAuthorProg;

    protected javax.swing.JLabel lblCapture;

    protected javax.swing.JLabel lblCaptureProg;

    protected javax.swing.JLabel lblConvert;

    protected javax.swing.JLabel lblConvertProg;

    private javax.swing.JLabel lblFormat;

    private javax.swing.JLabel lblMinutes;

    private javax.swing.JLabel lblOutputDir;

    private javax.swing.JLabel lblPicture;

    private javax.swing.JLabel lblSeconds;

    private javax.swing.JLabel lblTextFile;

    private javax.swing.JLabel lblTitle;

    private javax.swing.JMenuItem menuAbout;

    protected javax.swing.JMenuBar menuBarMain;

    private javax.swing.JMenuItem menuBug;

    protected javax.swing.JCheckBoxMenuItem menuChkThread;

    protected javax.swing.JMenuItem menuExit;

    protected javax.swing.JMenu menuFile;

    protected javax.swing.JMenu menuHelp;

    protected javax.swing.JMenuItem menuInternet;

    protected javax.swing.JMenuItem menuOpen;

    private javax.swing.JMenu menuProjProp;

    protected javax.swing.JMenuItem menuREADME;

    private javax.swing.JRadioButtonMenuItem menuRdNTSC;

    private javax.swing.JRadioButtonMenuItem menuRdPAL;

    private javax.swing.JRadioButtonMenuItem menuRd_16_9;

    private javax.swing.JRadioButtonMenuItem menuRd_4_3;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;

    protected javax.swing.JMenuItem menuSave;

    protected javax.swing.JMenu menuTools;

    private javax.swing.JPanel pnlGUI;

    protected javax.swing.JProgressBar prgAuthor;

    protected javax.swing.JProgressBar prgCapture;

    protected javax.swing.JProgressBar prgConvert;

    protected javax.swing.JRadioButton rd16_9;

    protected javax.swing.JRadioButton rd4_3;

    protected javax.swing.JRadioButton rdAverage;

    protected javax.swing.JRadioButton rdGood;

    protected javax.swing.JRadioButton rdNTSC;

    protected javax.swing.JRadioButton rdPAL;

    protected javax.swing.JRadioButton rdSuper;

    private javax.swing.JScrollPane spTextArea;

    protected javax.swing.JSpinner spnMinutes;

    protected javax.swing.JSpinner spnSeconds;

    private javax.swing.JSeparator sprAspectRatio;

    private javax.swing.JSeparator sprCapConvert;

    private javax.swing.JSeparator sprIgnore;

    private javax.swing.JSeparator sprMenuAuthor;

    private javax.swing.JSeparator sprMenuFormatAspect;

    private javax.swing.JSeparator sprMenuThread;

    protected javax.swing.JSeparator sprOpen;

    protected javax.swing.JSeparator sprSave;

    protected javax.swing.JTextArea txtAreaOutput;

    protected javax.swing.JTextField txtAudio;

    protected javax.swing.JTextField txtOutputDir;

    protected javax.swing.JTextField txtPicture;

    protected javax.swing.JTextField txtStatus;

    protected javax.swing.JTextField txtTextFile;

    protected javax.swing.JTextField txtTitle;

    // End of variables declaration//GEN-END:variables
    /* My GUI variable declarations */
    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);

    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);
}
","// GUI_1Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForProg(String[])} method.
*/
class GUI_1Test {","// GUI_1Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForProg(String[])} method.
*/
class GUI_1Test {
"
5224d078-b55c-4737-8cf8-ce2e4b4d6db7,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/GUI_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 29976 tokens (27976 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author  Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /* 
     * Creates a new form, probably the most compilcated - or
     * messiest constructor I have ever developed.
     */
    public GUI() {
        /*
         * initComponents is a netbeans generated method that does
         * all of the GUI stuff for dvd-homevideo.
         */
        initComponents();
        /* 
         * Sets the maximum allowable values for the minutes
         * and seconds Spinners.
         */
        spnSeconds.setModel(spnSecondsSize);
        spnMinutes.setModel(spnMinutesSize);
        /* First do a check for the required programs */
        if (!checkForProg(DependentPrograms))
            MessageBox(""You do not appear to have the necessary\n"" + ""programs installed for dvd-homevideo to operate\n"" + ""correctly.  Please check the README file for the\n"" + ""list of dependencies.  dvd-homevideo will not\n"" + ""function correctly until all dependencies are installed!"", 1);
        /* Now check for the required ieee1394 module */
        if (!checkForModules())
            MessageBox(""You do not have the correct modules loaded\n"" + ""for dvd-homevideo to function properly.  Please\n"" + ""check the README file for further instructions!"", 1);
        if (getJMenuBar() != null)
            (this.getJMenuBar()).setOpaque(false);
        /* 
         * Create Project directory.  This is where (~/.dvd-homevideo) the 
         * .xml files for each session get stored as well as user preferences.
         */
        File ProjectDir = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        if (!ProjectDir.exists()) {
            MessageBox(""All projects will be automatically saved to: "" + System.getProperty(""user.home"") + ""/.dvd-homevideo/"", 1);
            ProjectDir.mkdir();
        }
        File ProjProperties = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        if (!ProjProperties.exists()) {
            try {
                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));
                projProp.close();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(strOutputDir, ex);
                MessageBox(""IO Error writing to properties file...in GUI.java\n"" + ex.toString(), 0);
                ex.printStackTrace();
            }
        }
        /* If the user has specified individual customization, then read it */
        ReadProjProperties();
    }

    /* End of constructor */
    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));

    protected String strOutputDir;

    protected boolean blnBegin;

    /* My list of dependent programs for dvd-homevideo */
    protected String[] DependentPrograms = { ""dvgrab"", ""transcode"", ""mplex"", ""dvd-menu"", ""dvdauthor"", ""growisofs"", ""ffmpeg"", ""lame"", ""sox"" };

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate=""collapsed"" desc="" Generated Code "">//GEN-BEGIN:initComponents
    private void initComponents() {
        grpQuality = new javax.swing.ButtonGroup();
        fcOpen = new javax.swing.JFileChooser();
        grpFormat = new javax.swing.ButtonGroup();
        grpAspectRatio = new javax.swing.ButtonGroup();
        fcMenuOpen = new javax.swing.JFileChooser();
        grpMenuFormat = new javax.swing.ButtonGroup();
        grpMenuAspectRatio = new javax.swing.ButtonGroup();
        grpMenuMode = new javax.swing.ButtonGroup();
        grpMenuIgnore = new javax.swing.ButtonGroup();
        pnlGUI = new javax.swing.JPanel();
        lblMinutes = new javax.swing.JLabel();
        spnMinutes = new javax.swing.JSpinner();
        lblSeconds = new javax.swing.JLabel();
        spnSeconds = new javax.swing.JSpinner();
        chkQuality = new javax.swing.JCheckBox();
        rdSuper = new javax.swing.JRadioButton();
        rdGood = new javax.swing.JRadioButton();
        rdAverage = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        chkMenu = new javax.swing.JCheckBox();
        lblPicture = new javax.swing.JLabel();
        txtPicture = new javax.swing.JTextField();
        lblAudio = new javax.swing.JLabel();
        txtAudio = new javax.swing.JTextField();
        btnOpen_Picture = new javax.swing.JButton();
        prgCapture = new javax.swing.JProgressBar();
        prgConvert = new javax.swing.JProgressBar();
        prgAuthor = new javax.swing.JProgressBar();
        btnOpen_Audio = new javax.swing.JButton();
        lblTextFile = new javax.swing.JLabel();
        txtTextFile = new javax.swing.JTextField();
        btnOpen_TextFile = new javax.swing.JButton();
        txtOutputDir = new javax.swing.JTextField();
        lblOutputDir = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnOpen_OutputDir = new javax.swing.JButton();
        chkBurn = new javax.swing.JCheckBox();
        lblCaptureProg = new javax.swing.JLabel();
        lblConvertProg = new javax.swing.JLabel();
        lblAuthorProg = new javax.swing.JLabel();
        lblCapture = new javax.swing.JLabel();
        lblConvert = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        sprCapConvert = new javax.swing.JSeparator();
        sprMenuAuthor = new javax.swing.JSeparator();
        spTextArea = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        rdNTSC = new javax.swing.JRadioButton();
        rdPAL = new javax.swing.JRadioButton();
        rd4_3 = new javax.swing.JRadioButton();
        rd16_9 = new javax.swing.JRadioButton();
        lblFormat = new javax.swing.JLabel();
        lblAspectRatio = new javax.swing.JLabel();
        sprAspectRatio = new javax.swing.JSeparator();
        btnPlay = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        sprOpen = new javax.swing.JSeparator();
        menuSave = new javax.swing.JMenuItem();
        sprSave = new javax.swing.JSeparator();
        menuExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();
        sprIgnore = new javax.swing.JSeparator();
        menuProjProp = new javax.swing.JMenu();
        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();
        menuRdPAL = new javax.swing.JRadioButtonMenuItem();
        sprMenuFormatAspect = new javax.swing.JSeparator();
        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();
        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();
        sprMenuThread = new javax.swing.JSeparator();
        menuChkThread = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuInternet = new javax.swing.JMenuItem();
        menuREADME = new javax.swing.JMenuItem();
        menuBug = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();
        fcOpen.setName(""fcOpen"");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(""dvd-homevideo"");
        setIconImage(image.getImage());
        setName(""dvd-homevideo"");
        setResizable(false);
        pnlGUI.setLayout(null);
        pnlGUI.setToolTipText(""dvd-homevideo"");
        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setName(""pnlGUI"");
        pnlGUI.setOpaque(false);
        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));
        lblMinutes.setText(""Capture Time in Minutes"");
        lblMinutes.setName(""lblMinutes"");
        pnlGUI.add(lblMinutes);
        lblMinutes.setBounds(20, 10, 154, 15);
        spnMinutes.setToolTipText(""Minutes Portion of the Capture Time"");
        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));
        spnMinutes.setName(""spnMinutes"");
        spnMinutes.setNextFocusableComponent(spnSeconds);
        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));
        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinutesStateChanged(evt);
            }
        });
        pnlGUI.add(spnMinutes);
        spnMinutes.setBounds(140, 30, 35, 20);
        lblSeconds.setText(""Capture Time in Seconds"");
        lblSeconds.setName(""lblSeconds"");
        pnlGUI.add(lblSeconds);
        lblSeconds.setBounds(20, 50, 155, 15);
        spnSeconds.setToolTipText(""Seconds Portion of the Capture Time"");
        spnSeconds.setName(""spnSeconds"");
        spnSeconds.setNextFocusableComponent(chkQuality);
        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));
        spnSeconds.setRequestFocusEnabled(false);
        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnSecondsStateChanged(evt);
            }
        });
        pnlGUI.add(spnSeconds);
        spnSeconds.setBounds(140, 70, 35, 20);
        chkQuality.setText(""Quality for DVD compression"");
        chkQuality.setToolTipText(""Check this box to enable quality control"");
        chkQuality.setName(""chkQuality"");
        chkQuality.setNextFocusableComponent(rdSuper);
        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkQualityKeyTyped(evt);
            }
        });
        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkQualityMouseClicked(evt);
            }
        });
        pnlGUI.add(chkQuality);
        chkQuality.setBounds(260, 10, 208, 23);
        grpQuality.add(rdSuper);
        rdSuper.setSelected(true);
        rdSuper.setText(""Super"");
        rdSuper.setToolTipText(""Best Quality...recommended"");
        rdSuper.setEnabled(false);
        rdSuper.setName(""rdSuper"");
        rdSuper.setNextFocusableComponent(rdGood);
        pnlGUI.add(rdSuper);
        rdSuper.setBounds(280, 30, 60, 23);
        grpQuality.add(rdGood);
        rdGood.setText(""Good"");
        rdGood.setToolTipText(""Good Quality...a little faster"");
        rdGood.setEnabled(false);
        rdGood.setName(""rdGood"");
        rdGood.setNextFocusableComponent(rdAverage);
        pnlGUI.add(rdGood);
        rdGood.setBounds(280, 50, 58, 23);
        grpQuality.add(rdAverage);
        rdAverage.setText(""Average"");
        rdAverage.setToolTipText(""Nothing special...but fast"");
        rdAverage.setEnabled(false);
        rdAverage.setName(""rdAverage"");
        rdAverage.setNextFocusableComponent(rdNTSC);
        pnlGUI.add(rdAverage);
        rdAverage.setBounds(280, 70, 75, 23);
        btnStart.setText(""Start"");
        btnStart.setToolTipText(""Start Capturing Video from your Digital Camcorder"");
        btnStart.setEnabled(false);
        btnStart.setName(""btnStart"");
        btnStart.setNextFocusableComponent(btnExit);
        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnStartKeyTyped(evt);
            }
        });
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        pnlGUI.add(btnStart);
        btnStart.setBounds(250, 400, 70, 25);
        btnExit.setText(""Exit"");
        btnExit.setToolTipText(""Exit dvd-homevideo"");
        btnExit.setName(""btnExit"");
        btnExit.setNextFocusableComponent(btnPlay);
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnExitKeyTyped(evt);
            }
        });
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        pnlGUI.add(btnExit);
        btnExit.setBounds(330, 400, 70, 25);
        chkMenu.setText(""Custom DVD Menu"");
        chkMenu.setToolTipText(""Enables Custom Picture and Audio for DVD Background"");
        chkMenu.setName(""chkMenu"");
        chkMenu.setNextFocusableComponent(txtPicture);
        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkMenuKeyTyped(evt);
            }
        });
        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkMenuMouseClicked(evt);
            }
        });
        pnlGUI.add(chkMenu);
        chkMenu.setBounds(10, 170, 144, 23);
        lblPicture.setText(""Path to DVD Menu Picture"");
        lblPicture.setEnabled(false);
        lblPicture.setName(""lblPicture"");
        pnlGUI.add(lblPicture);
        lblPicture.setBounds(10, 200, 160, 15);
        txtPicture.setEnabled(false);
        txtPicture.setName(""txtPicture"");
        txtPicture.setNextFocusableComponent(btnOpen_Picture);
        pnlGUI.add(txtPicture);
        txtPicture.setBounds(10, 220, 170, 19);
        lblAudio.setText(""Path to DVD Menu Audio"");
        lblAudio.setEnabled(false);
        lblAudio.setName(""lblAudio"");
        pnlGUI.add(lblAudio);
        lblAudio.setBounds(10, 250, 155, 15);
        txtAudio.setEnabled(false);
        txtAudio.setName(""txtAudio"");
        txtAudio.setNextFocusableComponent(btnOpen_Audio);
        pnlGUI.add(txtAudio);
        txtAudio.setBounds(10, 270, 170, 19);
        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Picture.setEnabled(false);
        btnOpen_Picture.setName(""btnOpen_Picture"");
        btnOpen_Picture.setNextFocusableComponent(txtAudio);
        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_PictureKeyTyped(evt);
            }
        });
        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_PictureMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Picture);
        btnOpen_Picture.setBounds(190, 220, 30, 25);
        prgCapture.setEnabled(false);
        prgCapture.setName(""prgCapture"");
        pnlGUI.add(prgCapture);
        prgCapture.setBounds(10, 360, 148, 14);
        prgConvert.setEnabled(false);
        prgConvert.setName(""prgConvert"");
        pnlGUI.add(prgConvert);
        prgConvert.setBounds(180, 360, 148, 14);
        prgAuthor.setEnabled(false);
        prgAuthor.setName(""prgAuthor"");
        pnlGUI.add(prgAuthor);
        prgAuthor.setBounds(350, 360, 148, 14);
        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Audio.setEnabled(false);
        btnOpen_Audio.setName(""btnOpen_Audio"");
        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);
        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_AudioKeyTyped(evt);
            }
        });
        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_AudioMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Audio);
        btnOpen_Audio.setBounds(190, 270, 30, 25);
        lblTextFile.setText(""Path to Text File (optional)"");
        lblTextFile.setToolTipText(""This text file specifies the chapter titles for the DVD"");
        lblTextFile.setName(""lblTextFile"");
        pnlGUI.add(lblTextFile);
        lblTextFile.setBounds(260, 270, 165, 15);
        txtTextFile.setName(""txtTextFile"");
        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);
        pnlGUI.add(txtTextFile);
        txtTextFile.setBounds(260, 290, 200, 19);
        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_TextFile.setName(""btnOpen_TextFile"");
        btnOpen_TextFile.setNextFocusableComponent(btnStart);
        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_TextFileKeyTyped(evt);
            }
        });
        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_TextFileMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_TextFile);
        btnOpen_TextFile.setBounds(470, 290, 30, 25);
        txtOutputDir.setName(""txtOutputDir"");
        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);
        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOutputDirFocusLost(evt);
            }
        });
        pnlGUI.add(txtOutputDir);
        txtOutputDir.setBounds(260, 190, 200, 19);
        lblOutputDir.setText(""Path to the Output Directory"");
        lblOutputDir.setName(""lblOutputDir"");
        pnlGUI.add(lblOutputDir);
        lblOutputDir.setBounds(260, 170, 177, 15);
        txtTitle.setName(""txtTitle"");
        txtTitle.setNextFocusableComponent(txtTextFile);
        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTitleFocusLost(evt);
            }
        });
        pnlGUI.add(txtTitle);
        txtTitle.setBounds(260, 240, 200, 19);
        lblTitle.setText(""Enter a Title for the DVD"");
        lblTitle.setName(""lblTitle"");
        pnlGUI.add(lblTitle);
        lblTitle.setBounds(260, 220, 153, 15);
        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_OutputDir.setName(""btnOpen_OutputDir"");
        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);
        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_OutputDirKeyTyped(evt);
            }
        });
        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_OutputDirMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_OutputDir);
        btnOpen_OutputDir.setBounds(470, 190, 30, 25);
        chkBurn.setText(""Burn to DVD"");
        chkBurn.setName(""chkBurn"");
        chkBurn.setNextFocusableComponent(chkMenu);
        pnlGUI.add(chkBurn);
        chkBurn.setBounds(340, 120, 103, 23);
        lblCaptureProg.setText(""0%"");
        lblCaptureProg.setEnabled(false);
        lblCaptureProg.setName(""lblCaptureProg"");
        pnlGUI.add(lblCaptureProg);
        lblCaptureProg.setBounds(20, 380, 40, 15);
        lblConvertProg.setText(""0%"");
        lblConvertProg.setEnabled(false);
        lblConvertProg.setName(""lblConvertProg"");
        pnlGUI.add(lblConvertProg);
        lblConvertProg.setBounds(190, 380, 40, 15);
        lblAuthorProg.setText(""0%"");
        lblAuthorProg.setEnabled(false);
        lblAuthorProg.setName(""lblAuthorProg"");
        pnlGUI.add(lblAuthorProg);
        lblAuthorProg.setBounds(360, 380, 40, 15);
        lblCapture.setText(""Capture Progress"");
        lblCapture.setEnabled(false);
        lblCapture.setName(""lblCapture"");
        pnlGUI.add(lblCapture);
        lblCapture.setBounds(10, 340, 107, 15);
        lblConvert.setText(""Conversion Progress"");
        lblConvert.setEnabled(false);
        lblConvert.setName(""lblConvert"");
        pnlGUI.add(lblConvert);
        lblConvert.setBounds(180, 340, 129, 15);
        lblAuthor.setText(""Authoring DVD"");
        lblAuthor.setEnabled(false);
        lblAuthor.setName(""lblAuthor"");
        pnlGUI.add(lblAuthor);
        lblAuthor.setBounds(350, 340, 95, 15);
        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));
        sprCapConvert.setName(""sprCapConvert"");
        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprCapConvert);
        sprCapConvert.setBounds(10, 160, 490, 5);
        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));
        sprMenuAuthor.setName(""sprMenuAuthor"");
        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprMenuAuthor);
        sprMenuAuthor.setBounds(10, 330, 490, 5);
        spTextArea.setAutoscrolls(true);
        spTextArea.setName(""spTextArea"");
        txtAreaOutput.setEditable(false);
        txtAreaOutput.setLineWrap(true);
        txtAreaOutput.setToolTipText(""Output during program execution"");
        txtAreaOutput.setWrapStyleWord(true);
        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtAreaOutput.setName(""txtAreaOutput"");
        spTextArea.setViewportView(txtAreaOutput);
        pnlGUI.add(spTextArea);
        spTextArea.setBounds(20, 470, 470, 140);
        grpFormat.add(rdNTSC);
        rdNTSC.setSelected(true);
        rdNTSC.setText(""NTSC"");
        rdNTSC.setName(""rdNTSC"");
        rdNTSC.setNextFocusableComponent(rdPAL);
        pnlGUI.add(rdNTSC);
        rdNTSC.setBounds(20, 130, 58, 23);
        grpFormat.add(rdPAL);
        rdPAL.setText(""PAL"");
        rdPAL.setName(""rdPAL"");
        rdPAL.setNextFocusableComponent(rd4_3);
        pnlGUI.add(rdPAL);
        rdPAL.setBounds(90, 130, 60, 23);
        grpAspectRatio.add(rd4_3);
        rd4_3.setSelected(true);
        rd4_3.setText(""4:3"");
        rd4_3.setName(""rd4_3"");
        rd4_3.setNextFocusableComponent(rd16_9);
        pnlGUI.add(rd4_3);
        rd4_3.setBounds(190, 130, 50, 23);
        grpAspectRatio.add(rd16_9);
        rd16_9.setText(""16:9"");
        rd16_9.setName(""rd16_9"");
        rd16_9.setNextFocusableComponent(chkBurn);
        pnlGUI.add(rd16_9);
        rd16_9.setBounds(240, 130, 60, 23);
        lblFormat.setText(""Video Format"");
        lblFormat.setName(""lblFormat"");
        pnlGUI.add(lblFormat);
        lblFormat.setBounds(20, 110, 110, 15);
        lblAspectRatio.setText(""Aspect Ratio"");
        lblAspectRatio.setName(""lblAspectRatio"");
        pnlGUI.add(lblAspectRatio);
        lblAspectRatio.setBounds(190, 110, 100, 15);
        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));
        sprAspectRatio.setName(""sprAspectRatio"");
        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprAspectRatio);
        sprAspectRatio.setBounds(10, 100, 490, 5);
        btnPlay.setText(""Play"");
        btnPlay.setEnabled(false);
        btnPlay.setNextFocusableComponent(spnMinutes);
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        pnlGUI.add(btnPlay);
        btnPlay.setBounds(410, 400, 70, 25);
        txtStatus.setBackground(new java.awt.Color(153, 153, 153));
        txtStatus.setEditable(false);
        txtStatus.setFont(new java.awt.Font(""Dialog"", 1, 12));
        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStatus.setText(""Status"");
        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));
        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));
        pnlGUI.add(txtStatus);
        txtStatus.setBounds(410, 430, 70, 30);
        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());
        menuBarMain.setName(""menuBarMain"");
        menuFile.setMnemonic('f');
        menuFile.setText(""File"");
        menuFile.setName(""menuFile"");
        menuOpen.setMnemonic('o');
        menuOpen.setText(""Open"");
        menuOpen.setName(""menuOpen"");
        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuOpenMousePressed(evt);
            }
        });
        menuFile.add(menuOpen);
        sprOpen.setName(""sprOpen"");
        menuFile.add(sprOpen);
        menuSave.setMnemonic('s');
        menuSave.setText(""Save"");
        menuSave.setName(""menuSave"");
        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSaveMousePressed(evt);
            }
        });
        menuFile.add(menuSave);
        sprSave.setName(""sprSave"");
        menuFile.add(sprSave);
        menuExit.setMnemonic('x');
        menuExit.setText(""Exit"");
        menuExit.setBorderPainted(false);
        menuExit.setFocusable(true);
        menuExit.setName(""menuExit"");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuExitMousePressed(evt);
            }
        });
        menuFile.add(menuExit);
        menuBarMain.add(menuFile);
        menuTools.setMnemonic('t');
        menuTools.setText(""Tools"");
        menuTools.setName(""menuTools"");
        grpMenuIgnore.add(menuRd_IgnoreNone);
        menuRd_IgnoreNone.setText(""Reset"");
        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreNoneStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreNone);
        grpMenuIgnore.add(menuRd_IgnoreCap);
        menuRd_IgnoreCap.setText(""Skip Capture"");
        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCap);
        grpMenuIgnore.add(menuRd_IgnoreCapConv);
        menuRd_IgnoreCapConv.setText(""Skip Capture/Transcode"");
        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConv);
        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);
        menuRd_IgnoreCapConvMenu.setText(""Skip Capture/Transcode/Menu"");
        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvMenuStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConvMenu);
        menuTools.add(sprIgnore);
        menuProjProp.setText(""Project Properties (Default)"");
        grpMenuFormat.add(menuRdNTSC);
        menuRdNTSC.setSelected(true);
        menuRdNTSC.setText(""NTSC"");
        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdNTSCItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdNTSC);
        grpMenuFormat.add(menuRdPAL);
        menuRdPAL.setText(""PAL"");
        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdPALItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdPAL);
        menuProjProp.add(sprMenuFormatAspect);
        grpMenuAspectRatio.add(menuRd_4_3);
        menuRd_4_3.setSelected(true);
        menuRd_4_3.setText(""4:3"");
        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_4_3ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_4_3);
        grpMenuAspectRatio.add(menuRd_16_9);
        menuRd_16_9.setText(""16:9"");
        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_16_9ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_16_9);
        menuProjProp.add(sprMenuThread);
        menuChkThread.setText(""Enable Multi-Threading"");
        menuChkThread.setToolTipText(""EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%"");
        menuChkThread.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuChkThreadItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuChkThread);
        menuTools.add(menuProjProp);
        menuBarMain.add(menuTools);
        menuHelp.setMnemonic('h');
        menuHelp.setText(""Help"");
        menuHelp.setName(""menuHelp"");
        menuInternet.setText(""dvd-homevideo website"");
        menuInternet.setName(""menuInternet"");
        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuInternetMousePressed(evt);
            }
        });
        menuHelp.add(menuInternet);
        menuREADME.setText(""README File"");
        menuREADME.setName(""menuREADME"");
        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuREADMEMousePressed(evt);
            }
        });
        menuHelp.add(menuREADME);
        menuBug.setText(""Submit Bug"");
        menuBug.setName(""menuBug"");
        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBugMousePressed(evt);
            }
        });
        menuHelp.add(menuBug);
        menuAbout.setText(""About dvd-homevideo"");
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuAboutMousePressed(evt);
            }
        });
        menuHelp.add(menuAbout);
        menuBarMain.add(menuHelp);
        setJMenuBar(menuBarMain);
        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged
        if (menuRd_IgnoreNone.isSelected()) {
            lblMinutes.setEnabled(true);
            spnMinutes.setEnabled(true);
            lblSeconds.setEnabled(true);
            spnSeconds.setEnabled(true);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(false);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged
        if (menuRd_IgnoreCap.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapStateChanged
    private //GEN-FIRST:event_txtOutputDirFocusLost
    void //GEN-FIRST:event_txtOutputDirFocusLost
    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtOutputDirFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtOutputDirFocusLost
    private //GEN-FIRST:event_txtTitleFocusLost
    void //GEN-FIRST:event_txtTitleFocusLost
    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtTitleFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtTitleFocusLost
    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    java.awt.event.KeyEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirKeyTyped
    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    java.awt.event.MouseEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirMouseClicked
    private //GEN-FIRST:event_spnSecondsStateChanged
    void //GEN-FIRST:event_spnSecondsStateChanged
    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnSecondsStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnSecondsStateChanged
    private //GEN-FIRST:event_spnMinutesStateChanged
    void //GEN-FIRST:event_spnMinutesStateChanged
    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnMinutesStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnMinutesStateChanged
    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnStartKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER) {
            try {
                /* 
                 * Automatically save the configuration in the users ~/.dvd-homevideo
                 * directory.  This way if they forget to click on the Save button in
                 * the File menu, it will still be saved once they start capturing 
                 * from their camcorder. 
                 */
                WriteSession();
            } catch (IOException e) {
            }
            blnBegin = true;
            btnPlay.setEnabled(false);
        }
    }

    //GEN-LAST:event_btnStartKeyTyped
    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnExitKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER)
            ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitKeyTyped
    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuChkThreadItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuChkThreadItemStateChanged
    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuAboutMousePressed
        MessageBox(""dvd-homevideo, version 0.4\n"" + ""Created by: Shane Santner"", 1);
    }

    //GEN-LAST:event_menuAboutMousePressed
    /**
     * This is the code that handles the user clicking the Exit button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnExitMouseClicked
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitMouseClicked
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_16_9ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_16_9ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_4_3ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_4_3ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdPALItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdPALItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdNTSCItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdNTSCItemStateChanged
    /**
     * This is the code that handles the user clicking the Play button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnPlayMouseClicked
        /*
         * Try to play the DVD in kaffeine first, if that fails then
         * try xine next.  TODO Need to also add code for mplayer as well.
         */
        try {
            String[] cmd = { ""kaffeine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""xine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have xine or kaffeine installed.\n"", 1);
            }
        }
    }

    //GEN-LAST:event_btnPlayMouseClicked
    /**
     * This is the code that handles the user clicking on the SubmitBug button
     * in the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuBugMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\n"" + ""in the address bar to submit a bug for dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuBugMousePressed
    /**
     * If you don't need to recapture video from the camcorder because of
     * an error later in the program, then you can check this box in the Tools
     * menu and this will allow you to not have to recapture.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you don't need to recapture video or retranscode the video to DVD format
     * because of an error later in the program, then you can check this box in
     * the Tools menu and this will allow you to not have to recapture or retranscode.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you only need to rerun dvd-author then you can check this box in
     * the Tools menu.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * This is the code that handles the user clicking the Open button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuOpenMousePressed
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter("".xml""));
        fcMenuOpen.setCurrentDirectory(home);
        int returnVal = fcMenuOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            ReadSession(fcMenuOpen.getSelectedFile().getPath());
        enableStartButton();
    }

    //GEN-LAST:event_menuOpenMousePressed
    /**
     * This is the code that handles the user clicking the Save button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuSaveMousePressed
        /* 
         * The default action is to call WriteSession to store all of the 
         * GUI widget information for later retrieval.
         */
        try {
            WriteSession();
        } catch (IOException e) {
        }
    }

    //GEN-LAST:event_menuSaveMousePressed
    /**
     * This is the code that handles the user clicking the dvd-homevideo website
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuInternetMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuInternetMousePressed
    /**
     * This is the code that handles the user clicking the README file
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuREADMEMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/README.html\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuREADMEMousePressed
    /**
     * This is the code that handles the user clicking the Exit button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuExitMousePressed
        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_menuExitMousePressed
    /**
     * This is the code that handles the user clicking the Start button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnStartMouseClicked
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This way if they forget to click on the Save button in
             * the File menu, it will still be saved once they start capturing 
             * from their camcorder. 
             */
            WriteSession();
        } catch (IOException e) {
        }
        blnBegin = true;
        btnPlay.setEnabled(false);
    }

    //GEN-LAST:event_btnStartMouseClicked
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for a title file to use for dvd-menu.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to store
     * everything in.
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate an
     * audio file.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioKeyTyped
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureKeyTyped
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkMenuKeyTyped
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        } else {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkMenuKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the quality group of radio buttons
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkQualityKeyTyped
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        } else {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkQualityKeyTyped
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureMouseClicked
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate an
     * audio file in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioMouseClicked
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to store
     * all of their files in
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for a title file to be used for
     * the background menu of the DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to select the quality of video conversion for
     * their DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkQualityMouseClicked
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        } else {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkQualityMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to specify details for the DVD menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkMenuMouseClicked
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        } else {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkMenuMouseClicked
    public void enableStartButton() {
        int tempMinutes, tempSeconds, tempTotal;
        String tempStrTitle, tempStrOutputDir;
        /* First, load the values from the form into local variables */
        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();
        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();
        tempTotal = tempSeconds + tempMinutes;
        tempStrTitle = txtTitle.getText();
        tempStrOutputDir = txtOutputDir.getText();
        /*
         * Now do the error checking.  Here we look for a capture time
         * that is greater than zero and less than 65 minutes 
         */
        if (tempTotal >= 1 && !tempStrOutputDir.equals("""") && !tempStrTitle.equals("""")) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else if (!tempStrOutputDir.equals("""") && !tempStrTitle.equals("""") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else
            btnStart.setEnabled(false);
    }

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules() {
        try {
            String line;
            String modules = ""cat /proc/modules | grep raw1394"";
            String[] module_cmd = { ""/bin/sh"", ""-c"", modules };
            Process p = Runtime.getRuntime().exec(module_cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            line = in.readLine();
            p.waitFor();
            if (line == null)
                return false;
            else
                return true;
        } catch (Exception ioe) {
            /* If we have made it here then the module is not loaded */
            return false;
        }
    }

    /**
     * On startup, checks to ensure that all dependent programs are installed
     * @param   Prog[]  List of dependent programs needed for dvd-homevideo
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean checkForProg(String[] Prog) {
        /* Declare local variables */
        int i = 0;
        int j = 0;
        String build_list = """";
        String[] uninstalled = new String[Prog.length];
        while (true) {
            try {
                /* 
                 * Walk through the list of programs needed for dvd-homevideo
                 * to operate correctly.
                 */
                while (i < Prog.length) {
                    /* 
                     * This is how I test for a program.  I simple try to 
                     * execute the application, if it fails then the software
                     * jumps to the catch block and I know that the program
                     * is either not installed or not in the users path.
                     */
                    Process p = Runtime.getRuntime().exec(Prog[i]);
                    /* 
                     * If I make it here then the program exists and I need to
                     * kill it.
                     */
                    p.destroy();
                    i++;
                }
                /* Check for any uninstalled programs */
                for (i = 0; i < uninstalled.length; i++) {
                    /* If not null then add to the list */
                    if (uninstalled[i] != null)
                        build_list += uninstalled[i] + ""\n"";
                }
                /* 
                 * If the first element is null, then all programs are 
                 * installed correctly.
                 */
                if (uninstalled[0] == null)
                    return true;
                else
                    /* Otherwise tell the user what they are missing */
                    MessageBox(""The following programs are not installed or not in "" + ""your path!\n"" + build_list, 0);
                return false;
            } catch (IOException ioe) {
                /* Add the missing program to the uninstalled array */
                uninstalled[j] = Prog[i];
                i++;
                j++;
            }
        }
    }

    /**
     * Displays a message box with the supplied text and yes/no options
     * @param   message    The message to display in the box
     */
    public int MessageBox(String message) {
        return JOptionPane.showConfirmDialog(null, message, ""dvd-homevideo"", JOptionPane.YES_NO_OPTION);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     */
    public void MessageBox(String message, int type) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     * @param   picture    Picture to display in the MessageBox
     */
    public void MessageBox(String message, int type, String picture) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type, new javax.swing.ImageIcon(getClass().getResource(picture)));
    }

    /**
     * Check dvd-homevideo for runtime errors
     * @param   fileName    This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return   A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName) {
        String line;
        StringTokenizer st;
        String testToken;
        boolean error = false;
        /*
         * Need to parse through the supplies file and look for any
         * instances of the words 'error' or 'broken'.  If found, this
         * is treated as a run-time error of one of the dependent programs
         * that dvd-homevideo relies on.
         */
        try {
            BufferedReader in = new BufferedReader(new FileReader(fileName));
            while ((line = in.readLine()) != null) {
                /* Check for a specific burn error */
                if (line.equals("":-( /dev/dvd: media is not recognized as recordable DVD: 9"")) {
                    MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                    return true;
                }
                /*
                 * Need to catch all instances of 'error' or 'broken'.  This
                 * includes cases such as:
                 * **Error:
                 * error~
                 * Broken pipe
                 * etc, etc, etc.  We need to catch ALL instances.
                 */
                st = new StringTokenizer(line, ""*,;:'-~\t "");
                while (st.hasMoreTokens()) {
                    testToken = st.nextToken();
                    if (// ||
                    testToken.equalsIgnoreCase(""Error"")) //testToken.equalsIgnoreCase(""Broken""))
                    {
                        MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                        error = true;
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""Can not find "" + fileName + ""\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        return error;
    }

    /**
     * Update the Status textbox
     * @param   typeColor   red, green, or grey
     * @param   typeUpdate  Values should be PASS, FAIL, Status
     */
    public void UpdateStatus(Color typeColor, String typeUpdate) {
        /* 
         * Set the background and text to let the user know that
         * dvd-homevideo failed
         */
        txtStatus.setBackground(typeColor);
        txtStatus.setText(typeUpdate);
        if (typeUpdate.equals(""FAIL""))
            txtStatus.setToolTipText(""Look at dvd-homevideo.err and files"" + "" in the log directory for possible"" + "" reasons why dvd-homevideo failed."");
        /* 
         * If we need to wait for user input because dvd-homevideo
         * has completed...either because of passing or failing then
         * set blnBegin to false.
         */
        if (!typeUpdate.equals(""Status""))
            blnBegin = false;
    }

    /**
     * This method should be called every time the application exits normally.  This allows the
     * current session to be saved before quiting dvd-homevideo.
     */
    public void ExitDVDHomevideo() {
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This should be the only place in the project where System.exit(0) is called. 
             */
            WriteSession();
            WriteProjProperties();
            System.exit(0);
        } catch (IOException e) {
        }
    }

    /**
     * This method retrieves user specific information from the
     * properties xml file in the users ~/.dvd-homevideo directory
     */
    public void ReadProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        String line, token;
        StringTokenizer st;
        try {
            /* 
             * Read the xml properties file and set widgets on the 
             * form accordingly
             */
            BufferedReader reader = new BufferedReader(new FileReader(home));
            while ((line = reader.readLine()) != null) {
                st = new StringTokenizer(line, ""<>"");
                while (st.hasMoreTokens()) {
                    token = st.nextToken();
                    if (token.equals(""menuRdNTSC"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));
                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));
                        rdNTSC.setSelected(menuRdNTSC.isSelected());
                        rdPAL.setSelected(menuRdPAL.isSelected());
                    } else if (token.equals(""menuRd_4_3"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));
                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));
                        rd4_3.setSelected(menuRd_4_3.isSelected());
                        rd16_9.setSelected(menuRd_16_9.isSelected());
                    } else if (token.equals(""menuChkThread"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuChkThread.setSelected(Boolean.parseBoolean(token));
                    }
                }
            }
            reader.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in ReadProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * This method stores user specific information in a properties xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        try {
            /* Write/rewrite the xml properties file */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home));
            writer.write(""<dvd-homevideo properties>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRdNTSC.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t<menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRd_4_3.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t</JRadioButonMenuItem>"");
            writer.newLine();
            writer.write(""\t<JCheckBoxMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuChkThread>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuChkThread.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuChkThread>"");
            writer.newLine();
            writer.write(""\t</JCheckBoxMenuItem>"");
            writer.newLine();
            writer.close();
            /* Update the states on the form */
            rdNTSC.setSelected(menuRdNTSC.isSelected());
            rdPAL.setSelected(menuRdPAL.isSelected());
            rd4_3.setSelected(menuRd_4_3.isSelected());
            rd16_9.setSelected(menuRd_16_9.isSelected());
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in WriteProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Opens a previous dvd-homevideo session by reading an xml file
     * @param   xmlPath    Path to the xml file
     */
    public void ReadSession(String xmlPath) {
        String line, token;
        StringTokenizer st;
        boolean done = false;
        int i;
        /* 
         * Define an exhaustive list of the widgets that we need to track
         * on the form.
         */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            BufferedReader in = new BufferedReader(new FileReader(xmlPath));
            line = in.readLine();
            st = new StringTokenizer(line, ""<>"");
            token = st.nextToken();
            /* 
             * If the first line does not contain dvd-homevideo then
             * we have a bad xml file.
             */
            if (!token.equals(""dvd-homevideo"")) {
                MessageBox(""Invalid File Format!"", 1);
                done = true;
            }
            while (((line = in.readLine()) != null) && !done) {
                st = new StringTokenizer(line, ""<>"");
                if (!st.nextToken().equals(""/dvd-homevideo""))
                    token = st.nextToken();
                /* Read in the variables and set them on the form */
                if (token.equals(""JLabel"")) {
                    for (i = 0; i < lbl_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JSpinner"")) {
                    for (i = 0; i < spn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        // SDK 1.4 didn't like this
                        spn_widgets[i].setValue(Integer.parseInt(token));
                        //spn_widgets[i].getModel().setValue((Object)token);
                        in.readLine();
                    }
                } else if (token.equals(""JCheckBox"")) {
                    for (i = 0; i < chk_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButton"")) {
                    for (i = 0; i < rd_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JTextField"")) {
                    for (i = 0; i < txt_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        if (!token.substring(1, 4).equals(""tex""))
                            txt_widgets[i].setText(token);
                        in.readLine();
                    }
                } else if (token.equals(""JButton"")) {
                    for (i = 0; i < btn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButtonMenuItem"")) {
                    for (i = 0; i < chkMenu_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else {
                    lblCapture.setEnabled(false);
                    lblConvert.setEnabled(false);
                    lblAuthor.setEnabled(false);
                    lblCaptureProg.setEnabled(false);
                    lblConvertProg.setEnabled(false);
                    lblAuthorProg.setEnabled(false);
                    prgCapture.setEnabled(false);
                    prgConvert.setEnabled(false);
                    prgAuthor.setEnabled(false);
                    lblCaptureProg.setText(""0%"");
                    lblConvertProg.setText(""0%"");
                    lblAuthorProg.setText(""0%"");
                }
            }
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while reading the xml file"" + ""\nfor the requested dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Saves the state of all widgets on the GUI form in an xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteSession() throws IOException {
        int i;
        /* Again, we must have this exhaustive list of widgets to parse through */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            /* Write the file to the users ~/.dvd-homevideo directory */
            String home = System.getProperty(""user.home"");
            File msgboxSave = new File(home + ""/.dvd-homevideo/properties"");
            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/properties""));
            msgboxSaveWriter.close();
            /* Now write the xml file to the users home/dvd-homevideo directory */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/"" + txtTitle.getText() + "".xml""));
            writer.write(""<dvd-homevideo>"");
            writer.newLine();
            writer.write(""\t<JLabel>"");
            writer.newLine();
            for (i = 0; i < lbl_widgets.length; i++) {
                writer.write(""\t\t<"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + lbl_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JLabel>"");
            writer.newLine();
            writer.write(""\t<JSpinner>"");
            writer.newLine();
            for (i = 0; i < spn_widgets.length; i++) {
                writer.write(""\t\t<"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + spn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<value>"" + spn_widgets[i].getValue() + ""</value>"");
                writer.newLine();
                writer.write(""\t\t</"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JSpinner>"");
            writer.newLine();
            writer.write(""\t<JCheckBox>"");
            writer.newLine();
            for (i = 0; i < chk_widgets.length; i++) {
                writer.write(""\t\t<"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chk_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chk_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JCheckBox>"");
            writer.newLine();
            writer.write(""\t<JRadioButton>"");
            writer.newLine();
            for (i = 0; i < rd_widgets.length; i++) {
                writer.write(""\t\t<"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + rd_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + rd_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButton>"");
            writer.newLine();
            writer.write(""\t<JTextField>"");
            writer.newLine();
            for (i = 0; i < txt_widgets.length; i++) {
                writer.write(""\t\t<"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + txt_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<text>"" + txt_widgets[i].getText() + ""</text>"");
                writer.newLine();
                writer.write(""\t\t</"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JTextField>"");
            writer.newLine();
            writer.write(""\t<JButton>"");
            writer.newLine();
            for (i = 0; i < btn_widgets.length; i++) {
                writer.write(""\t\t<"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + btn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JButton>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            for (i = 0; i < chkMenu_widgets.length; i++) {
                writer.write(""\t\t<"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chkMenu_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chkMenu_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""</dvd-homevideo>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while writing the xml file"" + ""\nfor this dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /*
    public void setIcon()
    {
        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));
        setIconImage(new javax.swing.ImageIcon(image.getImage()));
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;

    private javax.swing.JButton btnOpen_Audio;

    private javax.swing.JButton btnOpen_OutputDir;

    private javax.swing.JButton btnOpen_Picture;

    private javax.swing.JButton btnOpen_TextFile;

    protected javax.swing.JButton btnPlay;

    private javax.swing.JButton btnStart;

    protected javax.swing.JCheckBox chkBurn;

    protected javax.swing.JCheckBox chkMenu;

    protected javax.swing.JCheckBox chkQuality;

    private javax.swing.JFileChooser fcMenuOpen;

    private javax.swing.JFileChooser fcOpen;

    private javax.swing.ButtonGroup grpAspectRatio;

    private javax.swing.ButtonGroup grpFormat;

    private javax.swing.ButtonGroup grpMenuAspectRatio;

    private javax.swing.ButtonGroup grpMenuFormat;

    private javax.swing.ButtonGroup grpMenuIgnore;

    private javax.swing.ButtonGroup grpMenuMode;

    private javax.swing.ButtonGroup grpQuality;

    private javax.swing.JLabel lblAspectRatio;

    private javax.swing.JLabel lblAudio;

    protected javax.swing.JLabel lblAuthor;

    protected javax.swing.JLabel lblAuthorProg;

    protected javax.swing.JLabel lblCapture;

    protected javax.swing.JLabel lblCaptureProg;

    protected javax.swing.JLabel lblConvert;

    protected javax.swing.JLabel lblConvertProg;

    private javax.swing.JLabel lblFormat;

    private javax.swing.JLabel lblMinutes;

    private javax.swing.JLabel lblOutputDir;

    private javax.swing.JLabel lblPicture;

    private javax.swing.JLabel lblSeconds;

    private javax.swing.JLabel lblTextFile;

    private javax.swing.JLabel lblTitle;

    private javax.swing.JMenuItem menuAbout;

    protected javax.swing.JMenuBar menuBarMain;

    private javax.swing.JMenuItem menuBug;

    protected javax.swing.JCheckBoxMenuItem menuChkThread;

    protected javax.swing.JMenuItem menuExit;

    protected javax.swing.JMenu menuFile;

    protected javax.swing.JMenu menuHelp;

    protected javax.swing.JMenuItem menuInternet;

    protected javax.swing.JMenuItem menuOpen;

    private javax.swing.JMenu menuProjProp;

    protected javax.swing.JMenuItem menuREADME;

    private javax.swing.JRadioButtonMenuItem menuRdNTSC;

    private javax.swing.JRadioButtonMenuItem menuRdPAL;

    private javax.swing.JRadioButtonMenuItem menuRd_16_9;

    private javax.swing.JRadioButtonMenuItem menuRd_4_3;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;

    protected javax.swing.JMenuItem menuSave;

    protected javax.swing.JMenu menuTools;

    private javax.swing.JPanel pnlGUI;

    protected javax.swing.JProgressBar prgAuthor;

    protected javax.swing.JProgressBar prgCapture;

    protected javax.swing.JProgressBar prgConvert;

    protected javax.swing.JRadioButton rd16_9;

    protected javax.swing.JRadioButton rd4_3;

    protected javax.swing.JRadioButton rdAverage;

    protected javax.swing.JRadioButton rdGood;

    protected javax.swing.JRadioButton rdNTSC;

    protected javax.swing.JRadioButton rdPAL;

    protected javax.swing.JRadioButton rdSuper;

    private javax.swing.JScrollPane spTextArea;

    protected javax.swing.JSpinner spnMinutes;

    protected javax.swing.JSpinner spnSeconds;

    private javax.swing.JSeparator sprAspectRatio;

    private javax.swing.JSeparator sprCapConvert;

    private javax.swing.JSeparator sprIgnore;

    private javax.swing.JSeparator sprMenuAuthor;

    private javax.swing.JSeparator sprMenuFormatAspect;

    private javax.swing.JSeparator sprMenuThread;

    protected javax.swing.JSeparator sprOpen;

    protected javax.swing.JSeparator sprSave;

    protected javax.swing.JTextArea txtAreaOutput;

    protected javax.swing.JTextField txtAudio;

    protected javax.swing.JTextField txtOutputDir;

    protected javax.swing.JTextField txtPicture;

    protected javax.swing.JTextField txtStatus;

    protected javax.swing.JTextField txtTextFile;

    protected javax.swing.JTextField txtTitle;

    // End of variables declaration//GEN-END:variables
    /* My GUI variable declarations */
    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);

    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);
}
","// GUI_2Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.
*/
class GUI_2Test {","// GUI_2Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.
*/
class GUI_2Test {
"
12f947e7-b956-4405-b816-819f51563d5f,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/GUI_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 29976 tokens (27976 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author  Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /* 
     * Creates a new form, probably the most compilcated - or
     * messiest constructor I have ever developed.
     */
    public GUI() {
        /*
         * initComponents is a netbeans generated method that does
         * all of the GUI stuff for dvd-homevideo.
         */
        initComponents();
        /* 
         * Sets the maximum allowable values for the minutes
         * and seconds Spinners.
         */
        spnSeconds.setModel(spnSecondsSize);
        spnMinutes.setModel(spnMinutesSize);
        /* First do a check for the required programs */
        if (!checkForProg(DependentPrograms))
            MessageBox(""You do not appear to have the necessary\n"" + ""programs installed for dvd-homevideo to operate\n"" + ""correctly.  Please check the README file for the\n"" + ""list of dependencies.  dvd-homevideo will not\n"" + ""function correctly until all dependencies are installed!"", 1);
        /* Now check for the required ieee1394 module */
        if (!checkForModules())
            MessageBox(""You do not have the correct modules loaded\n"" + ""for dvd-homevideo to function properly.  Please\n"" + ""check the README file for further instructions!"", 1);
        if (getJMenuBar() != null)
            (this.getJMenuBar()).setOpaque(false);
        /* 
         * Create Project directory.  This is where (~/.dvd-homevideo) the 
         * .xml files for each session get stored as well as user preferences.
         */
        File ProjectDir = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        if (!ProjectDir.exists()) {
            MessageBox(""All projects will be automatically saved to: "" + System.getProperty(""user.home"") + ""/.dvd-homevideo/"", 1);
            ProjectDir.mkdir();
        }
        File ProjProperties = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        if (!ProjProperties.exists()) {
            try {
                BufferedWriter projProp = new BufferedWriter(new FileWriter(ProjProperties));
                projProp.close();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(strOutputDir, ex);
                MessageBox(""IO Error writing to properties file...in GUI.java\n"" + ex.toString(), 0);
                ex.printStackTrace();
            }
        }
        /* If the user has specified individual customization, then read it */
        ReadProjProperties();
    }

    /* End of constructor */
    javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));

    protected String strOutputDir;

    protected boolean blnBegin;

    /* My list of dependent programs for dvd-homevideo */
    protected String[] DependentPrograms = { ""dvgrab"", ""transcode"", ""mplex"", ""dvd-menu"", ""dvdauthor"", ""growisofs"", ""ffmpeg"", ""lame"", ""sox"" };

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate=""collapsed"" desc="" Generated Code "">//GEN-BEGIN:initComponents
    private void initComponents() {
        grpQuality = new javax.swing.ButtonGroup();
        fcOpen = new javax.swing.JFileChooser();
        grpFormat = new javax.swing.ButtonGroup();
        grpAspectRatio = new javax.swing.ButtonGroup();
        fcMenuOpen = new javax.swing.JFileChooser();
        grpMenuFormat = new javax.swing.ButtonGroup();
        grpMenuAspectRatio = new javax.swing.ButtonGroup();
        grpMenuMode = new javax.swing.ButtonGroup();
        grpMenuIgnore = new javax.swing.ButtonGroup();
        pnlGUI = new javax.swing.JPanel();
        lblMinutes = new javax.swing.JLabel();
        spnMinutes = new javax.swing.JSpinner();
        lblSeconds = new javax.swing.JLabel();
        spnSeconds = new javax.swing.JSpinner();
        chkQuality = new javax.swing.JCheckBox();
        rdSuper = new javax.swing.JRadioButton();
        rdGood = new javax.swing.JRadioButton();
        rdAverage = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        chkMenu = new javax.swing.JCheckBox();
        lblPicture = new javax.swing.JLabel();
        txtPicture = new javax.swing.JTextField();
        lblAudio = new javax.swing.JLabel();
        txtAudio = new javax.swing.JTextField();
        btnOpen_Picture = new javax.swing.JButton();
        prgCapture = new javax.swing.JProgressBar();
        prgConvert = new javax.swing.JProgressBar();
        prgAuthor = new javax.swing.JProgressBar();
        btnOpen_Audio = new javax.swing.JButton();
        lblTextFile = new javax.swing.JLabel();
        txtTextFile = new javax.swing.JTextField();
        btnOpen_TextFile = new javax.swing.JButton();
        txtOutputDir = new javax.swing.JTextField();
        lblOutputDir = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnOpen_OutputDir = new javax.swing.JButton();
        chkBurn = new javax.swing.JCheckBox();
        lblCaptureProg = new javax.swing.JLabel();
        lblConvertProg = new javax.swing.JLabel();
        lblAuthorProg = new javax.swing.JLabel();
        lblCapture = new javax.swing.JLabel();
        lblConvert = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        sprCapConvert = new javax.swing.JSeparator();
        sprMenuAuthor = new javax.swing.JSeparator();
        spTextArea = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();
        rdNTSC = new javax.swing.JRadioButton();
        rdPAL = new javax.swing.JRadioButton();
        rd4_3 = new javax.swing.JRadioButton();
        rd16_9 = new javax.swing.JRadioButton();
        lblFormat = new javax.swing.JLabel();
        lblAspectRatio = new javax.swing.JLabel();
        sprAspectRatio = new javax.swing.JSeparator();
        btnPlay = new javax.swing.JButton();
        txtStatus = new javax.swing.JTextField();
        menuBarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        sprOpen = new javax.swing.JSeparator();
        menuSave = new javax.swing.JMenuItem();
        sprSave = new javax.swing.JSeparator();
        menuExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuRd_IgnoreNone = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCap = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConv = new javax.swing.JRadioButtonMenuItem();
        menuRd_IgnoreCapConvMenu = new javax.swing.JRadioButtonMenuItem();
        sprIgnore = new javax.swing.JSeparator();
        menuProjProp = new javax.swing.JMenu();
        menuRdNTSC = new javax.swing.JRadioButtonMenuItem();
        menuRdPAL = new javax.swing.JRadioButtonMenuItem();
        sprMenuFormatAspect = new javax.swing.JSeparator();
        menuRd_4_3 = new javax.swing.JRadioButtonMenuItem();
        menuRd_16_9 = new javax.swing.JRadioButtonMenuItem();
        sprMenuThread = new javax.swing.JSeparator();
        menuChkThread = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuInternet = new javax.swing.JMenuItem();
        menuREADME = new javax.swing.JMenuItem();
        menuBug = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();
        fcOpen.setName(""fcOpen"");
        getContentPane().setLayout(new java.awt.GridBagLayout());
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(""dvd-homevideo"");
        setIconImage(image.getImage());
        setName(""dvd-homevideo"");
        setResizable(false);
        pnlGUI.setLayout(null);
        pnlGUI.setToolTipText(""dvd-homevideo"");
        pnlGUI.setMaximumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setMinimumSize(new java.awt.Dimension(510, 620));
        pnlGUI.setName(""pnlGUI"");
        pnlGUI.setOpaque(false);
        pnlGUI.setPreferredSize(new java.awt.Dimension(510, 620));
        lblMinutes.setText(""Capture Time in Minutes"");
        lblMinutes.setName(""lblMinutes"");
        pnlGUI.add(lblMinutes);
        lblMinutes.setBounds(20, 10, 154, 15);
        spnMinutes.setToolTipText(""Minutes Portion of the Capture Time"");
        spnMinutes.setMinimumSize(new java.awt.Dimension(35, 20));
        spnMinutes.setName(""spnMinutes"");
        spnMinutes.setNextFocusableComponent(spnSeconds);
        spnMinutes.setPreferredSize(new java.awt.Dimension(35, 20));
        spnMinutes.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnMinutesStateChanged(evt);
            }
        });
        pnlGUI.add(spnMinutes);
        spnMinutes.setBounds(140, 30, 35, 20);
        lblSeconds.setText(""Capture Time in Seconds"");
        lblSeconds.setName(""lblSeconds"");
        pnlGUI.add(lblSeconds);
        lblSeconds.setBounds(20, 50, 155, 15);
        spnSeconds.setToolTipText(""Seconds Portion of the Capture Time"");
        spnSeconds.setName(""spnSeconds"");
        spnSeconds.setNextFocusableComponent(chkQuality);
        spnSeconds.setPreferredSize(new java.awt.Dimension(35, 20));
        spnSeconds.setRequestFocusEnabled(false);
        spnSeconds.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnSecondsStateChanged(evt);
            }
        });
        pnlGUI.add(spnSeconds);
        spnSeconds.setBounds(140, 70, 35, 20);
        chkQuality.setText(""Quality for DVD compression"");
        chkQuality.setToolTipText(""Check this box to enable quality control"");
        chkQuality.setName(""chkQuality"");
        chkQuality.setNextFocusableComponent(rdSuper);
        chkQuality.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkQualityKeyTyped(evt);
            }
        });
        chkQuality.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkQualityMouseClicked(evt);
            }
        });
        pnlGUI.add(chkQuality);
        chkQuality.setBounds(260, 10, 208, 23);
        grpQuality.add(rdSuper);
        rdSuper.setSelected(true);
        rdSuper.setText(""Super"");
        rdSuper.setToolTipText(""Best Quality...recommended"");
        rdSuper.setEnabled(false);
        rdSuper.setName(""rdSuper"");
        rdSuper.setNextFocusableComponent(rdGood);
        pnlGUI.add(rdSuper);
        rdSuper.setBounds(280, 30, 60, 23);
        grpQuality.add(rdGood);
        rdGood.setText(""Good"");
        rdGood.setToolTipText(""Good Quality...a little faster"");
        rdGood.setEnabled(false);
        rdGood.setName(""rdGood"");
        rdGood.setNextFocusableComponent(rdAverage);
        pnlGUI.add(rdGood);
        rdGood.setBounds(280, 50, 58, 23);
        grpQuality.add(rdAverage);
        rdAverage.setText(""Average"");
        rdAverage.setToolTipText(""Nothing special...but fast"");
        rdAverage.setEnabled(false);
        rdAverage.setName(""rdAverage"");
        rdAverage.setNextFocusableComponent(rdNTSC);
        pnlGUI.add(rdAverage);
        rdAverage.setBounds(280, 70, 75, 23);
        btnStart.setText(""Start"");
        btnStart.setToolTipText(""Start Capturing Video from your Digital Camcorder"");
        btnStart.setEnabled(false);
        btnStart.setName(""btnStart"");
        btnStart.setNextFocusableComponent(btnExit);
        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnStartKeyTyped(evt);
            }
        });
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
        });
        pnlGUI.add(btnStart);
        btnStart.setBounds(250, 400, 70, 25);
        btnExit.setText(""Exit"");
        btnExit.setToolTipText(""Exit dvd-homevideo"");
        btnExit.setName(""btnExit"");
        btnExit.setNextFocusableComponent(btnPlay);
        btnExit.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnExitKeyTyped(evt);
            }
        });
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });
        pnlGUI.add(btnExit);
        btnExit.setBounds(330, 400, 70, 25);
        chkMenu.setText(""Custom DVD Menu"");
        chkMenu.setToolTipText(""Enables Custom Picture and Audio for DVD Background"");
        chkMenu.setName(""chkMenu"");
        chkMenu.setNextFocusableComponent(txtPicture);
        chkMenu.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                chkMenuKeyTyped(evt);
            }
        });
        chkMenu.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkMenuMouseClicked(evt);
            }
        });
        pnlGUI.add(chkMenu);
        chkMenu.setBounds(10, 170, 144, 23);
        lblPicture.setText(""Path to DVD Menu Picture"");
        lblPicture.setEnabled(false);
        lblPicture.setName(""lblPicture"");
        pnlGUI.add(lblPicture);
        lblPicture.setBounds(10, 200, 160, 15);
        txtPicture.setEnabled(false);
        txtPicture.setName(""txtPicture"");
        txtPicture.setNextFocusableComponent(btnOpen_Picture);
        pnlGUI.add(txtPicture);
        txtPicture.setBounds(10, 220, 170, 19);
        lblAudio.setText(""Path to DVD Menu Audio"");
        lblAudio.setEnabled(false);
        lblAudio.setName(""lblAudio"");
        pnlGUI.add(lblAudio);
        lblAudio.setBounds(10, 250, 155, 15);
        txtAudio.setEnabled(false);
        txtAudio.setName(""txtAudio"");
        txtAudio.setNextFocusableComponent(btnOpen_Audio);
        pnlGUI.add(txtAudio);
        txtAudio.setBounds(10, 270, 170, 19);
        btnOpen_Picture.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Picture.setEnabled(false);
        btnOpen_Picture.setName(""btnOpen_Picture"");
        btnOpen_Picture.setNextFocusableComponent(txtAudio);
        btnOpen_Picture.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_PictureKeyTyped(evt);
            }
        });
        btnOpen_Picture.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_PictureMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Picture);
        btnOpen_Picture.setBounds(190, 220, 30, 25);
        prgCapture.setEnabled(false);
        prgCapture.setName(""prgCapture"");
        pnlGUI.add(prgCapture);
        prgCapture.setBounds(10, 360, 148, 14);
        prgConvert.setEnabled(false);
        prgConvert.setName(""prgConvert"");
        pnlGUI.add(prgConvert);
        prgConvert.setBounds(180, 360, 148, 14);
        prgAuthor.setEnabled(false);
        prgAuthor.setName(""prgAuthor"");
        pnlGUI.add(prgAuthor);
        prgAuthor.setBounds(350, 360, 148, 14);
        btnOpen_Audio.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_Audio.setEnabled(false);
        btnOpen_Audio.setName(""btnOpen_Audio"");
        btnOpen_Audio.setNextFocusableComponent(txtOutputDir);
        btnOpen_Audio.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_AudioKeyTyped(evt);
            }
        });
        btnOpen_Audio.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_AudioMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_Audio);
        btnOpen_Audio.setBounds(190, 270, 30, 25);
        lblTextFile.setText(""Path to Text File (optional)"");
        lblTextFile.setToolTipText(""This text file specifies the chapter titles for the DVD"");
        lblTextFile.setName(""lblTextFile"");
        pnlGUI.add(lblTextFile);
        lblTextFile.setBounds(260, 270, 165, 15);
        txtTextFile.setName(""txtTextFile"");
        txtTextFile.setNextFocusableComponent(btnOpen_TextFile);
        pnlGUI.add(txtTextFile);
        txtTextFile.setBounds(260, 290, 200, 19);
        btnOpen_TextFile.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_TextFile.setName(""btnOpen_TextFile"");
        btnOpen_TextFile.setNextFocusableComponent(btnStart);
        btnOpen_TextFile.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_TextFileKeyTyped(evt);
            }
        });
        btnOpen_TextFile.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_TextFileMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_TextFile);
        btnOpen_TextFile.setBounds(470, 290, 30, 25);
        txtOutputDir.setName(""txtOutputDir"");
        txtOutputDir.setNextFocusableComponent(btnOpen_OutputDir);
        txtOutputDir.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOutputDirFocusLost(evt);
            }
        });
        pnlGUI.add(txtOutputDir);
        txtOutputDir.setBounds(260, 190, 200, 19);
        lblOutputDir.setText(""Path to the Output Directory"");
        lblOutputDir.setName(""lblOutputDir"");
        pnlGUI.add(lblOutputDir);
        lblOutputDir.setBounds(260, 170, 177, 15);
        txtTitle.setName(""txtTitle"");
        txtTitle.setNextFocusableComponent(txtTextFile);
        txtTitle.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTitleFocusLost(evt);
            }
        });
        pnlGUI.add(txtTitle);
        txtTitle.setBounds(260, 240, 200, 19);
        lblTitle.setText(""Enter a Title for the DVD"");
        lblTitle.setName(""lblTitle"");
        pnlGUI.add(lblTitle);
        lblTitle.setBounds(260, 220, 153, 15);
        btnOpen_OutputDir.setIcon(new javax.swing.ImageIcon(getClass().getResource(""/open.gif"")));
        btnOpen_OutputDir.setName(""btnOpen_OutputDir"");
        btnOpen_OutputDir.setNextFocusableComponent(txtTitle);
        btnOpen_OutputDir.addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyTyped(java.awt.event.KeyEvent evt) {
                btnOpen_OutputDirKeyTyped(evt);
            }
        });
        btnOpen_OutputDir.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpen_OutputDirMouseClicked(evt);
            }
        });
        pnlGUI.add(btnOpen_OutputDir);
        btnOpen_OutputDir.setBounds(470, 190, 30, 25);
        chkBurn.setText(""Burn to DVD"");
        chkBurn.setName(""chkBurn"");
        chkBurn.setNextFocusableComponent(chkMenu);
        pnlGUI.add(chkBurn);
        chkBurn.setBounds(340, 120, 103, 23);
        lblCaptureProg.setText(""0%"");
        lblCaptureProg.setEnabled(false);
        lblCaptureProg.setName(""lblCaptureProg"");
        pnlGUI.add(lblCaptureProg);
        lblCaptureProg.setBounds(20, 380, 40, 15);
        lblConvertProg.setText(""0%"");
        lblConvertProg.setEnabled(false);
        lblConvertProg.setName(""lblConvertProg"");
        pnlGUI.add(lblConvertProg);
        lblConvertProg.setBounds(190, 380, 40, 15);
        lblAuthorProg.setText(""0%"");
        lblAuthorProg.setEnabled(false);
        lblAuthorProg.setName(""lblAuthorProg"");
        pnlGUI.add(lblAuthorProg);
        lblAuthorProg.setBounds(360, 380, 40, 15);
        lblCapture.setText(""Capture Progress"");
        lblCapture.setEnabled(false);
        lblCapture.setName(""lblCapture"");
        pnlGUI.add(lblCapture);
        lblCapture.setBounds(10, 340, 107, 15);
        lblConvert.setText(""Conversion Progress"");
        lblConvert.setEnabled(false);
        lblConvert.setName(""lblConvert"");
        pnlGUI.add(lblConvert);
        lblConvert.setBounds(180, 340, 129, 15);
        lblAuthor.setText(""Authoring DVD"");
        lblAuthor.setEnabled(false);
        lblAuthor.setName(""lblAuthor"");
        pnlGUI.add(lblAuthor);
        lblAuthor.setBounds(350, 340, 95, 15);
        sprCapConvert.setMinimumSize(new java.awt.Dimension(50, 10));
        sprCapConvert.setName(""sprCapConvert"");
        sprCapConvert.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprCapConvert);
        sprCapConvert.setBounds(10, 160, 490, 5);
        sprMenuAuthor.setMinimumSize(new java.awt.Dimension(50, 10));
        sprMenuAuthor.setName(""sprMenuAuthor"");
        sprMenuAuthor.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprMenuAuthor);
        sprMenuAuthor.setBounds(10, 330, 490, 5);
        spTextArea.setAutoscrolls(true);
        spTextArea.setName(""spTextArea"");
        txtAreaOutput.setEditable(false);
        txtAreaOutput.setLineWrap(true);
        txtAreaOutput.setToolTipText(""Output during program execution"");
        txtAreaOutput.setWrapStyleWord(true);
        txtAreaOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtAreaOutput.setName(""txtAreaOutput"");
        spTextArea.setViewportView(txtAreaOutput);
        pnlGUI.add(spTextArea);
        spTextArea.setBounds(20, 470, 470, 140);
        grpFormat.add(rdNTSC);
        rdNTSC.setSelected(true);
        rdNTSC.setText(""NTSC"");
        rdNTSC.setName(""rdNTSC"");
        rdNTSC.setNextFocusableComponent(rdPAL);
        pnlGUI.add(rdNTSC);
        rdNTSC.setBounds(20, 130, 58, 23);
        grpFormat.add(rdPAL);
        rdPAL.setText(""PAL"");
        rdPAL.setName(""rdPAL"");
        rdPAL.setNextFocusableComponent(rd4_3);
        pnlGUI.add(rdPAL);
        rdPAL.setBounds(90, 130, 60, 23);
        grpAspectRatio.add(rd4_3);
        rd4_3.setSelected(true);
        rd4_3.setText(""4:3"");
        rd4_3.setName(""rd4_3"");
        rd4_3.setNextFocusableComponent(rd16_9);
        pnlGUI.add(rd4_3);
        rd4_3.setBounds(190, 130, 50, 23);
        grpAspectRatio.add(rd16_9);
        rd16_9.setText(""16:9"");
        rd16_9.setName(""rd16_9"");
        rd16_9.setNextFocusableComponent(chkBurn);
        pnlGUI.add(rd16_9);
        rd16_9.setBounds(240, 130, 60, 23);
        lblFormat.setText(""Video Format"");
        lblFormat.setName(""lblFormat"");
        pnlGUI.add(lblFormat);
        lblFormat.setBounds(20, 110, 110, 15);
        lblAspectRatio.setText(""Aspect Ratio"");
        lblAspectRatio.setName(""lblAspectRatio"");
        pnlGUI.add(lblAspectRatio);
        lblAspectRatio.setBounds(190, 110, 100, 15);
        sprAspectRatio.setMinimumSize(new java.awt.Dimension(50, 10));
        sprAspectRatio.setName(""sprAspectRatio"");
        sprAspectRatio.setPreferredSize(new java.awt.Dimension(50, 5));
        pnlGUI.add(sprAspectRatio);
        sprAspectRatio.setBounds(10, 100, 490, 5);
        btnPlay.setText(""Play"");
        btnPlay.setEnabled(false);
        btnPlay.setNextFocusableComponent(spnMinutes);
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        pnlGUI.add(btnPlay);
        btnPlay.setBounds(410, 400, 70, 25);
        txtStatus.setBackground(new java.awt.Color(153, 153, 153));
        txtStatus.setEditable(false);
        txtStatus.setFont(new java.awt.Font(""Dialog"", 1, 12));
        txtStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtStatus.setText(""Status"");
        txtStatus.setMaximumSize(new java.awt.Dimension(59, 25));
        txtStatus.setMinimumSize(new java.awt.Dimension(59, 25));
        pnlGUI.add(txtStatus);
        txtStatus.setBounds(410, 430, 70, 30);
        getContentPane().add(pnlGUI, new java.awt.GridBagConstraints());
        menuBarMain.setName(""menuBarMain"");
        menuFile.setMnemonic('f');
        menuFile.setText(""File"");
        menuFile.setName(""menuFile"");
        menuOpen.setMnemonic('o');
        menuOpen.setText(""Open"");
        menuOpen.setName(""menuOpen"");
        menuOpen.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuOpenMousePressed(evt);
            }
        });
        menuFile.add(menuOpen);
        sprOpen.setName(""sprOpen"");
        menuFile.add(sprOpen);
        menuSave.setMnemonic('s');
        menuSave.setText(""Save"");
        menuSave.setName(""menuSave"");
        menuSave.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSaveMousePressed(evt);
            }
        });
        menuFile.add(menuSave);
        sprSave.setName(""sprSave"");
        menuFile.add(sprSave);
        menuExit.setMnemonic('x');
        menuExit.setText(""Exit"");
        menuExit.setBorderPainted(false);
        menuExit.setFocusable(true);
        menuExit.setName(""menuExit"");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuExitMousePressed(evt);
            }
        });
        menuFile.add(menuExit);
        menuBarMain.add(menuFile);
        menuTools.setMnemonic('t');
        menuTools.setText(""Tools"");
        menuTools.setName(""menuTools"");
        grpMenuIgnore.add(menuRd_IgnoreNone);
        menuRd_IgnoreNone.setText(""Reset"");
        menuRd_IgnoreNone.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreNoneStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreNone);
        grpMenuIgnore.add(menuRd_IgnoreCap);
        menuRd_IgnoreCap.setText(""Skip Capture"");
        menuRd_IgnoreCap.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCap);
        grpMenuIgnore.add(menuRd_IgnoreCapConv);
        menuRd_IgnoreCapConv.setText(""Skip Capture/Transcode"");
        menuRd_IgnoreCapConv.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConv);
        grpMenuIgnore.add(menuRd_IgnoreCapConvMenu);
        menuRd_IgnoreCapConvMenu.setText(""Skip Capture/Transcode/Menu"");
        menuRd_IgnoreCapConvMenu.addChangeListener(new javax.swing.event.ChangeListener() {

            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menuRd_IgnoreCapConvMenuStateChanged(evt);
            }
        });
        menuTools.add(menuRd_IgnoreCapConvMenu);
        menuTools.add(sprIgnore);
        menuProjProp.setText(""Project Properties (Default)"");
        grpMenuFormat.add(menuRdNTSC);
        menuRdNTSC.setSelected(true);
        menuRdNTSC.setText(""NTSC"");
        menuRdNTSC.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdNTSCItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdNTSC);
        grpMenuFormat.add(menuRdPAL);
        menuRdPAL.setText(""PAL"");
        menuRdPAL.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRdPALItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRdPAL);
        menuProjProp.add(sprMenuFormatAspect);
        grpMenuAspectRatio.add(menuRd_4_3);
        menuRd_4_3.setSelected(true);
        menuRd_4_3.setText(""4:3"");
        menuRd_4_3.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_4_3ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_4_3);
        grpMenuAspectRatio.add(menuRd_16_9);
        menuRd_16_9.setText(""16:9"");
        menuRd_16_9.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuRd_16_9ItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuRd_16_9);
        menuProjProp.add(sprMenuThread);
        menuChkThread.setText(""Enable Multi-Threading"");
        menuChkThread.setToolTipText(""EXPERIMENTAL!!! Very unstable!!!  This allows dvgrab and transcode to run at the same time...speeding up the process by as much as 10%"");
        menuChkThread.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                menuChkThreadItemStateChanged(evt);
            }
        });
        menuProjProp.add(menuChkThread);
        menuTools.add(menuProjProp);
        menuBarMain.add(menuTools);
        menuHelp.setMnemonic('h');
        menuHelp.setText(""Help"");
        menuHelp.setName(""menuHelp"");
        menuInternet.setText(""dvd-homevideo website"");
        menuInternet.setName(""menuInternet"");
        menuInternet.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuInternetMousePressed(evt);
            }
        });
        menuHelp.add(menuInternet);
        menuREADME.setText(""README File"");
        menuREADME.setName(""menuREADME"");
        menuREADME.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuREADMEMousePressed(evt);
            }
        });
        menuHelp.add(menuREADME);
        menuBug.setText(""Submit Bug"");
        menuBug.setName(""menuBug"");
        menuBug.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBugMousePressed(evt);
            }
        });
        menuHelp.add(menuBug);
        menuAbout.setText(""About dvd-homevideo"");
        menuAbout.addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuAboutMousePressed(evt);
            }
        });
        menuHelp.add(menuAbout);
        menuBarMain.add(menuHelp);
        setJMenuBar(menuBarMain);
        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    private //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    menuRd_IgnoreNoneStateChanged(//GEN-FIRST:event_menuRd_IgnoreNoneStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreNoneStateChanged
        if (menuRd_IgnoreNone.isSelected()) {
            lblMinutes.setEnabled(true);
            spnMinutes.setEnabled(true);
            lblSeconds.setEnabled(true);
            spnSeconds.setEnabled(true);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreNoneStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    menuRd_IgnoreCapConvMenuStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvMenuStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvMenuStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(false);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvMenuStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    menuRd_IgnoreCapConvStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapConvStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapConvStateChanged
        if (menuRd_IgnoreCapConv.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(false);
            lblFormat.setEnabled(false);
            rdNTSC.setEnabled(false);
            rdPAL.setEnabled(false);
            lblAspectRatio.setEnabled(false);
            rd4_3.setEnabled(false);
            rd16_9.setEnabled(false);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapConvStateChanged
    private //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    void //GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    menuRd_IgnoreCapStateChanged(//GEN-FIRST:event_menuRd_IgnoreCapStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_menuRd_IgnoreCapStateChanged
        if (menuRd_IgnoreCap.isSelected()) {
            lblMinutes.setEnabled(false);
            spnMinutes.setEnabled(false);
            lblSeconds.setEnabled(false);
            spnSeconds.setEnabled(false);
            chkQuality.setEnabled(true);
            lblFormat.setEnabled(true);
            rdNTSC.setEnabled(true);
            rdPAL.setEnabled(true);
            lblAspectRatio.setEnabled(true);
            rd4_3.setEnabled(true);
            rd16_9.setEnabled(true);
            chkMenu.setEnabled(true);
        }
        enableStartButton();
    }

    //GEN-LAST:event_menuRd_IgnoreCapStateChanged
    private //GEN-FIRST:event_txtOutputDirFocusLost
    void //GEN-FIRST:event_txtOutputDirFocusLost
    txtOutputDirFocusLost(//GEN-FIRST:event_txtOutputDirFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtOutputDirFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtOutputDirFocusLost
    private //GEN-FIRST:event_txtTitleFocusLost
    void //GEN-FIRST:event_txtTitleFocusLost
    txtTitleFocusLost(//GEN-FIRST:event_txtTitleFocusLost
    java.awt.event.FocusEvent evt) {
        //GEN-HEADEREND:event_txtTitleFocusLost
        enableStartButton();
    }

    //GEN-LAST:event_txtTitleFocusLost
    private //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    void //GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    btnOpen_OutputDirKeyTyped(//GEN-FIRST:event_btnOpen_OutputDirKeyTyped
    java.awt.event.KeyEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirKeyTyped
    private //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    void //GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    btnOpen_OutputDirMouseClicked(//GEN-FIRST:event_btnOpen_OutputDirMouseClicked
    java.awt.event.MouseEvent evt) {
        //GEN-HEADEREND:event_btnOpen_OutputDirMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtOutputDir.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_OutputDirMouseClicked
    private //GEN-FIRST:event_spnSecondsStateChanged
    void //GEN-FIRST:event_spnSecondsStateChanged
    spnSecondsStateChanged(//GEN-FIRST:event_spnSecondsStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnSecondsStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnSecondsStateChanged
    private //GEN-FIRST:event_spnMinutesStateChanged
    void //GEN-FIRST:event_spnMinutesStateChanged
    spnMinutesStateChanged(//GEN-FIRST:event_spnMinutesStateChanged
    javax.swing.event.ChangeEvent evt) {
        //GEN-HEADEREND:event_spnMinutesStateChanged
        enableStartButton();
    }

    //GEN-LAST:event_spnMinutesStateChanged
    private void btnStartKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnStartKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER) {
            try {
                /* 
                 * Automatically save the configuration in the users ~/.dvd-homevideo
                 * directory.  This way if they forget to click on the Save button in
                 * the File menu, it will still be saved once they start capturing 
                 * from their camcorder. 
                 */
                WriteSession();
            } catch (IOException e) {
            }
            blnBegin = true;
            btnPlay.setEnabled(false);
        }
    }

    //GEN-LAST:event_btnStartKeyTyped
    private void btnExitKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnExitKeyTyped
        if (evt.getKeyChar() == evt.VK_ENTER)
            ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitKeyTyped
    private void menuChkThreadItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuChkThreadItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuChkThreadItemStateChanged
    private void menuAboutMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuAboutMousePressed
        MessageBox(""dvd-homevideo, version 0.4\n"" + ""Created by: Shane Santner"", 1);
    }

    //GEN-LAST:event_menuAboutMousePressed
    /**
     * This is the code that handles the user clicking the Exit button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnExitMouseClicked
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_btnExitMouseClicked
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_16_9ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_16_9ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_16_9ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRd_4_3ItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRd_4_3ItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRd_4_3ItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdPALItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdPALItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdPALItemStateChanged
    /**
     * This is the code that handles the user changing the state of one
     * of the menu radio buttions.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void menuRdNTSCItemStateChanged(java.awt.event.ItemEvent evt) {
        //GEN-FIRST:event_menuRdNTSCItemStateChanged
        WriteProjProperties();
    }

    //GEN-LAST:event_menuRdNTSCItemStateChanged
    /**
     * This is the code that handles the user clicking the Play button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnPlayMouseClicked
        /*
         * Try to play the DVD in kaffeine first, if that fails then
         * try xine next.  TODO Need to also add code for mplayer as well.
         */
        try {
            String[] cmd = { ""kaffeine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""xine"", ""dvd:"" + strOutputDir + ""/DVD/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have xine or kaffeine installed.\n"", 1);
            }
        }
    }

    //GEN-LAST:event_btnPlayMouseClicked
    /**
     * This is the code that handles the user clicking on the SubmitBug button
     * in the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuBugMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuBugMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://sourceforge.net/tracker/?func=add&group_id=129878&atid=716141\n"" + ""in the address bar to submit a bug for dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuBugMousePressed
    /**
     * If you don't need to recapture video from the camcorder because of
     * an error later in the program, then you can check this box in the Tools
     * menu and this will allow you to not have to recapture.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you don't need to recapture video or retranscode the video to DVD format
     * because of an error later in the program, then you can check this box in
     * the Tools menu and this will allow you to not have to recapture or retranscode.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * If you only need to rerun dvd-author then you can check this box in
     * the Tools menu.
     * @param   evt    The mousePressed event handled by this method
     */
    /**
     * This is the code that handles the user clicking the Open button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuOpenMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuOpenMousePressed
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo"");
        fcMenuOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fcMenuOpen.addChoosableFileFilter(new CustomFileFilter("".xml""));
        fcMenuOpen.setCurrentDirectory(home);
        int returnVal = fcMenuOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            ReadSession(fcMenuOpen.getSelectedFile().getPath());
        enableStartButton();
    }

    //GEN-LAST:event_menuOpenMousePressed
    /**
     * This is the code that handles the user clicking the Save button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuSaveMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuSaveMousePressed
        /* 
         * The default action is to call WriteSession to store all of the 
         * GUI widget information for later retrieval.
         */
        try {
            WriteSession();
        } catch (IOException e) {
        }
    }

    //GEN-LAST:event_menuSaveMousePressed
    /**
     * This is the code that handles the user clicking the dvd-homevideo website
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuInternetMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuInternetMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuInternetMousePressed
    /**
     * This is the code that handles the user clicking the README file
     * button from the Help menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuREADMEMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuREADMEMousePressed
        /* Open a web browser pointing to the hard coded link */
        try {
            String[] cmd = { ""firefox"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
            Process p = Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            try {
                String[] cmd = { ""konqueror"", ""http://dvd-homevideo.sourceforge.net/README.html"" };
                Process p = Runtime.getRuntime().exec(cmd);
            } catch (IOException io) {
                MessageBox(""It appears that you do not have firefox or konqueror installed.\n"" + ""Open up your favorite web browser and paste:\n"" + ""http://dvd-homevideo.sourceforge.net/README.html\n"" + ""in the address bar for help with running dvd-homevideo."", 1);
            }
        }
    }

    //GEN-LAST:event_menuREADMEMousePressed
    /**
     * This is the code that handles the user clicking the Exit button
     * from the File menu.
     * @param   evt    The mousePressed event handled by this method
     */
    private void menuExitMousePressed(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_menuExitMousePressed
        /* TODO Write properties of PAL/NTSC and 4:3/16:9 to properties file */
        ExitDVDHomevideo();
    }

    //GEN-LAST:event_menuExitMousePressed
    /**
     * This is the code that handles the user clicking the Start button.
     * @param   evt    The mouseClicked event handled by this method
     */
    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnStartMouseClicked
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This way if they forget to click on the Save button in
             * the File menu, it will still be saved once they start capturing 
             * from their camcorder. 
             */
            WriteSession();
        } catch (IOException e) {
        }
        blnBegin = true;
        btnPlay.setEnabled(false);
    }

    //GEN-LAST:event_btnStartMouseClicked
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for a title file to use for dvd-menu.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileKeyTyped
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to store
     * everything in.
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate an
     * audio file.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioKeyTyped
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioKeyTyped
    /**
     * This is the code that handles the user typing Return on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureKeyTyped
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkMenuKeyTyped
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        } else {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkMenuKeyTyped
    /**
     * This is the code that handles the user typing the Space bar
     * on the check box for the quality group of radio buttons
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityKeyTyped(java.awt.event.KeyEvent evt) {
        //GEN-FIRST:event_chkQualityKeyTyped
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        } else {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        }
    }

    //GEN-LAST:event_chkQualityKeyTyped
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate a
     * picture in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_PictureMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_PictureMouseClicked
        if (chkMenu.isSelected() == true) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtPicture.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_PictureMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to locate an
     * audio file in.
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_AudioMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_AudioMouseClicked
        if (chkMenu.isSelected()) {
            fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fcOpen.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION)
                txtAudio.setText(fcOpen.getSelectedFile().getPath());
        }
    }

    //GEN-LAST:event_btnOpen_AudioMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for an output directory to store
     * all of their files in
     * @param   evt    The KeyTyped event handled by this method
     */
    /**
     * This is the code that handles the user clicking on the
     * Open button to search for a title file to be used for
     * the background menu of the DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void btnOpen_TextFileMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_btnOpen_TextFileMouseClicked
        fcOpen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fcOpen.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION)
            txtTextFile.setText(fcOpen.getSelectedFile().getPath());
    }

    //GEN-LAST:event_btnOpen_TextFileMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to select the quality of video conversion for
     * their DVD
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkQualityMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkQualityMouseClicked
        if (chkQuality.isSelected()) {
            rdSuper.setEnabled(true);
            rdGood.setEnabled(true);
            rdAverage.setEnabled(true);
        } else {
            rdSuper.setEnabled(false);
            rdGood.setEnabled(false);
            rdAverage.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkQualityMouseClicked
    /**
     * This is the code that handles the user clicking on the
     * check box to specify details for the DVD menu
     * @param   evt    The KeyTyped event handled by this method
     */
    private void chkMenuMouseClicked(java.awt.event.MouseEvent evt) {
        //GEN-FIRST:event_chkMenuMouseClicked
        if (chkMenu.isSelected()) {
            lblPicture.setEnabled(true);
            txtPicture.setEnabled(true);
            btnOpen_Picture.setEnabled(true);
            lblAudio.setEnabled(true);
            txtAudio.setEnabled(true);
            btnOpen_Audio.setEnabled(true);
        } else {
            lblPicture.setEnabled(false);
            txtPicture.setEnabled(false);
            btnOpen_Picture.setEnabled(false);
            lblAudio.setEnabled(false);
            txtAudio.setEnabled(false);
            btnOpen_Audio.setEnabled(false);
        }
    }

    //GEN-LAST:event_chkMenuMouseClicked
    public void enableStartButton() {
        int tempMinutes, tempSeconds, tempTotal;
        String tempStrTitle, tempStrOutputDir;
        /* First, load the values from the form into local variables */
        tempMinutes = ((Integer) spnMinutes.getValue()).intValue();
        tempSeconds = ((Integer) spnSeconds.getValue()).intValue();
        tempTotal = tempSeconds + tempMinutes;
        tempStrTitle = txtTitle.getText();
        tempStrOutputDir = txtOutputDir.getText();
        /*
         * Now do the error checking.  Here we look for a capture time
         * that is greater than zero and less than 65 minutes 
         */
        if (tempTotal >= 1 && !tempStrOutputDir.equals("""") && !tempStrTitle.equals("""")) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else if (!tempStrOutputDir.equals("""") && !tempStrTitle.equals("""") && (menuRd_IgnoreCap.isSelected() || menuRd_IgnoreCapConv.isSelected() || menuRd_IgnoreCapConvMenu.isSelected())) {
            strOutputDir = txtOutputDir.getText() + ""/"" + txtTitle.getText();
            btnStart.setEnabled(true);
        } else
            btnStart.setEnabled(false);
    }

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules() {
        try {
            String line;
            String modules = ""cat /proc/modules | grep raw1394"";
            String[] module_cmd = { ""/bin/sh"", ""-c"", modules };
            Process p = Runtime.getRuntime().exec(module_cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            line = in.readLine();
            p.waitFor();
            if (line == null)
                return false;
            else
                return true;
        } catch (Exception ioe) {
            /* If we have made it here then the module is not loaded */
            return false;
        }
    }

    /**
     * On startup, checks to ensure that all dependent programs are installed
     * @param   Prog[]  List of dependent programs needed for dvd-homevideo
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean checkForProg(String[] Prog) {
        /* Declare local variables */
        int i = 0;
        int j = 0;
        String build_list = """";
        String[] uninstalled = new String[Prog.length];
        while (true) {
            try {
                /* 
                 * Walk through the list of programs needed for dvd-homevideo
                 * to operate correctly.
                 */
                while (i < Prog.length) {
                    /* 
                     * This is how I test for a program.  I simple try to 
                     * execute the application, if it fails then the software
                     * jumps to the catch block and I know that the program
                     * is either not installed or not in the users path.
                     */
                    Process p = Runtime.getRuntime().exec(Prog[i]);
                    /* 
                     * If I make it here then the program exists and I need to
                     * kill it.
                     */
                    p.destroy();
                    i++;
                }
                /* Check for any uninstalled programs */
                for (i = 0; i < uninstalled.length; i++) {
                    /* If not null then add to the list */
                    if (uninstalled[i] != null)
                        build_list += uninstalled[i] + ""\n"";
                }
                /* 
                 * If the first element is null, then all programs are 
                 * installed correctly.
                 */
                if (uninstalled[0] == null)
                    return true;
                else
                    /* Otherwise tell the user what they are missing */
                    MessageBox(""The following programs are not installed or not in "" + ""your path!\n"" + build_list, 0);
                return false;
            } catch (IOException ioe) {
                /* Add the missing program to the uninstalled array */
                uninstalled[j] = Prog[i];
                i++;
                j++;
            }
        }
    }

    /**
     * Displays a message box with the supplied text and yes/no options
     * @param   message    The message to display in the box
     */
    public int MessageBox(String message) {
        return JOptionPane.showConfirmDialog(null, message, ""dvd-homevideo"", JOptionPane.YES_NO_OPTION);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     */
    public void MessageBox(String message, int type) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type);
    }

    /**
     * Displays a message box with the supplied text and type
     * @param   message    The message to display in the box
     * @param   type       The type of message (Info, Warning or Error)
     * @param   picture    Picture to display in the MessageBox
     */
    public void MessageBox(String message, int type, String picture) {
        JOptionPane.showMessageDialog(null, message, ""dvd-homevideo"", type, new javax.swing.ImageIcon(getClass().getResource(picture)));
    }

    /**
     * Check dvd-homevideo for runtime errors
     * @param   fileName    This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return   A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName) {
        String line;
        StringTokenizer st;
        String testToken;
        boolean error = false;
        /*
         * Need to parse through the supplies file and look for any
         * instances of the words 'error' or 'broken'.  If found, this
         * is treated as a run-time error of one of the dependent programs
         * that dvd-homevideo relies on.
         */
        try {
            BufferedReader in = new BufferedReader(new FileReader(fileName));
            while ((line = in.readLine()) != null) {
                /* Check for a specific burn error */
                if (line.equals("":-( /dev/dvd: media is not recognized as recordable DVD: 9"")) {
                    MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                    return true;
                }
                /*
                 * Need to catch all instances of 'error' or 'broken'.  This
                 * includes cases such as:
                 * **Error:
                 * error~
                 * Broken pipe
                 * etc, etc, etc.  We need to catch ALL instances.
                 */
                st = new StringTokenizer(line, ""*,;:'-~\t "");
                while (st.hasMoreTokens()) {
                    testToken = st.nextToken();
                    if (// ||
                    testToken.equalsIgnoreCase(""Error"")) //testToken.equalsIgnoreCase(""Broken""))
                    {
                        MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                        error = true;
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""Can not find "" + fileName + ""\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        return error;
    }

    /**
     * Update the Status textbox
     * @param   typeColor   red, green, or grey
     * @param   typeUpdate  Values should be PASS, FAIL, Status
     */
    public void UpdateStatus(Color typeColor, String typeUpdate) {
        /* 
         * Set the background and text to let the user know that
         * dvd-homevideo failed
         */
        txtStatus.setBackground(typeColor);
        txtStatus.setText(typeUpdate);
        if (typeUpdate.equals(""FAIL""))
            txtStatus.setToolTipText(""Look at dvd-homevideo.err and files"" + "" in the log directory for possible"" + "" reasons why dvd-homevideo failed."");
        /* 
         * If we need to wait for user input because dvd-homevideo
         * has completed...either because of passing or failing then
         * set blnBegin to false.
         */
        if (!typeUpdate.equals(""Status""))
            blnBegin = false;
    }

    /**
     * This method should be called every time the application exits normally.  This allows the
     * current session to be saved before quiting dvd-homevideo.
     */
    public void ExitDVDHomevideo() {
        try {
            /* 
             * Automatically save the configuration in the users ~/.dvd-homevideo
             * directory.  This should be the only place in the project where System.exit(0) is called. 
             */
            WriteSession();
            WriteProjProperties();
            System.exit(0);
        } catch (IOException e) {
        }
    }

    /**
     * This method retrieves user specific information from the
     * properties xml file in the users ~/.dvd-homevideo directory
     */
    public void ReadProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        String line, token;
        StringTokenizer st;
        try {
            /* 
             * Read the xml properties file and set widgets on the 
             * form accordingly
             */
            BufferedReader reader = new BufferedReader(new FileReader(home));
            while ((line = reader.readLine()) != null) {
                st = new StringTokenizer(line, ""<>"");
                while (st.hasMoreTokens()) {
                    token = st.nextToken();
                    if (token.equals(""menuRdNTSC"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRdNTSC.setSelected(Boolean.parseBoolean(token));
                        menuRdPAL.setSelected(!Boolean.parseBoolean(token));
                        rdNTSC.setSelected(menuRdNTSC.isSelected());
                        rdPAL.setSelected(menuRdPAL.isSelected());
                    } else if (token.equals(""menuRd_4_3"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuRd_4_3.setSelected(Boolean.parseBoolean(token));
                        menuRd_16_9.setSelected(!Boolean.parseBoolean(token));
                        rd4_3.setSelected(menuRd_4_3.isSelected());
                        rd16_9.setSelected(menuRd_16_9.isSelected());
                    } else if (token.equals(""menuChkThread"")) {
                        line = reader.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        menuChkThread.setSelected(Boolean.parseBoolean(token));
                    }
                }
            }
            reader.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in ReadProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * This method stores user specific information in a properties xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteProjProperties() {
        File home = new File(System.getProperty(""user.home"") + ""/.dvd-homevideo/properties"");
        try {
            /* Write/rewrite the xml properties file */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home));
            writer.write(""<dvd-homevideo properties>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRdNTSC.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRdNTSC>"");
            writer.newLine();
            writer.write(""\t\t<menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuRd_4_3.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuRd_4_3>"");
            writer.newLine();
            writer.write(""\t</JRadioButonMenuItem>"");
            writer.newLine();
            writer.write(""\t<JCheckBoxMenuItem>"");
            writer.newLine();
            writer.write(""\t\t<menuChkThread>"");
            writer.newLine();
            writer.write(""\t\t\t<selected>"" + menuChkThread.isSelected() + ""</selected>"");
            writer.newLine();
            writer.write(""\t\t</menuChkThread>"");
            writer.newLine();
            writer.write(""\t</JCheckBoxMenuItem>"");
            writer.newLine();
            writer.close();
            /* Update the states on the form */
            rdNTSC.setSelected(menuRdNTSC.isSelected());
            rdPAL.setSelected(menuRdPAL.isSelected());
            rd4_3.setSelected(menuRd_4_3.isSelected());
            rd16_9.setSelected(menuRd_16_9.isSelected());
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error in WriteProjectProperties in GUI.java\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Opens a previous dvd-homevideo session by reading an xml file
     * @param   xmlPath    Path to the xml file
     */
    public void ReadSession(String xmlPath) {
        String line, token;
        StringTokenizer st;
        boolean done = false;
        int i;
        /* 
         * Define an exhaustive list of the widgets that we need to track
         * on the form.
         */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            BufferedReader in = new BufferedReader(new FileReader(xmlPath));
            line = in.readLine();
            st = new StringTokenizer(line, ""<>"");
            token = st.nextToken();
            /* 
             * If the first line does not contain dvd-homevideo then
             * we have a bad xml file.
             */
            if (!token.equals(""dvd-homevideo"")) {
                MessageBox(""Invalid File Format!"", 1);
                done = true;
            }
            while (((line = in.readLine()) != null) && !done) {
                st = new StringTokenizer(line, ""<>"");
                if (!st.nextToken().equals(""/dvd-homevideo""))
                    token = st.nextToken();
                /* Read in the variables and set them on the form */
                if (token.equals(""JLabel"")) {
                    for (i = 0; i < lbl_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        lbl_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JSpinner"")) {
                    for (i = 0; i < spn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        spn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        // SDK 1.4 didn't like this
                        spn_widgets[i].setValue(Integer.parseInt(token));
                        //spn_widgets[i].getModel().setValue((Object)token);
                        in.readLine();
                    }
                } else if (token.equals(""JCheckBox"")) {
                    for (i = 0; i < chk_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chk_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButton"")) {
                    for (i = 0; i < rd_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        rd_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JTextField"")) {
                    for (i = 0; i < txt_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        txt_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        if (!token.substring(1, 4).equals(""tex""))
                            txt_widgets[i].setText(token);
                        in.readLine();
                    }
                } else if (token.equals(""JButton"")) {
                    for (i = 0; i < btn_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        btn_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else if (token.equals(""JRadioButtonMenuItem"")) {
                    for (i = 0; i < chkMenu_widgets.length; i++) {
                        in.readLine();
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setEnabled(Boolean.parseBoolean(token));
                        line = in.readLine();
                        st = new StringTokenizer(line, ""<>"");
                        st.nextToken();
                        st.nextToken();
                        token = st.nextToken();
                        chkMenu_widgets[i].setSelected(Boolean.parseBoolean(token));
                        in.readLine();
                    }
                } else {
                    lblCapture.setEnabled(false);
                    lblConvert.setEnabled(false);
                    lblAuthor.setEnabled(false);
                    lblCaptureProg.setEnabled(false);
                    lblConvertProg.setEnabled(false);
                    lblAuthorProg.setEnabled(false);
                    prgCapture.setEnabled(false);
                    prgConvert.setEnabled(false);
                    prgAuthor.setEnabled(false);
                    lblCaptureProg.setText(""0%"");
                    lblConvertProg.setText(""0%"");
                    lblAuthorProg.setText(""0%"");
                }
            }
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while reading the xml file"" + ""\nfor the requested dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /**
     * Saves the state of all widgets on the GUI form in an xml file
     * in the users ~/.dvd-homevideo directory
     */
    public void WriteSession() throws IOException {
        int i;
        /* Again, we must have this exhaustive list of widgets to parse through */
        javax.swing.JLabel[] lbl_widgets = { lblMinutes, lblSeconds, lblFormat, lblAspectRatio, lblPicture, lblAudio, lblOutputDir, lblTitle, lblTextFile };
        javax.swing.JSpinner[] spn_widgets = { spnMinutes, spnSeconds };
        javax.swing.JCheckBox[] chk_widgets = { chkQuality, chkMenu, chkBurn };
        javax.swing.JRadioButton[] rd_widgets = { rdSuper, rdGood, rdAverage, rdNTSC, rdPAL, rd4_3, rd16_9 };
        javax.swing.JTextField[] txt_widgets = { txtPicture, txtAudio, txtOutputDir, txtTitle, txtTextFile };
        javax.swing.JButton[] btn_widgets = { btnOpen_Picture, btnOpen_Audio, btnOpen_OutputDir, btnOpen_TextFile };
        javax.swing.JRadioButtonMenuItem[] chkMenu_widgets = { menuRd_IgnoreCap, menuRd_IgnoreCapConv, menuRd_IgnoreCapConvMenu };
        try {
            /* Write the file to the users ~/.dvd-homevideo directory */
            String home = System.getProperty(""user.home"");
            File msgboxSave = new File(home + ""/.dvd-homevideo/properties"");
            BufferedWriter msgboxSaveWriter = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/properties""));
            msgboxSaveWriter.close();
            /* Now write the xml file to the users home/dvd-homevideo directory */
            BufferedWriter writer = new BufferedWriter(new FileWriter(home + ""/.dvd-homevideo/"" + txtTitle.getText() + "".xml""));
            writer.write(""<dvd-homevideo>"");
            writer.newLine();
            writer.write(""\t<JLabel>"");
            writer.newLine();
            for (i = 0; i < lbl_widgets.length; i++) {
                writer.write(""\t\t<"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + lbl_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + lbl_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JLabel>"");
            writer.newLine();
            writer.write(""\t<JSpinner>"");
            writer.newLine();
            for (i = 0; i < spn_widgets.length; i++) {
                writer.write(""\t\t<"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + spn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<value>"" + spn_widgets[i].getValue() + ""</value>"");
                writer.newLine();
                writer.write(""\t\t</"" + spn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JSpinner>"");
            writer.newLine();
            writer.write(""\t<JCheckBox>"");
            writer.newLine();
            for (i = 0; i < chk_widgets.length; i++) {
                writer.write(""\t\t<"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chk_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chk_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chk_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JCheckBox>"");
            writer.newLine();
            writer.write(""\t<JRadioButton>"");
            writer.newLine();
            for (i = 0; i < rd_widgets.length; i++) {
                writer.write(""\t\t<"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + rd_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + rd_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + rd_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButton>"");
            writer.newLine();
            writer.write(""\t<JTextField>"");
            writer.newLine();
            for (i = 0; i < txt_widgets.length; i++) {
                writer.write(""\t\t<"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + txt_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<text>"" + txt_widgets[i].getText() + ""</text>"");
                writer.newLine();
                writer.write(""\t\t</"" + txt_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JTextField>"");
            writer.newLine();
            writer.write(""\t<JButton>"");
            writer.newLine();
            for (i = 0; i < btn_widgets.length; i++) {
                writer.write(""\t\t<"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + btn_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t</"" + btn_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JButton>"");
            writer.newLine();
            writer.write(""\t<JRadioButtonMenuItem>"");
            writer.newLine();
            for (i = 0; i < chkMenu_widgets.length; i++) {
                writer.write(""\t\t<"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
                writer.write(""\t\t\t<enabled>"" + chkMenu_widgets[i].isEnabled() + ""</enabled>"");
                writer.newLine();
                writer.write(""\t\t\t<selected>"" + chkMenu_widgets[i].isSelected() + ""</selected>"");
                writer.newLine();
                writer.write(""\t\t</"" + chkMenu_widgets[i].getName() + "">"");
                writer.newLine();
            }
            writer.write(""\t</JRadioButtonMenuItem>"");
            writer.newLine();
            writer.write(""</dvd-homevideo>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error while writing the xml file"" + ""\nfor this dvd-homevideo session.\n"" + ex.toString(), 0);
            ex.printStackTrace();
        }
    }

    /*
    public void setIcon()
    {
        javax.swing.ImageIcon image = new javax.swing.ImageIcon(getClass().getResource(""/logo_32x32.png""));
        setIconImage(new javax.swing.ImageIcon(image.getImage()));
    }
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;

    private javax.swing.JButton btnOpen_Audio;

    private javax.swing.JButton btnOpen_OutputDir;

    private javax.swing.JButton btnOpen_Picture;

    private javax.swing.JButton btnOpen_TextFile;

    protected javax.swing.JButton btnPlay;

    private javax.swing.JButton btnStart;

    protected javax.swing.JCheckBox chkBurn;

    protected javax.swing.JCheckBox chkMenu;

    protected javax.swing.JCheckBox chkQuality;

    private javax.swing.JFileChooser fcMenuOpen;

    private javax.swing.JFileChooser fcOpen;

    private javax.swing.ButtonGroup grpAspectRatio;

    private javax.swing.ButtonGroup grpFormat;

    private javax.swing.ButtonGroup grpMenuAspectRatio;

    private javax.swing.ButtonGroup grpMenuFormat;

    private javax.swing.ButtonGroup grpMenuIgnore;

    private javax.swing.ButtonGroup grpMenuMode;

    private javax.swing.ButtonGroup grpQuality;

    private javax.swing.JLabel lblAspectRatio;

    private javax.swing.JLabel lblAudio;

    protected javax.swing.JLabel lblAuthor;

    protected javax.swing.JLabel lblAuthorProg;

    protected javax.swing.JLabel lblCapture;

    protected javax.swing.JLabel lblCaptureProg;

    protected javax.swing.JLabel lblConvert;

    protected javax.swing.JLabel lblConvertProg;

    private javax.swing.JLabel lblFormat;

    private javax.swing.JLabel lblMinutes;

    private javax.swing.JLabel lblOutputDir;

    private javax.swing.JLabel lblPicture;

    private javax.swing.JLabel lblSeconds;

    private javax.swing.JLabel lblTextFile;

    private javax.swing.JLabel lblTitle;

    private javax.swing.JMenuItem menuAbout;

    protected javax.swing.JMenuBar menuBarMain;

    private javax.swing.JMenuItem menuBug;

    protected javax.swing.JCheckBoxMenuItem menuChkThread;

    protected javax.swing.JMenuItem menuExit;

    protected javax.swing.JMenu menuFile;

    protected javax.swing.JMenu menuHelp;

    protected javax.swing.JMenuItem menuInternet;

    protected javax.swing.JMenuItem menuOpen;

    private javax.swing.JMenu menuProjProp;

    protected javax.swing.JMenuItem menuREADME;

    private javax.swing.JRadioButtonMenuItem menuRdNTSC;

    private javax.swing.JRadioButtonMenuItem menuRdPAL;

    private javax.swing.JRadioButtonMenuItem menuRd_16_9;

    private javax.swing.JRadioButtonMenuItem menuRd_4_3;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCap;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConv;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreCapConvMenu;

    protected javax.swing.JRadioButtonMenuItem menuRd_IgnoreNone;

    protected javax.swing.JMenuItem menuSave;

    protected javax.swing.JMenu menuTools;

    private javax.swing.JPanel pnlGUI;

    protected javax.swing.JProgressBar prgAuthor;

    protected javax.swing.JProgressBar prgCapture;

    protected javax.swing.JProgressBar prgConvert;

    protected javax.swing.JRadioButton rd16_9;

    protected javax.swing.JRadioButton rd4_3;

    protected javax.swing.JRadioButton rdAverage;

    protected javax.swing.JRadioButton rdGood;

    protected javax.swing.JRadioButton rdNTSC;

    protected javax.swing.JRadioButton rdPAL;

    protected javax.swing.JRadioButton rdSuper;

    private javax.swing.JScrollPane spTextArea;

    protected javax.swing.JSpinner spnMinutes;

    protected javax.swing.JSpinner spnSeconds;

    private javax.swing.JSeparator sprAspectRatio;

    private javax.swing.JSeparator sprCapConvert;

    private javax.swing.JSeparator sprIgnore;

    private javax.swing.JSeparator sprMenuAuthor;

    private javax.swing.JSeparator sprMenuFormatAspect;

    private javax.swing.JSeparator sprMenuThread;

    protected javax.swing.JSeparator sprOpen;

    protected javax.swing.JSeparator sprSave;

    protected javax.swing.JTextArea txtAreaOutput;

    protected javax.swing.JTextField txtAudio;

    protected javax.swing.JTextField txtOutputDir;

    protected javax.swing.JTextField txtPicture;

    protected javax.swing.JTextField txtStatus;

    protected javax.swing.JTextField txtTextFile;

    protected javax.swing.JTextField txtTitle;

    // End of variables declaration//GEN-END:variables
    /* My GUI variable declarations */
    protected javax.swing.SpinnerNumberModel spnSecondsSize = new javax.swing.SpinnerNumberModel(0, 0, 59, 1);

    protected javax.swing.SpinnerNumberModel spnMinutesSize = new javax.swing.SpinnerNumberModel(0, 0, 64, 1);
}
","// GUI_3Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.
*/
class GUI_3Test {","// GUI_3Test.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.
*/
class GUI_3Test {
"
cmpl-6uAQ6nXsuxZrw6Up81cBlCN7WF9nM,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Menu_0Test.java,49.18339943885803,length,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Creates a default instance of Menu
     */
    public Menu() {
    }

    /**
     * Creates a new instance of Menu with the title, text file path and PAL/NTSC format
     * passed as parameters.
     * @param   title           The title of the DVD
     * @param   TextFilePath    The path to the title file
     * @param   isPAL           Is this a PAL or NTSC DVD
     */
    public Menu(String title, String TextFilePath, boolean isPAL, GUI DVD_GUI) {
        strTitle = title;
        strTextFilePath = TextFilePath;
        pal_menu = isPAL;
        m_GUI = DVD_GUI;
    }

    /**
     * Creates a new instance of Menu with the title, text file path, PAL/NTSC format,
     * menu picture path and audio path passed as parameters.
     * @param   title           The title of the DVD
     * @param   picPath         The path to the background picture of the DVD Menu
     * @param   audioPath       The path to the background audio of the DVD Menu
     * @param   TextFilePath    The path to the title file
     * @param   isPAL           Is this a PAL or NTSC DVD
     */
    public Menu(String title, String picPath, String audioPath, String TextFilePath, boolean isPAL, GUI DVD_GUI) {
        strTitle = title;
        strPicPath = picPath;
        strAudioPath = audioPath;
        strTextFilePath = TextFilePath;
        pal_menu = isPAL;
        m_GUI = DVD_GUI;
    }

    /**
     * Menu Member Variables
     */
    private String strTitle;

    private String strPicPath;

    private String strAudioPath;

    private String strTextFilePath;

    private String dvd_menu = ""dvd-menu"";

    private String[] titles = new String[50];

    private boolean pal_menu;

    private String baseErr = ""Menu Error - "";

    private String[] video_files;

    private GUI m_GUI;

    private Thread m_Thread;

    private boolean m_Error;

    /**
     * Used to instantiate a new thread and to perform error checking.
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        /* Create and start the new thread */
        m_Thread = new Thread(this);
        m_Thread.start();
        try {
            m_Thread.join();
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        /* 
         * If an error occurred while executing DV_Capture then m_Error will be set
         * to true.  Also check the log file for any evidence of an error.
         */
        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/dvd-menu.log""));
    }

    /**
     * Implements the run() method of the Runnable interface.  Makes multi-threading
     * possible.
     */
    public void run() {
        DVDMainMenu();
    }

    /**
     * Creates DVD menu using optional picture and music by calling dvd-menu
     * @param   m_GUI This is the GUI object used to control the form
     * @return  A boolean to determine if an error occurred in the function
     */
    public void DVDMainMenu() {
        /* First we need to extract all of the .vob files that were
         * created using transcode and store these file names in 
         * the video_files array. */
        File ListDir = new File(m_GUI.strOutputDir);
        FilenameFilter filter = new FilenameFilter() {

            boolean ret_val = true;

            public boolean accept(File dir, String name) {
                if (name.endsWith(""vob"")) {
                    if (!name.equals(""menu.vob""))
                        ret_val = true;
                    else
                        ret_val = false;
                } else
                    ret_val = false;
                return ret_val;
            }
        };
        /* This is where the .vob files actually get stored in the array */
        video_files = ListDir.list(filter);
        /* Enable the Menu progress portion of the GUI */
        m_GUI.lblAuthor.setEnabled(true);
        m_GUI.lblAuthorProg.setEnabled(true);
        m_GUI.prgAuthor.setEnabled(true);
        m_GUI.prgAuthor.setIndeterminate(true);
        /* Add to the dvd-menu string based on user supplied parameters */
        String menu_options;
        if (strPicPath == null && strAudioPath == null)
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir;
        else if (strPicPath.equals("""") && strAudioPath != null)
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -a "" + strAudioPath;
        else if (strPicPath != null && strAudioPath.equals(""""))
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -b "" + strPicPath;
        else
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -a "" + strAudioPath + "" -b "" + strPicPath;
        /* First scenario - the user DID NOT supply a title file */
        int i = 0;
        if (strTextFilePath.equals("""") || strTextFilePath == null) {
            while (i < video_files.length) {
                /* Add default naming to the dvd-menu since nothing else was specified */
                menu_options += "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob -t "" + strTitle + ""_"" + (i + 1);
                i++;
            }
        } else /* Otherwise they DID supply a text file, so we need to read from it */
        {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(m_GUI.txtTextFile.getText())));
                String line;
                i = 0;
                /* 
                 * Read in the user supplied title file and store
                 * each line in an array.
                 */
                while ((line = in.readLine()) != null) {
                    titles[i] = line;
                    i++;
                }
                /* Determine the number of lines in the text file */
                int num_blanks = 0;
                for (i = 0; i < titles.length; i++) {
                    if (titles[i].equals(""BLANK""))
                        num_blanks++;
                    if (titles[i].equals(""DONE""))
                        break;
                }
                /* Error check the user supplied text file */
                int num_lines = i;
                if ((num_lines - num_blanks) > 10) {
                    m_GUI.MessageBox(""Your text file can only have a maximum"" + ""of 10 titles!  Please edit your text file and rerun"" + ""dvd-homevideo."", 1);
                    /* 
                     * Can't recover from this user error, so make them start over...
                     * or at least run dvd-menu and dvdauthor again
                     */
                    m_Error = true;
                    ;
                } else if (num_lines == video_files.length) {
                    i = 0;
                    while (i < video_files.length) {
                        /* Look for the keywords BLANK and DONE */
                        if (!titles[i].equals(""BLANK"") && !titles[i].equals(""DONE"")) {
                            menu_options += "" -t "" + titles[i] + "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob"";
                            i++;
                        } else /* If we find DONE, then quit parsing the text file */
                        if (titles[i].equals(""DONE""))
                            break;
                        else {
                            menu_options += "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob"";
                            i++;
                        }
                    }
                } else {
                    m_GUI.MessageBox(""It appears that your text file is not\n"" + ""formatted correctly.  You currently have\n"" + (video_files.length + 1) + "" vob files, \n"" + ""however your text file is showing\n"" + num_lines + "" lines."", 1);
                    /* 
                     * Can't recover from this user error, so make them start over...
                     * or at least run dvd-menu and dvdauthor again
                     */
                    m_Error = true;
                    ;
                }
            } catch (FileNotFoundException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(""Can not find "" + m_GUI.txtTextFile + ""\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (IOException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
        }
        if (pal_menu == true)
            menu_options += "" -p"";
        /* 
         * I don't like this but for some reason dvd-menu requires
         * that I redirect the error stream.  It doesn't care where,
         * it just has to be redirected.  Possibly something to do 
         * with lame?
         */
        // log/dvd-menu.err <2"");
        dvd_menu += (menu_options + "" 2>&1"");
        m_GUI.txtAreaOutput.append(dvd_menu + ""\n"");
        try {
            String[] dvd_menu_cmd = { ""/bin/sh"", ""-c"", dvd_menu };
            Process p = Runtime.getRuntime().exec(dvd_menu_cmd, null, new File(m_GUI.strOutputDir));
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            String line;
            StringTokenizer st;
            /* 
             * Write anything from the input stream for dvd-menu
             * to the txtAreaOutput that the user sees
             */
            while ((line = in.readLine()) != null) {
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (line.equals(""/bin/sh: dvd-menu: command not found"")) {
                    m_GUI.MessageBox(""Could not locate dvd-menu in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                    /* Close all open streams */
                    in.close();
                    //out.close();
                    err_in.close();
                    //err_out.close();
                    /* Indicate that there was an error */
                    m_Error = true;
                }
                st = new StringTokenizer(line);
                if (st.hasMoreTokens()) {
                    /* 
                     * Since dvd-menu makes us redirect the error stream to stdin,
                     * we don't want to waste a ton of time in I/O, so ignore lines
                     * that start with 'Frame#'
                     */
                    if (!st.nextToken().equals(""Frame#"")) {
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                    }
                }
            }
            /*
             * p.waitFor() throws an InterruptedException
             */
            p.waitFor();
            /* move dvd-menu.log into the log directory */
            p = Runtime.getRuntime().exec(""mv dvd-menu.log log/"", null, new File(m_GUI.strOutputDir));
            /* Delete unnecessary output directory created by dvd-menu */
            File CreateOutDir = new File(m_GUI.strOutputDir + ""/dvd_fs"");
            if (CreateOutDir.exists() && CreateOutDir.isDirectory())
                CreateOutDir.delete();
            /* Put in a slight delay to ensure dvd-menu.log closes */
            Thread.sleep(2000);
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            m_Error = true;
        } catch (InterruptedException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
            ex.printStackTrace();
            m_Error = true;
        }
    }

    /**
     * Creates the xml file to pass to dvdauthor
     * @param   m_GUI This is the GUI object used to control the form
     */
    public boolean createXML() {
        File xmlFile = new File(m_GUI.strOutputDir + ""/vmgm.xml"");
        File ListDir = new File(m_GUI.strOutputDir);
        /* 
         * Need to find all vob files, but don't want to include menu.vob
         * which was created by dvd-menu.
         */
        FilenameFilter filter = new FilenameFilter() {

            boolean ret_val = true;

            public boolean accept(File dir, String name) {
                if (name.endsWith(""vob"")) {
                    if (!name.equals(""menu.vob""))
                        ret_val = true;
                    else
                        ret_val = false;
                } else
                    ret_val = false;
                return ret_val;
            }
        };
        video_files = ListDir.list(filter);
        /* Write the xml file.  It's not pretty, but it works. */
        int i;
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));
            writer.write(""<dvdauthor dest=\"""" + m_GUI.strOutputDir + ""/DVD/\"" jumppad=\""0\"">"");
            writer.newLine();
            writer.write(""\t<vmgm>"");
            writer.newLine();
            writer.write(""\t\t<menus>"");
            writer.newLine();
            writer.write(""\t\t\t<pgc entry=\""title\"" >"");
            writer.newLine();
            writer.write(""\t\t\t\t<vob file=\"""" + m_GUI.strOutputDir + ""/menu.vob\"" pause=\""inf\"" />"");
            writer.newLine();
            if (titles[0] == null) {
                for (i = 1; i <= video_files.length; i++) {
                    writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                    writer.newLine();
                }
            } else {
                for (i = 1; i < titles.length; i++) {
                    if (!titles[i - 1].equals(""BLANK"") && !titles[i - 1].equals(""DONE"")) {
                        writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                        writer.newLine();
                    } else if (titles[i - 1].equals(""DONE""))
                        break;
                }
            }
            writer.write(""\t\t\t\t<post> jump vmgm menu 1; </post>"");
            writer.newLine();
            writer.write(""\t\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t\t</menus>"");
            writer.newLine();
            writer.write(""\t</vmgm>"");
            writer.newLine();
            writer.write(""\t<titleset>"");
            writer.newLine();
            writer.write(""\t<titles>"");
            writer.newLine();
            for (i = 1; i < video_files.length; i++) {
                writer.write(""\t\t<pgc>"");
                writer.newLine();
                writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
                writer.newLine();
                writer.write(""\t\t\t<post>jump title "" + (i + 1) + "";</post>"");
                writer.newLine();
                writer.write(""\t\t</pgc>"");
                writer.newLine();
            }
            writer.write(""\t\t<pgc>"");
            writer.newLine();
            writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
            writer.newLine();
            writer.write(""\t\t\t<post>call vmgm menu 1;</post>"");
            writer.newLine();
            writer.write(""\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t</titles>"");
            writer.newLine();
            writer.write(""\t</titleset>"");
            writer.newLine();
            writer.write(""</dvdauthor>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        /* Shouldn't expect to see any errors from this method call. */
        return false;
    }
}
","// Menu_0Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#init()} method.
*/
class Menu_0Test {","// Menu_0Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#init()} method.
*/
class Menu_0Test {

	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu"".
	*/
	@Test
	void testInit_0() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output"".
	*/
	@Test
	void testInit_1() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3"".
	*/
	@Test
	void testInit_2() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -b /home/test/picture.jpg"".
	*/
	@Test
	void testInit_3() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -b /home/test/picture.jpg"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg"".
	*/
	@Test
	void testInit_4() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test'"".
	*/
	@Test
	void testInit_5() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test'"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -p"".
	*/
	@Test
	void testInit_6() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -p"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'"".
	*/
	@Test
	void testInit_7() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -p"".
	*/
	@Test
	void testInit_8() {
		Menu menu = new Menu();
		menu.dvd_menu = ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -p"";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()}
	* <p>
	* This test case checks if the {@link Menu#init()} method returns true when
	* the {@link Menu#dvd_menu} variable is set to ""dvd-menu -c -D -n 'Test' -o /home/test/output -a /home/test/audio.mp3 -b /home/test/picture.jpg -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test' -f /home/test/video.vob -t 'Test'"".
	*/
	@"
cmpl-6uAR9wNKaY0ngaG602nyI9exxTu6J,/EvoSuiteBenchmark/47_dvd-homevideo/src/main/java/Menu_1Test.java,48.3194420337677,length,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Creates a default instance of Menu
     */
    public Menu() {
    }

    /**
     * Creates a new instance of Menu with the title, text file path and PAL/NTSC format
     * passed as parameters.
     * @param   title           The title of the DVD
     * @param   TextFilePath    The path to the title file
     * @param   isPAL           Is this a PAL or NTSC DVD
     */
    public Menu(String title, String TextFilePath, boolean isPAL, GUI DVD_GUI) {
        strTitle = title;
        strTextFilePath = TextFilePath;
        pal_menu = isPAL;
        m_GUI = DVD_GUI;
    }

    /**
     * Creates a new instance of Menu with the title, text file path, PAL/NTSC format,
     * menu picture path and audio path passed as parameters.
     * @param   title           The title of the DVD
     * @param   picPath         The path to the background picture of the DVD Menu
     * @param   audioPath       The path to the background audio of the DVD Menu
     * @param   TextFilePath    The path to the title file
     * @param   isPAL           Is this a PAL or NTSC DVD
     */
    public Menu(String title, String picPath, String audioPath, String TextFilePath, boolean isPAL, GUI DVD_GUI) {
        strTitle = title;
        strPicPath = picPath;
        strAudioPath = audioPath;
        strTextFilePath = TextFilePath;
        pal_menu = isPAL;
        m_GUI = DVD_GUI;
    }

    /**
     * Menu Member Variables
     */
    private String strTitle;

    private String strPicPath;

    private String strAudioPath;

    private String strTextFilePath;

    private String dvd_menu = ""dvd-menu"";

    private String[] titles = new String[50];

    private boolean pal_menu;

    private String baseErr = ""Menu Error - "";

    private String[] video_files;

    private GUI m_GUI;

    private Thread m_Thread;

    private boolean m_Error;

    /**
     * Used to instantiate a new thread and to perform error checking.
     * @return  A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        /* Create and start the new thread */
        m_Thread = new Thread(this);
        m_Thread.start();
        try {
            m_Thread.join();
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        /* 
         * If an error occurred while executing DV_Capture then m_Error will be set
         * to true.  Also check the log file for any evidence of an error.
         */
        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/dvd-menu.log""));
    }

    /**
     * Implements the run() method of the Runnable interface.  Makes multi-threading
     * possible.
     */
    public void run() {
        DVDMainMenu();
    }

    /**
     * Creates DVD menu using optional picture and music by calling dvd-menu
     * @param   m_GUI This is the GUI object used to control the form
     * @return  A boolean to determine if an error occurred in the function
     */
    public void DVDMainMenu() {
        /* First we need to extract all of the .vob files that were
         * created using transcode and store these file names in 
         * the video_files array. */
        File ListDir = new File(m_GUI.strOutputDir);
        FilenameFilter filter = new FilenameFilter() {

            boolean ret_val = true;

            public boolean accept(File dir, String name) {
                if (name.endsWith(""vob"")) {
                    if (!name.equals(""menu.vob""))
                        ret_val = true;
                    else
                        ret_val = false;
                } else
                    ret_val = false;
                return ret_val;
            }
        };
        /* This is where the .vob files actually get stored in the array */
        video_files = ListDir.list(filter);
        /* Enable the Menu progress portion of the GUI */
        m_GUI.lblAuthor.setEnabled(true);
        m_GUI.lblAuthorProg.setEnabled(true);
        m_GUI.prgAuthor.setEnabled(true);
        m_GUI.prgAuthor.setIndeterminate(true);
        /* Add to the dvd-menu string based on user supplied parameters */
        String menu_options;
        if (strPicPath == null && strAudioPath == null)
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir;
        else if (strPicPath.equals("""") && strAudioPath != null)
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -a "" + strAudioPath;
        else if (strPicPath != null && strAudioPath.equals(""""))
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -b "" + strPicPath;
        else
            menu_options = "" -c -D -n '"" + strTitle + ""' -o "" + m_GUI.strOutputDir + "" -a "" + strAudioPath + "" -b "" + strPicPath;
        /* First scenario - the user DID NOT supply a title file */
        int i = 0;
        if (strTextFilePath.equals("""") || strTextFilePath == null) {
            while (i < video_files.length) {
                /* Add default naming to the dvd-menu since nothing else was specified */
                menu_options += "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob -t "" + strTitle + ""_"" + (i + 1);
                i++;
            }
        } else /* Otherwise they DID supply a text file, so we need to read from it */
        {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(m_GUI.txtTextFile.getText())));
                String line;
                i = 0;
                /* 
                 * Read in the user supplied title file and store
                 * each line in an array.
                 */
                while ((line = in.readLine()) != null) {
                    titles[i] = line;
                    i++;
                }
                /* Determine the number of lines in the text file */
                int num_blanks = 0;
                for (i = 0; i < titles.length; i++) {
                    if (titles[i].equals(""BLANK""))
                        num_blanks++;
                    if (titles[i].equals(""DONE""))
                        break;
                }
                /* Error check the user supplied text file */
                int num_lines = i;
                if ((num_lines - num_blanks) > 10) {
                    m_GUI.MessageBox(""Your text file can only have a maximum"" + ""of 10 titles!  Please edit your text file and rerun"" + ""dvd-homevideo."", 1);
                    /* 
                     * Can't recover from this user error, so make them start over...
                     * or at least run dvd-menu and dvdauthor again
                     */
                    m_Error = true;
                    ;
                } else if (num_lines == video_files.length) {
                    i = 0;
                    while (i < video_files.length) {
                        /* Look for the keywords BLANK and DONE */
                        if (!titles[i].equals(""BLANK"") && !titles[i].equals(""DONE"")) {
                            menu_options += "" -t "" + titles[i] + "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob"";
                            i++;
                        } else /* If we find DONE, then quit parsing the text file */
                        if (titles[i].equals(""DONE""))
                            break;
                        else {
                            menu_options += "" -f "" + m_GUI.strOutputDir + ""/"" + video_files[i].substring(0, 11) + "".vob"";
                            i++;
                        }
                    }
                } else {
                    m_GUI.MessageBox(""It appears that your text file is not\n"" + ""formatted correctly.  You currently have\n"" + (video_files.length + 1) + "" vob files, \n"" + ""however your text file is showing\n"" + num_lines + "" lines."", 1);
                    /* 
                     * Can't recover from this user error, so make them start over...
                     * or at least run dvd-menu and dvdauthor again
                     */
                    m_Error = true;
                    ;
                }
            } catch (FileNotFoundException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(""Can not find "" + m_GUI.txtTextFile + ""\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            } catch (IOException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
        }
        if (pal_menu == true)
            menu_options += "" -p"";
        /* 
         * I don't like this but for some reason dvd-menu requires
         * that I redirect the error stream.  It doesn't care where,
         * it just has to be redirected.  Possibly something to do 
         * with lame?
         */
        // log/dvd-menu.err <2"");
        dvd_menu += (menu_options + "" 2>&1"");
        m_GUI.txtAreaOutput.append(dvd_menu + ""\n"");
        try {
            String[] dvd_menu_cmd = { ""/bin/sh"", ""-c"", dvd_menu };
            Process p = Runtime.getRuntime().exec(dvd_menu_cmd, null, new File(m_GUI.strOutputDir));
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            String line;
            StringTokenizer st;
            /* 
             * Write anything from the input stream for dvd-menu
             * to the txtAreaOutput that the user sees
             */
            while ((line = in.readLine()) != null) {
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (line.equals(""/bin/sh: dvd-menu: command not found"")) {
                    m_GUI.MessageBox(""Could not locate dvd-menu in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                    /* Close all open streams */
                    in.close();
                    //out.close();
                    err_in.close();
                    //err_out.close();
                    /* Indicate that there was an error */
                    m_Error = true;
                }
                st = new StringTokenizer(line);
                if (st.hasMoreTokens()) {
                    /* 
                     * Since dvd-menu makes us redirect the error stream to stdin,
                     * we don't want to waste a ton of time in I/O, so ignore lines
                     * that start with 'Frame#'
                     */
                    if (!st.nextToken().equals(""Frame#"")) {
                        m_GUI.txtAreaOutput.append(line + ""\n"");
                        m_GUI.txtAreaOutput.setCaretPosition(m_GUI.txtAreaOutput.getDocument().getLength());
                    }
                }
            }
            /*
             * p.waitFor() throws an InterruptedException
             */
            p.waitFor();
            /* move dvd-menu.log into the log directory */
            p = Runtime.getRuntime().exec(""mv dvd-menu.log log/"", null, new File(m_GUI.strOutputDir));
            /* Delete unnecessary output directory created by dvd-menu */
            File CreateOutDir = new File(m_GUI.strOutputDir + ""/dvd_fs"");
            if (CreateOutDir.exists() && CreateOutDir.isDirectory())
                CreateOutDir.delete();
            /* Put in a slight delay to ensure dvd-menu.log closes */
            Thread.sleep(2000);
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            m_Error = true;
        } catch (InterruptedException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
            ex.printStackTrace();
            m_Error = true;
        }
    }

    /**
     * Creates the xml file to pass to dvdauthor
     * @param   m_GUI This is the GUI object used to control the form
     */
    public boolean createXML() {
        File xmlFile = new File(m_GUI.strOutputDir + ""/vmgm.xml"");
        File ListDir = new File(m_GUI.strOutputDir);
        /* 
         * Need to find all vob files, but don't want to include menu.vob
         * which was created by dvd-menu.
         */
        FilenameFilter filter = new FilenameFilter() {

            boolean ret_val = true;

            public boolean accept(File dir, String name) {
                if (name.endsWith(""vob"")) {
                    if (!name.equals(""menu.vob""))
                        ret_val = true;
                    else
                        ret_val = false;
                } else
                    ret_val = false;
                return ret_val;
            }
        };
        video_files = ListDir.list(filter);
        /* Write the xml file.  It's not pretty, but it works. */
        int i;
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));
            writer.write(""<dvdauthor dest=\"""" + m_GUI.strOutputDir + ""/DVD/\"" jumppad=\""0\"">"");
            writer.newLine();
            writer.write(""\t<vmgm>"");
            writer.newLine();
            writer.write(""\t\t<menus>"");
            writer.newLine();
            writer.write(""\t\t\t<pgc entry=\""title\"" >"");
            writer.newLine();
            writer.write(""\t\t\t\t<vob file=\"""" + m_GUI.strOutputDir + ""/menu.vob\"" pause=\""inf\"" />"");
            writer.newLine();
            if (titles[0] == null) {
                for (i = 1; i <= video_files.length; i++) {
                    writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                    writer.newLine();
                }
            } else {
                for (i = 1; i < titles.length; i++) {
                    if (!titles[i - 1].equals(""BLANK"") && !titles[i - 1].equals(""DONE"")) {
                        writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                        writer.newLine();
                    } else if (titles[i - 1].equals(""DONE""))
                        break;
                }
            }
            writer.write(""\t\t\t\t<post> jump vmgm menu 1; </post>"");
            writer.newLine();
            writer.write(""\t\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t\t</menus>"");
            writer.newLine();
            writer.write(""\t</vmgm>"");
            writer.newLine();
            writer.write(""\t<titleset>"");
            writer.newLine();
            writer.write(""\t<titles>"");
            writer.newLine();
            for (i = 1; i < video_files.length; i++) {
                writer.write(""\t\t<pgc>"");
                writer.newLine();
                writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
                writer.newLine();
                writer.write(""\t\t\t<post>jump title "" + (i + 1) + "";</post>"");
                writer.newLine();
                writer.write(""\t\t</pgc>"");
                writer.newLine();
            }
            writer.write(""\t\t<pgc>"");
            writer.newLine();
            writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
            writer.newLine();
            writer.write(""\t\t\t<post>call vmgm menu 1;</post>"");
            writer.newLine();
            writer.write(""\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t</titles>"");
            writer.newLine();
            writer.write(""\t</titleset>"");
            writer.newLine();
            writer.write(""</dvdauthor>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        /* Shouldn't expect to see any errors from this method call. */
        return false;
    }
}
","// Menu_1Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#createXML()} method.
*/
class Menu_1Test {","// Menu_1Test.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#createXML()} method.
*/
class Menu_1Test {

		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method creates the xml file correctly.
		*/
		@Test
		void testCreateXML() {
				
				// Create a new Menu object
				Menu menu = new Menu();
				
				// Create a new GUI object
				GUI gui = new GUI();
				
				// Set the output directory
				gui.strOutputDir = ""test/test_output"";
				
				// Create a new File object
				File xmlFile = new File(gui.strOutputDir + ""/vmgm.xml"");
				
				// Create a new File object
				File ListDir = new File(gui.strOutputDir);
				
				// Create a new FilenameFilter object
				FilenameFilter filter = new FilenameFilter() {
						
						boolean ret_val = true;
						
						public boolean accept(File dir, String name) {
								if (name.endsWith(""vob"")) {
										if (!name.equals(""menu.vob""))
												ret_val = true;
										else
												ret_val = false;
								} else
										ret_val = false;
								return ret_val;
						}
				};
				
				// Store the vob files in the video_files array
				String[] video_files = ListDir.list(filter);
				
				// Call the createXML method
				menu.createXML();
				
				// Check if the xml file exists
				assertTrue(xmlFile.exists());
				
				// Check if the xml file is a file
				assertTrue(xmlFile.isFile());
				
				// Check if the xml file is readable
				assertTrue(xmlFile.canRead());
				
				// Check if the xml file is writable
				assertTrue(xmlFile.canWrite());
				
				// Create a new BufferedReader object
				BufferedReader reader = null;
				
				// Create a new String object
				String line = null;
				
				// Create a new String object
				String xml = null;
				
				// Create a new String object
				String expected = null;
				
				// Create a new String object
				String expected_1 = null;
				
				// Create a new String object
				String expected_2 = null;
				
				// Create a new String object
				String expected_3 = null;
				
				// Create a new String object
				String expected_4 = null;
				
				// Create a new String object
				String expected_5 = null;
				
				// Create a new String object
				String expected_6 = null;
				
				// Create a new String object
				String expected_7 = null;
				
				// Create a new String object
				String expected_8 = null;
				
				// Create a new String object
				String expected_9 = null;
				
				// Create a new String object
				String expected_10 = null;
				
				// Create a new String object
				String expected_11 = null;
				
				// Create a new String object
				String expected_12 = null;
				
				// Create a new String object
				String expected_13 = null;
				
				// Create a new String object
				String expected_14 = null;
				
				// Create a new String object
				String expected_15 = null;
				
				// Create a new String object
				String expected_16 = null;
				
				// Create a new String object
				String expected_17 = null;
				
				// Create a new String object
				String expected_18 = null;
				
				// Create a new String object
				String expected_19 = null;
				
				// Create a new String object
				String expected_20 = null;
				
				// Create a new String object
				String expected_21 = null;
				
				// Create a new String object
				String expected_22 = null;
				
				// Create a new String object
				String expected_23 = null;
				
				// Create a new String object
				String expected_24 = null;
				
				// Create a new String object
				String expected_25 = null;
				
				// Create a new String object
				String expected_26 = null;
				
				// Create a new String object
				String expected_27 = null;
				
				// Create a new String object
				String expected_28 = null;
				
				// Create a new String object
				String expected_29 = null;
				
				// Create a new String object
				String expected_30 = null;
				
				// Create a new String object
				String expected_31 = null;
				
				// Create a new String object
				String expected_32 = null;
				
				// Create a new String object
				String expected_33 = null;
				
				// Create a new String object
				String expected_34 = null;
				
				// Create a new String object
				String expected_35 = null;
				
				// Create a new String object
				String expected_36 = null;
				
				// Create a new String object
				String expected_37 = null;
				
				// Create a new String object
				String expected_38 = null;
				
				// Create a new String object
				String expected_39 = null;
				
				// Create a new String object
				String expected_40 = null;
				
				// Create a new String object
				String expected_41 = null;
				
				// Create a new String object
				String expected_42 = null;
				
				// Create a new String object
				String expected_43 = null;
				
				// Create a new String object
				String expected_44 = null;
				
				// Create a"
