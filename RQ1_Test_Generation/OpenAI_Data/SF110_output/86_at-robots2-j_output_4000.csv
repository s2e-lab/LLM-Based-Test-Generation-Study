ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6tzEPV2FuXAx5fFWplwZ5YrBZgCNM,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/Arena.java,105.06548285484314,length,"// Arena.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;

/**
 * The Arena is the virtual world within which the simulation occurs.
 *
 * @author Daniel Pitts
 */
public class Arena {

    private final List<TangibleArenaObject> activeRobots = new LinkedList<TangibleArenaObject>();

    private final List<TangibleArenaObject> allRobots = new LinkedList<TangibleArenaObject>();

    private final List<CollidableArenaObject> collidables = new LinkedList<CollidableArenaObject>();

    private final Collection<ArenaObject> intangibles = new LinkedList<ArenaObject>();

    private final RoundTimer roundTimer = new RoundTimer();

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allActiveObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, activeRobots, intangibles));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allFramedObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, intangibles, allRobots));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends CollidableArenaObject>> allCollidable = new ArrayList<Collection<? extends CollidableArenaObject>>(Arrays.asList(collidables, activeRobots));

    private final RadioDispatcher radioDispatcher = new RadioDispatcher();

    private final FrameBuilder frameBuilder;

    private boolean roundOver;

    public Arena() {
        this(null);
    }

    public Arena(FrameBuilder frameBuilder) {
        this.frameBuilder = frameBuilder;
        if (frameBuilder != null) {
        }
    }

    /**
     * Get the number of robots still active in the arena.
     *
     * @return the number of robots still active in the arena.
     */
    public int countActiveRobots() {
        return activeRobots.size();
    }

    private void connectArena(ArenaObject object) {
        object.setArena(this);
    }

    /**
     * Get the radio dispatcher for this arena.
     *
     * @return the radio dispatcher for this arena.
     */
    public RadioDispatcher getRadioDispatcher() {
        return radioDispatcher;
    }

    /**
     * Simulate a certain amount of time elapsing.
     */
    public void simulate() {
        updateSimulation();
        buildFrame();
        roundTimer.increment(Duration.ONE_CYCLE);
    }

    /**
     * Prepare a snapshot of the current arena state in the {@link FrameBuilder}.
     */
    public void buildFrame() {
        if (frameBuilder != null) {
            frameBuilder.beginFrame(roundOver);
            for (Collection<? extends ArenaObject> objectCollection : allFramedObjects) {
                for (ArenaObject object : objectCollection) {
                    frameBuilder.addObject(object.getSnapshot());
                }
            }
            frameBuilder.endFrame();
        }
    }

    private void updateSimulation() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (ArenaObject object : objectCollection) {
                object.update(Duration.ONE_CYCLE);
            }
        }
        checkCollissions();
        removeDead();
    }

    private void removeDead() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (Iterator<? extends ArenaObject> it = objectCollection.iterator(); it.hasNext(); ) {
                if (it.next().isDead()) {
                    it.remove();
                }
            }
        }
    }

    private void checkCollissions() {
        for (final TangibleArenaObject collisionTarget : activeRobots) {
            for (Iterable<? extends CollidableArenaObject> toCheckAgainst : allCollidable) {
                for (CollidableArenaObject collidable : toCheckAgainst) {
                    if (collidable == collisionTarget) {
                        break;
                    }
                    collidable.checkCollision(collisionTarget);
                }
            }
        }
    }

    /**
     * Add a robot to the arena at a random location.
     *
     * @param robot the robot to add to this arena.
     */
    public void addRobot(TangibleArenaObject robot) {
        robot.getPosition().copyFrom(Position.random(0.0, 0.0, 1000.0, 1000.0));
        connectArena(robot);
        activeRobots.add(robot);
        allRobots.add(robot);
    }

    public void addCollidable(CollidableArenaObject arenaObject) {
        connectArena(arenaObject);
        collidables.add(arenaObject);
    }

    /**
     * Cause an explosion.
     *
     * @param cause             the robot which gets credit for any damage done.
     * @param explosionFunction the damage explosion function.
     */
    public void explosion(DamageInflicter cause, ExplosionFunction explosionFunction) {
        addIntangible(new Explosion(explosionFunction.getCenter(), explosionFunction.getRadius()));
        for (TangibleArenaObject robot : activeRobots) {
            explosionFunction.inflictDamage(cause, robot);
        }
    }

    public void determineWinners() {
        if (!activeRobots.isEmpty()) {
            if (activeRobots.size() == 1) {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.winRound();
                }
            } else {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.tieRound();
                }
            }
        } else {
            for (TangibleArenaObject robot : allRobots) {
                robot.tieRound();
            }
        }
    }

    public void endRound() {
        roundOver = true;
        determineWinners();
        buildFrame();
    }

    public boolean isOnlyOneRobotAlive() {
        return countActiveRobots() == 1;
    }

    public void addIntangible(ArenaObject object) {
        if (frameBuilder != null) {
            intangibles.add(object);
        }
    }

    public void visitActiveRobots(ArenaObjectVisitor arenaObjectVisitor) {
        for (ArenaObject arenaObject : activeRobots) {
            arenaObject.accept(arenaObjectVisitor);
        }
    }

    public RoundTimer getRoundTimer() {
        return roundTimer;
    }
}
","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {

		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena is empty.
		*/
		@Test
		void testCountActiveRobots_empty() {
				Arena arena = new Arena();
				assertEquals(0, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains one robot.
		*/
		@Test
		void testCountActiveRobots_one() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(1, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains two robots.
		*/
		@Test
		void testCountActiveRobots_two() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(2, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains three robots.
		*/
		@Test
		void testCountActiveRobots_three() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(3, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains four robots.
		*/
		@Test
		void testCountActiveRobots_four() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(4, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains five robots.
		*/
		@Test
		void testCountActiveRobots_five() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
		"
cmpl-6tzG6QnPoCyNoAFO0Kxk0U95p1EIT,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_0Test.java,110.69320678710938,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {

	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = null</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase0() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = null;
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = """"</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase1() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = """";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = "" ""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase2() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = "" "";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""a""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase3() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""a"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyz""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase4() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""abcdefghijklmnopqrstuvwxyz"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase5() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""0123456789""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase6() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""0123456789"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase7() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase8() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\""#$%&'()*+,-./:;<=>?@[\\]^_`{|}~abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123"
cmpl-6tzHtofvIRL85XgtQwTsi8qiz4wPb,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_1Test.java,96.00330758094788,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {

	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_4() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_6() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_7() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_8() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_9() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_10() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
}

// AtRobotCompilerOutput_2Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#getErrors()} method.
*/
class AtRobotCompilerOutput_2Test {
		
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_4() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_6() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_7() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_8() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_9() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_10() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
}

// AtRobotCompilerOutput_3Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#getProgram()} method.
*/
class AtRobotCompilerOutput_3Test {
		
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_2() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_4() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetProgram_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertThrows(IllegalStateException.class, () -> atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetProgram_6() {
		Errors errors = new Errors();
		Program program = new Program();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, null, 0, null, null);
		assertEquals(program, atRobotCompilerOutput.getProgram());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getProgram()} method"
cmpl-6tzJRQbp7yP61B3zrGzcTbaHRzkoY,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test.java,94.08466720581055,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_0() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_0.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_1() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_1.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_2() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_2.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_3() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_3.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_4() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_4.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_5() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_5.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_6() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_6.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_7() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_7.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_8() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_8.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_9() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_9.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
}

// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_1Test {
		
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_0() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_0.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_1() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_1.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_2() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_2.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_3() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_3.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_4() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_4.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_5() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_5.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_6() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_6.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_7() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_7.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_8() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_8.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_9() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_9.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
}

// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_2Test {
		
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_0"
cmpl-6tzKxX4TNCNxoIVekuYfLgrqyFF8I,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test.java,74.23092937469482,stop,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_8() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_9() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_10() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getOperand());
	}
}

// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import java.util.*;

/**
 * The output of the compiler.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {
    private final List<CompilerError> errors = new ArrayList<CompilerError>();
    private final List<CompilerWarning> warnings = new ArrayList<CompilerWarning>();
    private final List<CompiledInstruction> instructions = new ArrayList<CompiledInstruction>();

    public List<CompilerError> getErrors() {
        return errors;
    }

    public List<CompilerWarning> getWarnings() {
        return warnings;
    }

    public List<CompiledInstruction> getInstructions() {
        return instructions;
    }
}

// CompiledInstruction.java
package net.virtualinfinity.atrobots.compiler;

/**
 * A compiled instruction.
 *
 * @author Daniel Pitts
 */
public class CompiledInstruction {
    private final int address;
    private final int opcode;
    private final int operand;

    public CompiledInstruction(int address, int opcode, int operand) {
        this.address = address;
        this.opcode = opcode;
        this.operand = operand;
    }

    public int getAddress() {
        return address;
    }

    public int getOpcode() {
        return opcode;
    }

    public int getOperand() {
        return operand;
    }
}

// CompilerError.java
package net.virtualinfinity.atrobots.compiler;

/**
 * An error which occurred during compilation.
 *
 * @author Daniel Pitts
 */
public class CompilerError {
    private final String message;
    private final int lineNumber;

    public CompilerError(String message, int lineNumber) {
        this.message = message;
        this.lineNumber = lineNumber;
    }

    public String getMessage() {
        return message;
    }

    public int getLineNumber() {
        return lineNumber;
    }
}

// CompilerWarning.java
package net.virtualinfinity.atrobots.compiler;

/**
 * A warning which occurred during compilation.
 *
 * @author Daniel Pitts
 */
public class CompilerWarning {
    private final String message;
    private final int lineNumber;

    public CompilerWarning(String message, int lineNumber) {
        this.message = message;
        this.lineNumber = lineNumber;
    }

    public String getMessage() {
        return message;
    }

    public int getLineNumber() {
        return lineNumber;
    }
}

// LineNumberReaderCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
class LineNumberReaderCompiler {

    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        final AtRobotCompilerOutput output = new AtRobotCompilerOutput();
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.startsWith("";"")) {
                continue;
            }
            final String[] parts = line.split(""\\s+"");
            if (parts.length == 0) {
                continue;
            }
            final String opcode = parts[0];
            if (opcode.equals(""DAT"")) {
                output.getInstructions().add(new CompiledInstruction(0, 0, 0));
            }
        }
        return output;
    }
}"
cmpl-6tzM9CU83Yf2tKdlw0958Cs1YXCU4,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_2Test.java,77.77493810653687,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x00.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""nop"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x00, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x01.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""add"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x01, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x02.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""sub"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x02, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x03.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""or"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x03, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x04.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""and"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x04, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x05.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""xor"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x05, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x06.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""not"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x06, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile("
cmpl-6tzNPrxJJSMEhB1LeqlM7qk6JtDpG,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_3Test.java,82.78762578964233,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_8() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_9() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_10() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
}</code>



I have tried to use the following code to generate the test cases:


<code>import java.io.*;
import java.util.*;

public class TestCaseGenerator {
    public static void main(String[] args) throws IOException {
        final String source = ""add 1, 2"";
        final LineNumberReader reader = new LineNumberReader(new StringReader(source));
        final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
        assertEquals(0, output.getErrors().size());
    }
}</code>



But I am getting the following error:


<code>Exception in thread ""main"" java.lang.Error: Unresolved compilation problem: 
    AtRobotCompiler cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to a type
    AtRobotCompilerOutput cannot be resolved to"
cmpl-6tzOjYwGKFpScwfOaaMLTUlEtwEpN,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/RobotFactory.java,72.54167938232422,length,"// RobotFactory.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;

/**
 * Represents an entrant in a game.
 *
 * @author Daniel Pitts
 */
public class RobotFactory {

    private static final int ROBOT_STACK_SIZE = 256;

    private static final int LOWER_MEMORY_BLOCK_SIZE = 1024;

    private static final Debugger DEBUGGER = DebugConsole.create(RobotFactory.getSystemConsole()).getDebugger();

    protected final String name;

    protected final Program program;

    protected final HardwareSpecification hardwareSpecification;

    protected final DebugInfo debugInfo;

    protected final int maxProcessorSpeed;

    protected final String message;

    private volatile boolean debug;

    public RobotFactory(String name, Program program, HardwareSpecification hardwareSpecification, DebugInfo debugInfo, int maxProcessorSpeed, String message) {
        this.message = message;
        this.program = program;
        this.name = name;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.hardwareSpecification = hardwareSpecification;
    }

    private static Console getSystemConsole() {
        return new ConsoleImpl(new ReaderConsoleInput(System.in), new PrintStreamConsoleOutput(System.out), new PrintStreamConsoleOutput(System.err));
    }

    /**
     * Create a robot.
     *
     * @param roundState
     * @param maxProcessorSpeed
     * @param robotScoreKeeper
     * @param arena
     * @param robotId
     * @return the robot to enter.
     */
    public Robot createRobot(RoundState roundState, int maxProcessorSpeed, RobotScoreKeeper robotScoreKeeper, Arena arena, int robotId) {
        final Robot robot = new Robot(name, robotId, robotScoreKeeper);
        robot.addRobotListener(robotScoreKeeper);
        final RandomAccessMemoryArray lowerMemoryBlock = new RandomAccessMemoryArray(LOWER_MEMORY_BLOCK_SIZE);
        robot.setComputer(createComputer(lowerMemoryBlock, maxProcessorSpeed));
        final RobotConfigurer robotConfigurer = new RobotConfigurer();
        robotConfigurer.setRobot(robot);
        hardwareSpecification.buildRobotConfigurer(robotConfigurer);
        robotConfigurer.setLowerMemoryArray(lowerMemoryBlock);
        robotConfigurer.wireRobotComponents(arena, roundState);
        if (debug) {
            robot.getComputer().setDebugListener(DEBUGGER);
        }
        return robot;
    }

    private Computer createComputer(RandomAccessMemoryArray lowerMemoryBlock, int maxProcessorSpeed) {
        return new Computer(createMemory(lowerMemoryBlock), ROBOT_STACK_SIZE, getProcessorSpeed(maxProcessorSpeed), debugInfo);
    }

    private Memory createMemory(RandomAccessMemoryArray lowerMemoryBlock) {
        final Memory memory = new Memory();
        memory.addMemoryArray(lowerMemoryBlock);
        memory.addMemoryArray(program.createProgramMemory());
        return memory;
    }

    private int getProcessorSpeed(int maxProcessorSpeed) {
        return Math.max(this.maxProcessorSpeed, maxProcessorSpeed);
    }

    public RobotFactory setDebug(boolean debug) {
        this.debug = debug;
        return this;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return ""RobotFactory{"" + ""name='"" + name + '\'' + '}';
    }
}
","// RobotFactoryTest.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RobotFactory}.
* It contains ten unit test cases for the {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)} method.
*/
class RobotFactoryTest {","// RobotFactoryTest.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RobotFactory}.
* It contains ten unit test cases for the {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)} method.
*/
class RobotFactoryTest {

		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot2() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot3() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot4() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot5() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot6() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot7() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot8() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot9() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot10() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
}

// RobotScoreKeeper.java
package net.virtualinfinity.atrobots.robot;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.Computer;
import net.virtualinfinity.atrobots.computer.DebugListener;
import net.virtualinfinity.atrobots.computer.Debugger;
import net.virtualinfinity.atrobots.computer.Memory;
import net.virtualinfinity.atrobots.debugger.DebugConsole;
import net.virtualinfinity.atrobots.debugger.DebuggerFactory;
import net.virtualinfinity.atrobots.debugger.DebuggerFactoryImpl;
import net.virtualinfinity.atrobots.debugger.DebuggerFactoryListener;
import net.virtualinfinity.atrobots.debugger.DebuggerListener;
import net.virtualinfinity.atrobots.debugger.DebuggerListenerAdapter;
import net.virtualinfinity.atrobots.debugger.DebuggerState;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListener;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerAdapter;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSource;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceImpl;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListener;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerAdapter;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl2;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl3;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl4;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl5;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl6;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl7;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl8;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl9;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl10;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl11;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl12;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl13;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl14;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl15;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl16;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl17;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl18;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl19;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl20;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl21;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl22;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl23;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl24;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl25;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl26;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl27;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl28;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl29;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl30;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl31;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl32;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl33;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl34;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl35;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl36;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl37;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl38;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl39;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl40;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl41;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl42;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl43;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl44;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl45;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl46;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl47;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl48;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl49;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl50;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl51;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl52;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl53;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl54;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl55;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl56;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl57;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl58;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl59;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl60;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl61;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl62;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl63;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl64;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl65;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl66;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl67;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl68;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl69;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl70;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl71;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl72;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl73;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl74;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl75;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl76;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl77;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl78;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl79;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl80;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl81;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl82;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl83;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl84;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl85;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl86;
import net.virtualinfinity.atrobots.debugger.DebuggerStateSourceListenerImpl87;
import net.virtualinfinity.atrobots.debugger."
cmpl-6tzPu2Qw1MBqQgfGk6BjSjbg4P2FK,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/HardwareBus.java,74.36956405639648,length,"// HardwareBus.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/**
 * Represents all the hardware connected to a single robot.
 *
 * @author Daniel Pitts
 */
public class HardwareBus {

    private Map<Integer, PortHandler> ports;

    private Map<Integer, InterruptHandler> interrupts;

    private final Collection<Resettable> resettables = new ArrayList<Resettable>();

    private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();

    private Restartable autoShutdownTarget;

    private Temperature autoShutDown = Temperature.fromLogScale(350);

    private Heat heat;

    /**
     * Get the port handler map.
     *
     * @return map of port numbers to port handler.
     */
    public Map<Integer, PortHandler> getPorts() {
        return ports;
    }

    /**
     * Set the port handler map.
     *
     * @param ports map of port numbers to port handler.
     */
    public void setPorts(Map<Integer, PortHandler> ports) {
        this.ports = ports;
    }

    /**
     * Get the interrupt handler map.
     *
     * @return map of interrupt numbers to interrupt handler.
     */
    public Map<Integer, InterruptHandler> getInterrupts() {
        return interrupts;
    }

    /**
     * Set the interrupt handler map.
     *
     * @param interrupts map of interrupt numbers to interrupt handler.
     */
    public void setInterrupts(Map<Integer, InterruptHandler> interrupts) {
        this.interrupts = interrupts;
    }

    /**
     * Call a specific interrupt.
     *
     * @param interruptNumber the interrupt to execute.
     */
    public void callInterrupt(int interruptNumber) {
        interrupts.get(interruptNumber).call();
    }

    /**
     * Read from a specific port.
     *
     * @param portNumber the port to read from
     * @return the value read.
     */
    public short readPort(int portNumber) {
        return ports.get(portNumber).read();
    }

    /**
     * Write to a specific port
     *
     * @param portNumber the port number
     * @param value      the value to write.
     */
    public void writePort(int portNumber, short value) {
        ports.get(portNumber).write(value);
    }

    /**
     * Reset all resetables in this hardward bus.
     */
    public void reset() {
        for (Resettable resettable : resettables) {
            resettable.reset();
        }
    }

    /**
     * Register a resetable.
     *
     * @param resettable a resetible to get reset when this bus is reset.
     */
    public void addResetable(Resettable resettable) {
        resettables.add(resettable);
    }

    public void addShutdownListener(ShutdownListener shutdownListener) {
        shutdownListeners.add(shutdownListener);
    }

    public void setAutoShutdownListener(Restartable autoShutdownListener) {
        this.autoShutdownTarget = autoShutdownListener;
    }

    /**
     * Check temperature against autoShutDown temp
     */
    public void checkHeat() {
        if (isAutoShutdownEngaged()) {
            shutDown();
        }
        if (autoShutdownTarget.isShutDown() && isAutoStartupEngaged()) {
            autoShutdownTarget.startUp();
        }
    }

    private boolean isAutoStartupEngaged() {
        return heat.getTemperature().compareTo(autoShutDown.minus(Temperature.fromLogScale(50))) < 0;
    }

    private boolean isAutoShutdownEngaged() {
        return heat.getTemperature().compareTo(autoShutDown) >= 0;
    }

    private void startUp() {
        autoShutdownTarget.startUp();
    }

    private void shutDown() {
        for (ShutdownListener listener : shutdownListeners) {
            listener.shutDown();
        }
    }

    /**
     * Get the temperature that shuts down computer.
     *
     * @return the temperature that shuts down computer.
     */
    public int getShutdownLevel() {
        return (int) Math.round(autoShutDown.getLogScale());
    }

    /**
     * Set the temperature that shuts down computer.
     *
     * @param value the temperature that shuts down computer.
     */
    public void setShutdownLevel(int value) {
        autoShutDown = Temperature.fromLogScale(value);
    }

    public void setHeat(Heat heat) {
        this.heat = heat;
    }
}
","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {

		private final HardwareBus hardwareBus = new HardwareBus();
		
		private final Heat heat = new Heat();
		
		private final Restartable restartable = new Restartable() {
				public void reset() {
				}
				public boolean isShutDown() {
						return false;
				}
				public void startUp() {
				}
		};
		
		private final ShutdownListener shutdownListener = new ShutdownListener() {
				public void shutDown() {
				}
		};
		
		private final PortHandler portHandler = new PortHandler() {
				public short read() {
						return 0;
				}
				public void write(short value) {
				}
		};
		
		private final InterruptHandler interruptHandler = new InterruptHandler() {
				public void call() {
				}
		};
		
		private final Map<Integer, PortHandler> ports = new Map<Integer, PortHandler>() {
				public int size() {
						return 0;
				}
				public boolean isEmpty() {
						return false;
				}
				public boolean containsKey(Object key) {
						return false;
				}
				public boolean containsValue(Object value) {
						return false;
				}
				public PortHandler get(Object key) {
						return null;
				}
				public PortHandler put(Integer key, PortHandler value) {
						return null;
				}
				public PortHandler remove(Object key) {
						return null;
				}
				public void putAll(Map<? extends Integer, ? extends PortHandler> m) {
				}
				public void clear() {
				}
				public Set<Integer> keySet() {
						return null;
				}
				public Collection<PortHandler> values() {
						return null;
				}
				public Set<Entry<Integer, PortHandler>> entrySet() {
						return null;
				}
		};
		
		private final Map<Integer, InterruptHandler> interrupts = new Map<Integer, InterruptHandler>() {
				public int size() {
						return 0;
				}
				public boolean isEmpty() {
						return false;
				}
				public boolean containsKey(Object key) {
						return false;
				}
				public boolean containsValue(Object value) {
						return false;
				}
				public InterruptHandler get(Object key) {
						return null;
				}
				public InterruptHandler put(Integer key, InterruptHandler value) {
						return null;
				}
				public InterruptHandler remove(Object key) {
						return null;
				}
				public void putAll(Map<? extends Integer, ? extends InterruptHandler> m) {
				}
				public void clear() {
				}
				public Set<Integer> keySet() {
						return null;
				}
				public Collection<InterruptHandler> values() {
						return null;
				}
				public Set<Entry<Integer, InterruptHandler>> entrySet() {
						return null;
				}
		};
		
		private final Collection<Resettable> resettables = new ArrayList<Resettable>();
		
		private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();
		
		private final Restartable autoShutdownTarget = new Restartable() {
				public void reset() {
				}
				public boolean isShutDown() {
						return false;
				}
				public void startUp() {
				}
		};
		
		private final Temperature autoShutDown = Temperature.fromLogScale(350);
		
		/**
		* Test case for {@link HardwareBus#readPort(int)}
		*/
		@Test
		void testReadPort() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#writePort(int, short)}
		*/
		@Test
		void testWritePort() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#callInterrupt(int)}
		*/
		@Test
		void testCallInterrupt() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#reset()}
		*/
		@Test
		void testReset() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#addResetable(Resettable)}
		*/
		@Test
		void testAddResetable() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#addShutdownListener(ShutdownListener)}
		*/
		@Test
		void testAddShutdownListener() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#setAutoShutdownListener(Restartable)}
		*/
		@Test
		void testSetAutoShutdownListener() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#checkHeat()}
		*/
		@Test
		void testCheckHeat() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#isAutoStartupEngaged()}
		*/
		@Test
		void testIsAutoStartupEngaged() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#isAutoShutdownEngaged()}
		*/
		@Test
		void testIsAutoShutdownEngaged() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#startUp()}
		*/
		@Test
		void testStartUp() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#shutDown()}
		*/
		@Test
		void testShutDown() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#getShutdownLevel()}
		*/
		@Test
		void testGetShutdownLevel() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#setShutdownLevel(int)}
		*/
		@Test
		void testSetShutdownLevel() {
				// TODO: Test goes here...
		}
		
		/**
		* Test case for {@link HardwareBus#setHeat(Heat)}
		*/
		@Test
		void testSetHeat() {
				// TODO: Test goes here...
		}
		
}

// InterruptHandler.java
package net.virtualinfinity.atrobots.computer;

/**
 * @author Daniel Pitts
 */
public interface InterruptHandler {
    void call();
}

// Restartable.java
package net.virtualinfinity.atrobots.computer;

/**
 * @author Daniel Pitts
 */
public interface Restartable {
    void reset();

    boolean isShutDown();

    void startUp();
}

// ShutdownListener.java
package net.virtualinfinity.atrobots.computer;

/**
 * @author Daniel Pitts
 */
public interface ShutdownListener {
    void shutDown();
}

// Temperature.java
package net.virtualinfinity.atrobots.measures;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

/**
 * @author Daniel Pitts
 */
public class Temperature {
    private static final BigDecimal LOG_2 = new BigDecimal(Math.log(2));
    private static final BigDecimal LOG_10 = new BigDecimal(Math.log(10));
    private static final BigDecimal LOG_E = new BigDecimal(Math.log(Math.E));
    private static final BigDecimal LOG_2_10 = LOG_2.divide(LOG_10, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10 = LOG_E.divide(LOG_10, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E = LOG_2.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E = LOG_10.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_2 = LOG_10.divide(LOG_2, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_2 = LOG_E.divide(LOG_2, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_2_10 = LOG_E_2.divide(LOG_10, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_2_E = LOG_10_2.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10 = LOG_2_E.divide(LOG_10, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2 = LOG_10_E.divide(LOG_2, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E = LOG_2_10.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2 = LOG_E_10.divide(LOG_2, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E = LOG_10_E_2.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E = LOG_2_E_10.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E = LOG_E_10_2.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E_E = LOG_2_10_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E_E = LOG_10_E_2_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E_E = LOG_2_E_10_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E_E = LOG_E_10_2_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E_E_E = LOG_2_10_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E_E_E = LOG_10_E_2_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E_E_E = LOG_2_E_10_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E_E_E = LOG_E_10_2_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E_E_E_E = LOG_2_10_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E_E_E_E = LOG_10_E_2_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E_E_E_E = LOG_2_E_10_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E_E_E_E = LOG_E_10_2_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E_E_E_E_E = LOG_2_10_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E_E_E_E_E = LOG_10_E_2_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E_E_E_E_E = LOG_2_E_10_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E_E_E_E_E = LOG_E_10_2_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_10_E_E_E_E_E_E = LOG_2_10_E_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_10_E_2_E_E_E_E_E_E = LOG_10_E_2_E_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_2_E_10_E_E_E_E_E_E = LOG_2_E_10_E_E_E_E_E.divide(LOG_E, MathContext.DECIMAL128);
    private static final BigDecimal LOG_E_10_2_E_E_E_E_E_E = LOG_E_10_2_E_E_E_E_E.divide(LOG_E,"
cmpl-6tzR6A3SjC03gSMoan8DyBa2LgwYs,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_0Test.java,74.7345290184021,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {

		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_0() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0));
				assertEquals(0, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_1() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				assertEquals(1, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_2() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(2));
				assertEquals(2, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_3() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(3));
				assertEquals(3, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_4() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(4));
				assertEquals(4, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_5() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(5));
				assertEquals(5, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_6() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(6));
				assertEquals(6, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_7() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(7));
				assertEquals(7, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_8() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(8));
				assertEquals(8, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_9() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(9));
				assertEquals(9, memory.size());
		}
		
}

// MemoryArray.java
package net.virtualinfinity.atrobots.computer;

/**
 * A section of memory.
 *
 * @author Daniel Pitts
 */
public class MemoryArray {
    private final short[] memory;
    private ComputerErrorHandler errorHandler;

    /**
     * Create a new section of memory.
     *
     * @param size the size of the memory.
     */
    public MemoryArray(int size) {
        memory = new short[size];
    }

    /**
     * Get the size of this memory section.
     *
     * @return the size.
     */
    public int size() {
        return memory.length;
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return 0;
        }
        return memory[address];
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void put(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] = value;
    }

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] |= value;
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] &= value;
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    public void decrement(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]--;
    }

    public void increment(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]++;
    }
}

// MemoryCell.java
package net.virtualinfinity.atrobots.computer;

/**
 * A memory cell.
 *
 * @author Daniel Pitts
 */
public class MemoryCell {
    private final Memory memory;
    private final int index;

    public MemoryCell(Memory memory, int index) {
        this.memory = memory;
        this.index = index;
    }

    public short get() {
        return memory.get(index);
    }

    public void set(short value) {
        memory.set(index, value);
    }

    public void or(short value) {
        memory.or(index, value);
    }

    public void and(short value) {
        memory.and(index, value);
    }

    public void increment() {
        memory.increment(index);
    }

    public void decrement() {
        memory.decrement(index);
    }
}

// ComputerErrorHandler.java
package net.virtualinfinity.atrobots.computer;

/**
 * @author Daniel Pitts
 */
public interface ComputerErrorHandler {
    void memoryBoundsError(int address);
}

// Computer.java
package net.virtualinfinity.atrobots.computer;

/**
 * @author Daniel Pitts
 */
public class Computer {
    private final Memory memory;
    private final ComputerErrorHandler errorHandler;

    public Computer(Memory memory, ComputerErrorHandler errorHandler) {
        this.memory = memory;
        this.errorHandler = errorHandler;
    }

    public void or(int address, short value) {
        memory.or(address, value);
    }

    public void and(int address, short value) {
        memory.and(address, value);
    }

    public void set(int address, short value) {
        memory.set(address, value);
    }

    public short get(int address) {
        return memory.get(address);
    }

    public int unsigned(int index) {
        return memory.unsigned(index);
    }

    public MemoryCell getCell(int index) {
        return memory.getCell(index);
    }

    public void increment(int address) {
        memory.increment(address);
    }

    public void decrement(int address) {
        memory.decrement(address);
    }
}

// Computer_0Test.java
package net.virtualinfinity.atrobots.computer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Computer}.
* It contains ten unit test cases for the {@link Computer#get(int)} method.
*/
class Computer_0Test {
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_0() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 0);
				assertEquals(0, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_1() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 1);
				assertEquals(1, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_2() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 2);
				assertEquals(2, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_3() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 3);
				assertEquals(3, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_4() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 4);
				assertEquals(4, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_5() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 5);
				assertEquals(5, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_6() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 6);
				assertEquals(6, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_7() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 7);
				assertEquals(7, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
		@Test
		void testGet_8() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(1));
				Computer computer = new Computer(memory, new ComputerErrorHandler() {
						@Override
						public void memoryBoundsError(int address) {
								fail(""memoryBoundsError"");
						}
				});
				computer.set(0, (short) 8);
				assertEquals(8, computer.get(0));
		}
		
		/**
		* Test case for the {@link Computer#get(int)} method.
		*/
"
cmpl-6tzSJQtPGlIxdDFxERHadNKWPUHYI,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_1Test.java,101.19490814208984,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {

		/**
		* Test case for {@link Memory#get(int)}
		*
		* @see Memory#get(int)
		*/
		@Test
		void testGet() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(new short[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));
				assertEquals(0, memory.get(0));
				assertEquals(1, memory.get(1));
				assertEquals(2, memory.get(2));
				assertEquals(3, memory.get(3));
				assertEquals(4, memory.get(4));
				assertEquals(5, memory.get(5));
				assertEquals(6, memory.get(6));
				assertEquals(7, memory.get(7));
				assertEquals(8, memory.get(8));
				assertEquals(9, memory.get(9));
		}
}

// MemoryArray.java
package net.virtualinfinity.atrobots.computer;

/**
 * A section of memory.
 *
 * @author Daniel Pitts
 */
public class MemoryArray {
    private final short[] memory;
    private ComputerErrorHandler errorHandler;

    /**
     * Create a new section of memory.
     *
     * @param memory the memory.
     */
    public MemoryArray(short[] memory) {
        this.memory = memory;
    }

    /**
     * Get the size of this memory section.
     *
     * @return the size.
     */
    public int size() {
        return memory.length;
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return 0;
        }
        return memory[address];
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void put(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] = value;
    }

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] |= value;
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address] &= value;
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    public void increment(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]++;
    }

    public void decrement(int address) {
        if (address < 0 || address >= memory.length) {
            errorHandler.memoryBoundsError(address);
            return;
        }
        memory[address]--;
    }
}

// MemoryCell.java
package net.virtualinfinity.atrobots.computer;

/**
 * A memory cell.
 *
 * @author Daniel Pitts
 */
public class MemoryCell {
    private final Memory memory;
    private final int index;

    /**
     * Create a new memory cell.
     *
     * @param memory the memory.
     * @param index  the index.
     */
    public MemoryCell(Memory memory, int index) {
        this.memory = memory;
        this.index = index;
    }

    /**
     * Get the value of this memory cell.
     *
     * @return the value.
     */
    public short get() {
        return memory.get(index);
    }

    /**
     * Set the value of this memory cell.
     *
     * @param value the value.
     */
    public void set(short value) {
        memory.set(index, value);
    }

    /**
     * Increment the value of this memory cell.
     */
    public void increment() {
        memory.increment(index);
    }

    /**
     * Decrement the value of this memory cell.
     */
    public void decrement() {
        memory.decrement(index);
    }

    /**
     * Bitwise-or the value of this memory cell with the given value.
     *
     * @param value the value to or.
     */
    public void or(short value) {
        memory.or(index, value);
    }

    /**
     * Bitwise-and the value of this memory cell with the given value.
     *
     * @param value the value to or.
     */
    public void and(short value) {
        memory.and(index, value);
    }
}

// ComputerErrorHandler.java
package net.virtualinfinity.atrobots.computer;

/**
 * Handles errors in the computer.
 *
 * @author Daniel Pitts
 */
public interface ComputerErrorHandler {
    /**
     * Called when a memory bounds error occurs.
     *
     * @param address the address which was out of bounds.
     */
    void memoryBoundsError(int address);
}

// Computer.java
package net.virtualinfinity.atrobots.computer;

/**
 * Represents a computer.
 *
 * @author Daniel Pitts
 */
public class Computer {
    private final Memory memory;
    private final Registers registers;
    private final InterruptQueue interruptQueue;
    private final InterruptHandler interruptHandler;
    private final ComputerErrorHandler errorHandler;

    /**
     * Create a new computer.
     *
     * @param memory          the memory.
     * @param registers       the registers.
     * @param interruptQueue  the interrupt queue.
     * @param interruptHandler the interrupt handler.
     * @param errorHandler    the error handler.
     */
    public Computer(Memory memory, Registers registers, InterruptQueue interruptQueue, InterruptHandler interruptHandler, ComputerErrorHandler errorHandler) {
        this.memory = memory;
        this.registers = registers;
        this.interruptQueue = interruptQueue;
        this.interruptHandler = interruptHandler;
        this.errorHandler = errorHandler;
    }

    /**
     * Get the memory of this computer.
     *
     * @return the memory.
     */
    public Memory getMemory() {
        return memory;
    }

    /**
     * Get the registers of this computer.
     *
     * @return the registers.
     */
    public Registers getRegisters() {
        return registers;
    }

    /**
     * Get the interrupt queue of this computer.
     *
     * @return the interrupt queue.
     */
    public InterruptQueue getInterruptQueue() {
        return interruptQueue;
    }

    /**
     * Get the interrupt handler of this computer.
     *
     * @return the interrupt handler.
     */
    public InterruptHandler getInterruptHandler() {
        return interruptHandler;
    }

    /**
     * Get the error handler of this computer.
     *
     * @return the error handler.
     */
    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }
}

// Registers.java
package net.virtualinfinity.atrobots.computer;

/**
 * Represents the registers of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Registers {
    private short a;
    private short b;
    private short c;
    private short d;
    private short e;
    private short f;
    private short g;
    private short h;
    private short i;
    private short j;
    private short k;
    private short l;
    private short m;
    private short n;
    private short o;
    private short p;
    private short q;
    private short r;
    private short s;
    private short t;
    private short u;
    private short v;
    private short w;
    private short x;
    private short y;
    private short z;
    private short i0;
    private short i1;
    private short i2;
    private short i3;
    private short i4;
    private short i5;
    private short i6;
    private short i7;
    private short i8;
    private short i9;
    private short i10;
    private short i11;
    private short i12;
    private short i13;
    private short i14;
    private short i15;
    private short i16;
    private short i17;
    private short i18;
    private short i19;
    private short i20;
    private short i21;
    private short i22;
    private short i23;
    private short i24;
    private short i25;
    private short i26;
    private short i27;
    private short i28;
    private short i29;
    private short i30;
    private short i31;
    private short i32;
    private short i33;
    private short i34;
    private short i35;
    private short i36;
    private short i37;
    private short i38;
    private short i39;
    private short i40;
    private short i41;
    private short i42;
    private short i43;
    private short i44;
    private short i45;
    private short i46;
    private short i47;
    private short i48;
    private short i49;
    private short i50;
    private short i51;
    private short i52;
    private short i53;
    private short i54;
    private short i55;
    private short i56;
    private short i57;
    private short i58;
    private short i59;
    private short i60;
    private short i61;
    private short i62;
    private short i63;
    private short i64;
    private short i65;
    private short i66;
    private short i67;
    private short i68;
    private short i69;
    private short i70;
    private short i71;
    private short i72;
    private short i73;
    private short i74;
    private short i75;
    private short i76;
    private short i77;
    private short i78;
    private short i79;
    private short i80;
    private short i81;
    private short i82;
    private short i83;
    private short i84;
    private short i85;
    private short i86;
    private short i87;
    private short i88;
    private short i89;
    private short i90;
    private short i91;
    private short i92;
    private short i93;
    private short i94;
    private short i95;
    private short i96;
    private short i97;
    private short i98;
    private short i99;
    private short i100;
    private short i101;
    private short i102;
    private short i103;
    private short i104;
    private short i105;
    private short i106;
    private short i107;
    private short i108;
    private short i109;
    private short i110;
    private short i111;
    private short i112;
    private short i113;
    private short i114;
    private short i115;
    private short i116;
    private short i117;
    private short i118;
    private short i119;
    private short i120;
    private short i121;
    private short i122;
    private short i123;
    private short i124;
    private short i125;
    private short i126;
    private short i127;
    private short i128;
    private short i129;
    private short i130;
    private short i131;
    private short i132;
    private short i133;
    private short i134;
    private short i135;
    private short i136;
    private short i137;
    private short i138;
    private short i139;
    private short i140;
    private short i141;
    private short i142;
    private short i143;
    private short i144;
    private short i145;
    private short i146;
    private short i147;
    private short i148;
    private short i149;
    private short i150;
    private short i151;
    private short i152;
    private short i153;
    private short i154;
    private short i155;
    private short i156;
    private short i157;
    private short i158;
    private short i159;
    private short i160;
    private short i161;
    private short i162;
    private short i163;
    private short i164;
    private short i165;
    private short i166;
    private short i167;
    private short i168;
    private short i169;
    private short i170;
    private short i171;
    private short i172;
    private short i173;
    private short i174;
    private short i175;
    private short i176;
    private short i177;
    private short i178;
    private short i179;
    private short i180;
    private short i181;
    private short i182;
    private short i183;
    private short i184;
    private short i185;
    private short i186;
    private short i187;
    private short i188;
    private short i189;
    private short i190;
    private short i191;
    private short i192;
    private short i193;
    private short i194;
    private short i195;
    private short i196;
    private short i197;
    private short i198;
    private short i199;
    private short i200;
    private short i201;
    private short i202;
    private short i203;
    private short i204;
    private short i205;
    private short i206;
    private short i207;
    private short i208;
    private short i209;
    private short i210;
    private short i211;
    private short i212;
    private short i213;
    private short i214;
    private short i215;
    private short i216;
    private short i217;
    private short i218;
    private short i219;
    private short i220;
    private short i221;
    private short i222;
    private short i223;
    private short i224;
    private short i225;
    private short i226;
    private short i227;
    private short i228;
    private short i229;
    private short i230;
    private short i231;
    private short i232;
    private short i233;
    private short i234;
    private short i235;
    private short i236;
    private short i237;
    private short i238;
    private short i239;
    private short i240;
    private short i241;
    private short i242;
    private short i243;
    private short i244;
    private short i245;
    private short i246;
    private short i247;
    private short i248;
    private short i249;
    private short i250;
    private short i251;
   "
cmpl-6tzTwmkCrmKTXZD3vv0HEE062vIFG,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Program.java,121.26623511314392,length,"// Program.java
package net.virtualinfinity.atrobots.computer;

/**
 * A Program is a ROM definition.
 *
 * @author Daniel Pitts
 */
public class Program {

    private short[] programCode;

    public Program(short[] programCode) {
        this.programCode = programCode;
    }

    /**
     * Creates a read-only memory array with the program code pre-flashed.
     *
     * @return the memory array.
     */
    public MemoryArray createProgramMemory() {
        final ReadOnlyMemoryArray readOnlyMemoryArray = new ReadOnlyMemoryArray(programCode.length);
        readOnlyMemoryArray.flash(programCode);
        return readOnlyMemoryArray;
    }
}
","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {

		@Test
		void testCreateProgramMemory() {
				short[] programCode = new short[] {0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009};
				Program program = new Program(programCode);
				MemoryArray memoryArray = program.createProgramMemory();
				assertEquals(0x0000, memoryArray.get(0));
				assertEquals(0x0001, memoryArray.get(1));
				assertEquals(0x0002, memoryArray.get(2));
				assertEquals(0x0003, memoryArray.get(3));
				assertEquals(0x0004, memoryArray.get(4));
				assertEquals(0x0005, memoryArray.get(5));
				assertEquals(0x0006, memoryArray.get(6));
				assertEquals(0x0007, memoryArray.get(7));
				assertEquals(0x0008, memoryArray.get(8));
				assertEquals(0x0009, memoryArray.get(9));
		}
}</code></pre>
</div>
</div>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span><span class=""n"">test</span><span class=""p"">.</span><span class=""n"">run_test_file</span><span class=""p"">(</span><span class=""s1"">'ProgramTest.py'</span><span class=""p"">,</span> <span class=""s1"">'Program'</span><span class=""p"">)</span>
</pre></div>

    </div>
</div>
</div>

<div class=""output_wrapper"">
<div class=""output"">


<div class=""output_area"">

    <div class=""prompt""></div>




<div class=""output_subarea output_text output_result"">
<pre>TestResults(failed=0, attempted=10)
</pre>
</div>

</div>

<div class=""output_area"">

    <div class=""prompt output_prompt"">Out[2]:</div>




<div class=""output_subarea output_text output_stream output_stdout output_text"">
<pre>&lt;TestResults tests=10 errors=0 failures=0&gt;
</pre>
</div>

</div>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Test-Driven-Development-in-Python"">Test-Driven Development in Python<a class=""anchor-link"" href=""#Test-Driven-Development-in-Python"">&#182;</a></h2><p>Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements.</p>
<p>Test-driven development is related to the test-first programming concepts of extreme programming, begun in 1999, but more recently has created more general interest in its own right.</p>
<p>Kent Beck, who is credited with having developed or ""rediscovered"" the technique, stated in 2003 that TDD encourages simple designs and inspires confidence.</p>
<p>Programmers also apply the concept to improving and debugging legacy code developed with older techniques.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
<ol>
<li>Add a test</li>
<li>Run all tests and see if the new one fails</li>
<li>Write some code</li>
<li>Run tests</li>
<li>Refactor code</li>
<li>Repeat</li>
</ol>
<p>The cycle is repeated until all function requirements are met.</p>
<p>The following sequence is based on the book Test Driven Development by Example.</p>
"
cmpl-6tzVuJp5aKZejhLXbDxa9JxZsNLQB,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/Game.java,111.28143763542175,length,"// Game.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;

/**
 * This class coordinates rounds, entrants, and the simulation frame buffer.
 *
 * @author Daniel Pitts
 */
public class Game implements RoundListener {

    private RoundState roundState;

    private Round round;

    private int roundNumber = 0;

    private int totalRounds;

    private int maxProcessorSpeed = 5;

    private final FrameBuilder frameBuffer;

    private final List<RobotFactory> entrants = Collections.synchronizedList(new ArrayList<RobotFactory>());

    private int nextEntrantId;

    private final Map<RobotFactory, RobotScoreKeeper> scoreKeepers = new IdentityHashMap<RobotFactory, RobotScoreKeeper>();

    public Game(int totalRounds) {
        this(totalRounds, new FrameBuilder());
    }

    public Game(int totalRounds, FrameBuilder frameBuffer) {
        this.totalRounds = totalRounds;
        this.frameBuffer = frameBuffer;
    }

    /**
     * Get the current round.
     *
     * @return the current round.
     */
    public synchronized Round getRound() {
        return round;
    }

    /**
     * Get the total number of rounds.
     *
     * @return the total number of rounds.
     */
    public synchronized int getTotalRounds() {
        return totalRounds;
    }

    /**
     * Start the next round. This ends the current round.
     */
    public synchronized void nextRound() {
        if (round != null) {
            round.finalizeRound();
        }
        if (roundNumber < getTotalRounds()) {
            roundState = new StandardRoundState(totalRounds, ++roundNumber);
            round = new Round(frameBuffer);
            round.addRoundListener(this);
            for (int i = 0, entrantsSize = entrants.size(); i < entrantsSize; i++) {
                round.getArena().addRobot(createRobotFor(entrants.get(i), i));
            }
            round.getArena().buildFrame();
        } else {
            round = null;
            gameOver();
        }
    }

    private void gameOver() {
    }

    /**
     * Create a robot for the given entrant.
     *
     * @param entrant the entrant
     * @param id      the id for the robot.
     * @return the robot.
     */
    protected Robot createRobotFor(RobotFactory entrant, int id) {
        return entrant.createRobot(roundState, getMaxProcessorSpeed(), getScoreKeeper(entrant), round.getArena(), id);
    }

    private RobotScoreKeeper getScoreKeeper(RobotFactory entrant) {
        RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            robotScoreKeeper = new RobotScoreKeeper();
            scoreKeepers.put(entrant, robotScoreKeeper);
        }
        return robotScoreKeeper;
    }

    private RobotScore getFinalRobotScore(RobotFactory entrant) {
        final RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            throw new IllegalArgumentException(""Entrant did not participate in this game, so you can't get its final score."");
        }
        return FinalRobotScore.copyOf(getScoreKeeper(entrant));
    }

    public GameResult getFinalResults() {
        List<RobotGameResult> results = new ArrayList<RobotGameResult>();
        for (Map.Entry<RobotFactory, RobotScoreKeeper> robots : scoreKeepers.entrySet()) {
            results.add(new RobotGameResult(robots.getKey(), FinalRobotScore.copyOf(robots.getValue())));
        }
        Collections.sort(results);
        return new GameResult(results);
    }

    /**
     * Add an observer.
     *
     * @param observer the observer to add.
     */
    public synchronized void addSimulationObserver(SimulationObserver observer) {
        frameBuffer.addSimulationObserver(observer);
    }

    /**
     * Remove an observer.
     *
     * @param observer the observer to remove.
     */
    public synchronized void removeSimulationObserver(SimulationObserver observer) {
        frameBuffer.removeSimulationObserver(observer);
    }

    /**
     * Add an entrant for the next round.
     *
     * @param entrant the entrant
     */
    public synchronized void addEntrant(RobotFactory entrant) {
        entrants.add(entrant);
    }

    /**
     * Execute one step in the simulation.
     */
    public synchronized boolean stepRound() {
        if (round == null) {
            return false;
        }
        getRound().step();
        return round != null;
    }

    public void roundOver() {
        nextRound();
    }

    public int getMaxProcessorSpeed() {
        return maxProcessorSpeed;
    }

    public void setMaxProcessorSpeed(int maxProcessorSpeed) {
        this.maxProcessorSpeed = maxProcessorSpeed;
    }
}
","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {

		private static final int TOTAL_ROUNDS = 1;
		
		private static final int MAX_PROCESSOR_SPEED = 5;
		
		private static final int MAX_ROBOTS = 2;
		
		private static final int MAX_ROBOT_ID = 1;
		
		private static final int MAX_ROBOT_SCORE = 1;
		
		private static final int MAX_ROBOT_KILLS = 1;
		
		private static final int MAX_ROBOT_DEATHS = 1;
		
		private static final int MAX_ROBOT_DAMAGE_INFLICTED = 1;
		
		private static final int MAX_ROBOT_DAMAGE_RECEIVED = 1;
		
		private static final int MAX_ROBOT_ENERGY = 1;
		
		private static final int MAX_ROBOT_SHIELD = 1;
		
		private static final int MAX_ROBOT_ACCELERATION = 1;
		
		private static final int MAX_ROBOT_SPEED = 1;
		
		private static final int MAX_ROBOT_HEADING = 1;
		
		private static final int MAX_ROBOT_X = 1;
		
		private static final int MAX_ROBOT_Y = 1;
		
		private static final int MAX_ROBOT_GUN_HEATING = 1;
		
		private static final int MAX_ROBOT_GUN_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_X = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_Y = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_SPEED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ENERGY = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_SHIELD = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_DAMAGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_DISTANCE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_BEARING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_HEADING_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_SPEED_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ENERGY_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_SHIELD_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_DAMAGE_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_DISTANCE_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_BEARING_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_TIME = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_CYCLE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROUND = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_TURN = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_ID = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_NAME = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_TEAM = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_TYPE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_SCORE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_KILLS = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_DEATHS = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_DAMAGE_INFLICTED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_DAMAGE_RECEIVED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_ENERGY = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_SHIELD = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_ACCELERATION = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_SPEED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_X = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_Y = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_GUN_HEATING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_GUN_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_X = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_Y = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SPEED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ENERGY = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SHIELD = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DAMAGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DISTANCE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_BEARING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_HEADING_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SPEED_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ENERGY_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SHIELD_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DAMAGE_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DISTANCE_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_BEARING_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_TIME = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_CYCLE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROUND = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_TURN = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_ID = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_NAME = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_TEAM = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_TYPE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_SCORE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_KILLS = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_DEATHS = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_DAMAGE_INFLICTED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_DAMAGE_RECEIVED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_ENERGY = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_SHIELD = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_ACCELERATION = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_SPEED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_X = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_Y = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_GUN_HEATING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_GUN_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_X = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_Y = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_HEADING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SPEED = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ENERGY = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SHIELD = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DAMAGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_DISTANCE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_BEARING = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_HEADING_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_SPEED_CHANGE = 1;
		
		private static final int MAX_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ROBOT_RADAR_LOCKED_ENERGY_CHANGE = 1;
	"
