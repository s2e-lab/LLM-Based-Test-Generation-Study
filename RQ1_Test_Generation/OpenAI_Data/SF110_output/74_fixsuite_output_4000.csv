ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uB7upDZD1GYCtNbYmqF8nuyaWX8k,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_0Test.java,82.15812397003174,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(int)} method.
*/
class ComponentInfo_0Test {","// ComponentInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(int)} method.
*/
class ComponentInfo_0Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is null.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns null.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase1() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = null;
			assertNull(componentInfo.getField(0));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is empty.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns null.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase2() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			assertNull(componentInfo.getField(0));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains a key-value pair.</li>
		 * <li>The key of the key-value pair is equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase3() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(0, fieldInfo);
			assertEquals(fieldInfo, componentInfo.getField(0));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains a key-value pair.</li>
		 * <li>The key of the key-value pair is not equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns null.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase4() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(1, fieldInfo);
			assertNull(componentInfo.getField(0));
		}
		
		/**
		 * Test case 5.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains two key-value pairs.</li>
		 * <li>The key of the first key-value pair is not equal to the tag number.</li>
		 * <li>The key of the second key-value pair is equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the second key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase5() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo1 = new FieldInfo();
			FieldInfo fieldInfo2 = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(1, fieldInfo1);
			componentInfo.fieldsByTagNumber.put(0, fieldInfo2);
			assertEquals(fieldInfo2, componentInfo.getField(0));
		}
		
		/**
		 * Test case 6.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains two key-value pairs.</li>
		 * <li>The key of the first key-value pair is equal to the tag number.</li>
		 * <li>The key of the second key-value pair is not equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the first key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase6() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo1 = new FieldInfo();
			FieldInfo fieldInfo2 = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(0, fieldInfo1);
			componentInfo.fieldsByTagNumber.put(1, fieldInfo2);
			assertEquals(fieldInfo1, componentInfo.getField(0));
		}
		
		/**
		 * Test case 7.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains three key-value pairs.</li>
		 * <li>The key of the first key-value pair is not equal to the tag number.</li>
		 * <li>The key of the second key-value pair is equal to the tag number.</li>
		 * <li>The key of the third key-value pair is not equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the second key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase7() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo1 = new FieldInfo();
			FieldInfo fieldInfo2 = new FieldInfo();
			FieldInfo fieldInfo3 = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(1, fieldInfo1);
			componentInfo.fieldsByTagNumber.put(0, fieldInfo2);
			componentInfo.fieldsByTagNumber.put(2, fieldInfo3);
			assertEquals(fieldInfo2, componentInfo.getField(0));
		}
		
		/**
		 * Test case 8.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains three key-value pairs.</li>
		 * <li>The key of the first key-value pair is equal to the tag number.</li>
		 * <li>The key of the second key-value pair is not equal to the tag number.</li>
		 * <li>The key of the third key-value pair is not equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the first key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase8() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo1 = new FieldInfo();
			FieldInfo fieldInfo2 = new FieldInfo();
			FieldInfo fieldInfo3 = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(0, fieldInfo1);
			componentInfo.fieldsByTagNumber.put(1, fieldInfo2);
			componentInfo.fieldsByTagNumber.put(2, fieldInfo3);
			assertEquals(fieldInfo1, componentInfo.getField(0));
		}
		
		/**
		 * Test case 9.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method is called.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not null.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field is not empty.</li>
		 * <li>The {@link ComponentInfo#fieldsByTagNumber} field contains three key-value pairs.</li>
		 * <li>The key of the first key-value pair is not equal to the tag number.</li>
		 * <li>The key of the second key-value pair is equal to the tag number.</li>
		 * <li>The key of the third key-value pair is not equal to the tag number.</li>
		 * </ul>
		 * </p>
		 * 
		 * <p>
		 * Expected:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method returns the value of the second key-value pair.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testCase9() {
			ComponentInfo componentInfo = new ComponentInfo();
			componentInfo.fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
			FieldInfo fieldInfo1 = new FieldInfo();
			FieldInfo fieldInfo2 = new FieldInfo();
			FieldInfo fieldInfo3 = new FieldInfo();
			componentInfo.fieldsByTagNumber.put(1, fieldInfo1);
			componentInfo.fieldsByTagNumber.put(0, fieldInfo2);
			componentInfo.fieldsByTagNumber.put(2, fieldInfo3);
			assertEquals(fieldInfo2, componentInfo.getField(0));
		}
		
		/**
		 * Test case 10.
		 * 
		 * <p>
		 * Test case for the {@link ComponentInfo#getField(int)} method.
		 * </p>
		 * 
		 * <p>
		 * Condition:
		 * <ul>
		 * <li>The {@link ComponentInfo#getField(int)} method"
cmpl-6uB9ExWjbgR4te0Gp6d592reWdvuv,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_1Test.java,82.93542861938477,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(String)} method.
*/
class ComponentInfo_1Test {","// ComponentInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(String)} method.
*/
class ComponentInfo_1Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map is null.
		 * </p>
		 */
		@Test
		void testGetField_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = null;
				assertNull(componentInfo.getField(""""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map is empty.
		 * </p>
		 */
		@Test
		void testGetField_2() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				assertNull(componentInfo.getField(""""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains one element.
		 * </p>
		 */
		@Test
		void testGetField_3() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains two elements.
		 * </p>
		 */
		@Test
		void testGetField_4() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 5.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains three elements.
		 * </p>
		 */
		@Test
		void testGetField_5() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 6.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains four elements.
		 * </p>
		 */
		@Test
		void testGetField_6() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 7.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains five elements.
		 * </p>
		 */
		@Test
		void testGetField_7() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				FieldInfo fieldInfo5 = new FieldInfo();
				fieldInfo5.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo5);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 8.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains six elements.
		 * </p>
		 */
		@Test
		void testGetField_8() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				FieldInfo fieldInfo5 = new FieldInfo();
				fieldInfo5.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo5);
				FieldInfo fieldInfo6 = new FieldInfo();
				fieldInfo6.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo6);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 9.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains seven elements.
		 * </p>
		 */
		@Test
		void testGetField_9() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				FieldInfo fieldInfo5 = new FieldInfo();
				fieldInfo5.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo5);
				FieldInfo fieldInfo6 = new FieldInfo();
				fieldInfo6.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo6);
				FieldInfo fieldInfo7 = new FieldInfo();
				fieldInfo7.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo7);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 10.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains eight elements.
		 * </p>
		 */
		@Test
		void testGetField_10() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				FieldInfo fieldInfo5 = new FieldInfo();
				fieldInfo5.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo5);
				FieldInfo fieldInfo6 = new FieldInfo();
				fieldInfo6.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo6);
				FieldInfo fieldInfo7 = new FieldInfo();
				fieldInfo7.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo7);
				FieldInfo fieldInfo8 = new FieldInfo();
				fieldInfo8.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo8);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
}

// ComponentInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_2Test {
		
		/**
		 * Test case 1.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getComponent(String)} method
		 * when the componentsByName map is null.
		 * </p>
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.componentsByName = null;
				assertNull(componentInfo.getComponent(""""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getComponent(String)} method
		 * when the componentsByName map is empty.
		 * </p>
		 */
		@Test
		void testGetComponent_2() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.componentsByName = new TreeMap<String, ComponentInfo>();
				assertNull(componentInfo.getComponent(""""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getComponent(String)} method
		 * when the componentsByName map contains one element.
		 * </p>
		 */
		@Test
		void testGetComponent_3() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.componentsByName = new TreeMap<String, ComponentInfo>();
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setName("""");
				componentInfo.componentsByName.put("""", componentInfo2);
				assertEquals(componentInfo2, componentInfo.getComponent(""""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getComponent(String)} method
		 * when the componentsByName map contains two elements.
		 * </p>
		 */
		@Test
		void testGetComponent_4() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.componentsByName = new TreeMap<String, ComponentInfo>();
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setName("""");
				componentInfo.componentsByName.put("""", componentInfo2);
				ComponentInfo componentInfo3 = new ComponentInfo();
				componentInfo3.setName("""");
				componentInfo.componentsByName.put("""", componentInfo3);
				assertEquals(componentInfo2, componentInfo.getComponent(""""));"
cmpl-6uBAZxGfLyqalqgxXZDJLN2L2ZuUr,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_2Test.java,89.57050895690918,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(int)} method.
*/
class ComponentInfo_2Test {","// ComponentInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(int)} method.
*/
class ComponentInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(2);
				
				assertEquals(componentInfo2, result);
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_2() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(1);
				
				assertEquals(componentInfo, result);
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_3() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(3);
				
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_4() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(0);
				
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_5() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(2);
				
				assertEquals(componentInfo2, result);
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_6() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(1);
				
				assertEquals(componentInfo, result);
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_7() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(3);
				
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_8() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(0);
				
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_9() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(2);
				
				assertEquals(componentInfo2, result);
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_10() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo result = componentInfo.getComponent(1);
				
				assertEquals(componentInfo, result);
		}
}

// ComponentInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * @see ComponentInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.set"
cmpl-6uBC1cidLRzXFAeSSTLcIlcWt9MpA,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_3Test.java,85.27160978317261,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_3Test {","// ComponentInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_3Test {

		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * @see ComponentInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setValue(""value"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setMinLength(1);
				fieldInfo.setMaxLength(1);
				fieldInfo.setMinValue(""minValue"");
				fieldInfo.setMaxValue(""maxValue"");
				fieldInfo.setMinInclusive(true);
				fieldInfo.setMaxInclusive(true);
				fieldInfo.setCharacterEncoding(""characterEncoding"");
				fieldInfo.setDataType(""dataType"");
				fieldInfo.setFormat(""format"");
				fieldInfo.setLengthId(""lengthId"");
				fieldInfo.setLengthUsage(""lengthUsage"");
				fieldInfo.setMaxOccurs(""maxOccurs"");
				fieldInfo.setMinOccurs(""minOccurs"");
				fieldInfo.setOrder(""order"");
				fieldInfo.setPresence(""presence"");
				fieldInfo.setText(""text"");
				fieldInfo.setType(""type"");
				fieldInfo.setUsageLength(""usageLength"");
				fieldInfo.setUsageType(""usageType"");
				fieldInfo.setValue(""value"");
				fieldInfo.setValueRef(""valueRef"");
				fieldInfo.setValueType(""valueType"");
				fieldInfo.setValueTypeId(""valueTypeId"");
				fieldInfo.setValueTypeVersion(""valueTypeVersion"");
				fieldInfo.setValueVersion(""valueVersion"");
				fieldInfo.setXmlAttribute(true);
				fieldInfo.setXmlElement(true);
				fieldInfo.setXmlEncoding(""xmlEncoding"");
				fieldInfo.setXmlNamespace(""xmlNamespace"");
				fieldInfo.setXmlPrefix(""xmlPrefix"");
				fieldInfo.setXmlType(""xmlType"");
				fieldInfo.setXmlValue(""xmlValue"");
				fieldInfo.setXmlValueRef(""xmlValueRef"");
				fieldInfo.setXmlValueType(""xmlValueType"");
				fieldInfo.setXmlValueTypeId(""xmlValueTypeId"");
				fieldInfo.setXmlValueTypeVersion(""xmlValueTypeVersion"");
				fieldInfo.setXmlValueVersion(""xmlValueVersion"");
				fieldInfo.setXmlVersion(""xmlVersion"");
				fieldInfo.setXmlVersionId(""xmlVersionId"");
				fieldInfo.setXmlVersionValue(""xmlVersionValue"");
				fieldInfo.setXmlVersionValueId(""xmlVersionValueId"");
				fieldInfo.setXmlVersionValueType(""xmlVersionValueType"");
				fieldInfo.setXmlVersionValueTypeId(""xmlVersionValueTypeId"");
				fieldInfo.setXmlVersionValueTypeVersion(""xmlVersionValueTypeVersion"");
				fieldInfo.setXmlVersionValueVersion(""xmlVersionValueVersion"");
				fieldInfo.setXmlVersionXmlAttribute(true);
				fieldInfo.setXmlVersionXmlElement(true);
				fieldInfo.setXmlVersionXmlEncoding(""xmlVersionXmlEncoding"");
				fieldInfo.setXmlVersionXmlNamespace(""xmlVersionXmlNamespace"");
				fieldInfo.setXmlVersionXmlPrefix(""xmlVersionXmlPrefix"");
				fieldInfo.setXmlVersionXmlType(""xmlVersionXmlType"");
				fieldInfo.setXmlVersionXmlValue(""xmlVersionXmlValue"");
				fieldInfo.setXmlVersionXmlValueRef(""xmlVersionXmlValueRef"");
				fieldInfo.setXmlVersionXmlValueType(""xmlVersionXmlValueType"");
				fieldInfo.setXmlVersionXmlValueTypeId(""xmlVersionXmlValueTypeId"");
				fieldInfo.setXmlVersionXmlValueTypeVersion(""xmlVersionXmlValueTypeVersion"");
				fieldInfo.setXmlVersionXmlValueVersion(""xmlVersionXmlValueVersion"");
				fieldInfo.setXmlVersionXmlVersion(""xmlVersionXmlVersion"");
				fieldInfo.setXmlVersionXmlVersionId(""xmlVersionXmlVersionId"");
				fieldInfo.setXmlVersionXmlVersionValue(""xmlVersionXmlVersionValue"");
				fieldInfo.setXmlVersionXmlVersionValueId(""xmlVersionXmlVersionValueId"");
				fieldInfo.setXmlVersionXmlVersionValueType(""xmlVersionXmlVersionValueType"");
				fieldInfo.setXmlVersionXmlVersionValueTypeId(""xmlVersionXmlVersionValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionValueTypeVersion(""xmlVersionXmlVersionValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionValueVersion(""xmlVersionXmlVersionValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlAttribute(true);
				fieldInfo.setXmlVersionXmlVersionXmlElement(true);
				fieldInfo.setXmlVersionXmlVersionXmlEncoding(""xmlVersionXmlVersionXmlEncoding"");
				fieldInfo.setXmlVersionXmlVersionXmlNamespace(""xmlVersionXmlVersionXmlNamespace"");
				fieldInfo.setXmlVersionXmlVersionXmlPrefix(""xmlVersionXmlVersionXmlPrefix"");
				fieldInfo.setXmlVersionXmlVersionXmlType(""xmlVersionXmlVersionXmlType"");
				fieldInfo.setXmlVersionXmlVersionXmlValue(""xmlVersionXmlVersionXmlValue"");
				fieldInfo.setXmlVersionXmlVersionXmlValueRef(""xmlVersionXmlVersionXmlValueRef"");
				fieldInfo.setXmlVersionXmlVersionXmlValueType(""xmlVersionXmlVersionXmlValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlValueTypeId(""xmlVersionXmlVersionXmlValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlValueTypeVersion(""xmlVersionXmlVersionXmlValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlValueVersion(""xmlVersionXmlVersionXmlValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersion(""xmlVersionXmlVersionXmlVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionId(""xmlVersionXmlVersionXmlVersionId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValue(""xmlVersionXmlVersionXmlVersionValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValueId(""xmlVersionXmlVersionXmlVersionValueId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValueType(""xmlVersionXmlVersionXmlVersionValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValueTypeId(""xmlVersionXmlVersionXmlVersionValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValueTypeVersion(""xmlVersionXmlVersionXmlVersionValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionValueVersion(""xmlVersionXmlVersionXmlVersionValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlAttribute(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlElement(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlEncoding(""xmlVersionXmlVersionXmlVersionXmlEncoding"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlNamespace(""xmlVersionXmlVersionXmlVersionXmlNamespace"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlPrefix(""xmlVersionXmlVersionXmlVersionXmlPrefix"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlType(""xmlVersionXmlVersionXmlVersionXmlType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValue(""xmlVersionXmlVersionXmlVersionXmlValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValueRef(""xmlVersionXmlVersionXmlVersionXmlValueRef"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValueType(""xmlVersionXmlVersionXmlVersionXmlValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValueTypeId(""xmlVersionXmlVersionXmlVersionXmlValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValueTypeVersion(""xmlVersionXmlVersionXmlVersionXmlValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlValueVersion(""xmlVersionXmlVersionXmlVersionXmlValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersion(""xmlVersionXmlVersionXmlVersionXmlVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionId(""xmlVersionXmlVersionXmlVersionXmlVersionId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValue(""xmlVersionXmlVersionXmlVersionXmlVersionValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValueId(""xmlVersionXmlVersionXmlVersionXmlVersionValueId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValueType(""xmlVersionXmlVersionXmlVersionXmlVersionValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValueTypeId(""xmlVersionXmlVersionXmlVersionXmlVersionValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValueTypeVersion(""xmlVersionXmlVersionXmlVersionXmlVersionValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionValueVersion(""xmlVersionXmlVersionXmlVersionXmlVersionValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlAttribute(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlElement(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlEncoding(""xmlVersionXmlVersionXmlVersionXmlVersionXmlEncoding"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlNamespace(""xmlVersionXmlVersionXmlVersionXmlVersionXmlNamespace"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlPrefix(""xmlVersionXmlVersionXmlVersionXmlVersionXmlPrefix"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlType(""xmlVersionXmlVersionXmlVersionXmlVersionXmlType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValue(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValueRef(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValueRef"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValueType(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValueTypeId(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValueTypeVersion(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlValueVersion(""xmlVersionXmlVersionXmlVersionXmlVersionXmlValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersion(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionId(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValue(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueId(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueType(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueTypeId(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueTypeId"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueTypeVersion(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueTypeVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueVersion(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionValueVersion"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlAttribute(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlElement(true);
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlEncoding(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlEncoding"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlNamespace(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlNamespace"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlPrefix(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlPrefix"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlType(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlType"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlValue(""xmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlValue"");
				fieldInfo.setXmlVersionXmlVersionXmlVersionXmlVersionXmlVersionXmlValueRef(""xmlVersionXmlVersionXmlVersionXmlVersionXml"
cmpl-6uBDOif5CMnKFHW2dOVH6B08vmORm,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,84.63844633102417,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private List<FieldInfo> fields;
		
		private int tagNumber;
		
		private String name;
		
		private String type;
		
		private String description;
		
		private String value;
		
		private String enumType;
		
		private String fixVersion;
		
		private String category;
		
		private String group;
		
		private String component;
		
		private String usage;
		
		private String added;
		
		private String deprecated;
		
		private String updated;
		
		private String addedEP;
		
		private String deprecatedEP;
		
		private String updatedEP;
		
		private String addedFIX;
		
		private String deprecatedFIX;
		
		private String updatedFIX;
		
		private String addedFIXT;
		
		private String deprecatedFIXT;
		
		private String updatedFIXT;
		
		private String addedFIX50;
		
		private String deprecatedFIX50;
		
		private String updatedFIX50;
		
		private String addedFIX50SP1;
		
		private String deprecatedFIX50SP1;
		
		private String updatedFIX50SP1;
		
		private String addedFIX50SP2;
		
		private String deprecatedFIX50SP2;
		
		private String updatedFIX50SP2;
		
		private String addedFIXT11;
		
		private String deprecatedFIXT11;
		
		private String updatedFIXT11;
		
		private String addedFIXT12;
		
		private String deprecatedFIXT12;
		
		private String updatedFIXT12;
		
		private String addedFIXT13;
		
		private String deprecatedFIXT13;
		
		private String updatedFIXT13;
		
		private String addedFIXT14;
		
		private String deprecatedFIXT14;
		
		private String updatedFIXT14;
		
		private String addedFIXT15;
		
		private String deprecatedFIXT15;
		
		private String updatedFIXT15;
		
		private String addedFIXT16;
		
		private String deprecatedFIXT16;
		
		private String updatedFIXT16;
		
		private String addedFIXT17;
		
		private String deprecatedFIXT17;
		
		private String updatedFIXT17;
		
		private String addedFIXT18;
		
		private String deprecatedFIXT18;
		
		private String updatedFIXT18;
		
		private String addedFIXT19;
		
		private String deprecatedFIXT19;
		
		private String updatedFIXT19;
		
		private String addedFIXT20;
		
		private String deprecatedFIXT20;
		
		private String updatedFIXT20;
		
		private String addedFIXT21;
		
		private String deprecatedFIXT21;
		
		private String updatedFIXT21;
		
		private String addedFIXT22;
		
		private String deprecatedFIXT22;
		
		private String updatedFIXT22;
		
		private String addedFIXT23;
		
		private String deprecatedFIXT23;
		
		private String updatedFIXT23;
		
		private String addedFIXT24;
		
		private String deprecatedFIXT24;
		
		private String updatedFIXT24;
		
		private String addedFIXT25;
		
		private String deprecatedFIXT25;
		
		private String updatedFIXT25;
		
		private String addedFIXT26;
		
		private String deprecatedFIXT26;
		
		private String updatedFIXT26;
		
		private String addedFIXT27;
		
		private String deprecatedFIXT27;
		
		private String updatedFIXT27;
		
		private String addedFIXT28;
		
		private String deprecatedFIXT28;
		
		private String updatedFIXT28;
		
		private String addedFIXT29;
		
		private String deprecatedFIXT29;
		
		private String updatedFIXT29;
		
		private String addedFIXT30;
		
		private String deprecatedFIXT30;
		
		private String updatedFIXT30;
		
		private String addedFIXT31;
		
		private String deprecatedFIXT31;
		
		private String updatedFIXT31;
		
		private String addedFIXT32;
		
		private String deprecatedFIXT32;
		
		private String updatedFIXT32;
		
		private String addedFIXT33;
		
		private String deprecatedFIXT33;
		
		private String updatedFIXT33;
		
		private String addedFIXT34;
		
		private String deprecatedFIXT34;
		
		private String updatedFIXT34;
		
		private String addedFIXT35;
		
		private String deprecatedFIXT35;
		
		private String updatedFIXT35;
		
		private String addedFIXT36;
		
		private String deprecatedFIXT36;
		
		private String updatedFIXT36;
		
		private String addedFIXT37;
		
		private String deprecatedFIXT37;
		
		private String updatedFIXT37;
		
		private String addedFIXT38;
		
		private String deprecatedFIXT38;
		
		private String updatedFIXT38;
		
		private String addedFIXT39;
		
		private String deprecatedFIXT39;
		
		private String updatedFIXT39;
		
		private String addedFIXT40;
		
		private String deprecatedFIXT40;
		
		private String updatedFIXT40;
		
		private String addedFIXT41;
		
		private String deprecatedFIXT41;
		
		private String updatedFIXT41;
		
		private String addedFIXT42;
		
		private String deprecatedFIXT42;
		
		private String updatedFIXT42;
		
		private String addedFIXT43;
		
		private String deprecatedFIXT43;
		
		private String updatedFIXT43;
		
		private String addedFIXT44;
		
		private String deprecatedFIXT44;
		
		private String updatedFIXT44;
		
		private String addedFIXT45;
		
		private String deprecatedFIXT45;
		
		private String updatedFIXT45;
		
		private String addedFIXT46;
		
		private String deprecatedFIXT46;
		
		private String updatedFIXT46;
		
		private String addedFIXT47;
		
		private String deprecatedFIXT47;
		
		private String updatedFIXT47;
		
		private String addedFIXT48;
		
		private String deprecatedFIXT48;
		
		private String updatedFIXT48;
		
		private String addedFIXT49;
		
		private String deprecatedFIXT49;
		
		private String updatedFIXT49;
		
		private String addedFIXT50;
		
		private String deprecatedFIXT50;
		
		private String updatedFIXT50;
		
		private String addedFIXT51;
		
		private String deprecatedFIXT51;
		
		private String updatedFIXT51;
		
		private String addedFIXT52;
		
		private String deprecatedFIXT52;
		
		private String updatedFIXT52;
		
		private String addedFIXT53;
		
		private String deprecatedFIXT53;
		
		private String updatedFIXT53;
		
		private String addedFIXT54;
		
		private String deprecatedFIXT54;
		
		private String updatedFIXT54;
		
		private String addedFIXT55;
		
		private String deprecatedFIXT55;
		
		private String updatedFIXT55;
		
		private String addedFIXT56;
		
		private String deprecatedFIXT56;
		
		private String updatedFIXT56;
		
		private String addedFIXT57;
		
		private String deprecatedFIXT57;
		
		private String updatedFIXT57;
		
		private String addedFIXT58;
		
		private String deprecatedFIXT58;
		
		private String updatedFIXT58;
		
		private String addedFIXT59;
		
		private String deprecatedFIXT59;
		
		private String updatedFIXT59;
		
		private String addedFIXT60;
		
		private String deprecatedFIXT60;
		
		private String updatedFIXT60;
		
		private String addedFIXT61;
		
		private String deprecatedFIXT61;
		
		private String updatedFIXT61;
		
		private String addedFIXT62;
		
		private String deprecatedFIXT62;
		
		private String updatedFIXT62;
		
		private String addedFIXT63;
		
		private String deprecatedFIXT63;
		
		private String updatedFIXT63;
		
		private String addedFIXT64;
		
		private String deprecatedFIXT64;
		
		private String updatedFIXT64;
		
		private String addedFIXT65;
		
		private String deprecatedFIXT65;
		
		private String updatedFIXT65;
		
		private String addedFIXT66;
		
		private String deprecatedFIXT66;
		
		private String updatedFIXT66;
		
		private String addedFIXT67;
		
		private String deprecatedFIXT67;
		
		private String updatedFIXT67;
		
		private String addedFIXT68;
		
		private String deprecatedFIXT68;
		
		private String updatedFIXT68;
		
		private String addedFIXT69;
		
		private String deprecatedFIXT69;
		
		private String updatedFIXT69;
		
		private String addedFIXT70;
		
		private String deprecatedFIXT70;
		
		private String updatedFIXT70;
		
		private String addedFIXT71;
		
		private String deprecatedFIXT71;
		
		private String updatedFIXT71;
		
		private String addedFIXT72;
		
		private String deprecatedFIXT72;
		
		private String updatedFIXT72;
		
		private String addedFIXT73;
		
		private String deprecatedFIXT73;
		
		private String updatedFIXT73;
		
		private String addedFIXT74;
		
		private String deprecatedFIXT74;
		
		private String updatedFIXT74;
		
		private String addedFIXT75;
		
		private String deprecatedFIXT75;
		
		private String updatedFIXT75;
		
		private String addedFIXT76;
		
		private String deprecatedFIXT76;
		
		private String updatedFIXT76;
		
		private String addedFIXT77;
		
		private String deprecatedFIXT77;
		
		private String updatedFIXT77;
		
		private String addedFIXT78;
		
		private String deprecatedFIXT78;
		
		private String updatedFIXT78;
		
		private String addedFIXT79;
		
		private String deprecatedFIXT79;
		
		private String updatedFIXT79;
		
		private String addedFIXT80;
		
		private String deprecatedFIXT80;
		
		private String updatedFIXT80;
		
		private String addedFIXT81;
		
		private String deprecatedFIXT81;
		
		private String updatedFIXT81;
		
		private String addedFIXT82;
		
		private String deprecatedFIXT82;
		
		private String updatedFIXT82;
		
		private String addedFIXT83;
		
		private String deprecatedFIXT83;
		
		private String updatedFIXT83;
		
		private String addedFIXT84;
		
		private String deprecatedFIXT84;
		
		private String updatedFIXT84;
		
		private String addedFIXT85;
		
		private String deprecatedFIXT85;
		
		private String updatedFIXT85;
		
		private String addedFIXT86;
		
		private String deprecatedFIXT86;
		
		private String updatedFIXT86;
		
		private String addedFIXT87;
		
		private String deprecatedFIXT87;
		
		private String updatedFIXT87;
		
		private String addedFIXT88;
		
		private String deprecatedFIXT88;
		
		private String updatedFIXT88;
		
		private String addedFIXT89;
		
		private String deprecatedFIXT89;
		
		private String updatedFIXT89;
		
		private String addedFIXT90;
		
		private String deprecatedFIXT90;
		
		private String updatedFIXT90;
		
		private String addedFIXT91;
		
		private String deprecatedFIXT91;
		
		private String updatedFIXT91;
		
		private String addedFIXT92;
		
		private String deprecatedFIXT92;
		
		private String updatedFIXT92;
		
		private String addedFIXT93;
		
		private String deprecatedFIXT93;
		
		private String updatedFIXT93;
		
		private String addedFIXT94;
		
		private String deprecatedFIXT94;
		
		private String updatedFIXT94;
		
		private String addedFIXT95;
		
		private String deprecatedFIXT95;
		
		private String updatedFIXT95;
		
		private String addedFIXT96;
		
		private String deprecatedFIXT96;
		
		private String updatedFIXT96;
		
		private String addedFIXT97;
		
		private String deprecatedFIXT97;
		
		private String updatedFIXT97;
		
		private String addedFIXT98;
		
		private String deprecatedFIXT98;
		
		private String updatedFIXT98;
		
		private String addedFIXT99;
		
		private String deprecatedFIXT99;
		
		private String updatedFIXT99;
		
		private String addedFIXT100;
		
		private String deprecatedFIXT100;
		
		private String updatedFIXT100;
		
		private String addedFIXT101;
		
		private String deprecatedFIXT101;
		
		private String updatedFIXT101;
		
		private String addedFIXT102"
cmpl-6uBElKTZPQGPe7f86Ld1Z1CLiXZ2R,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,85.97790026664734,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private String name;
		
		private FieldInfo result;
		
		private List<FieldInfo> fields;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private int tagNumber;
		
		private TreeMap<String, ComponentInfo> componentsByName;
		
		private ComponentInfo componentInfo;
		
		private TreeMap<Integer, ComponentInfo> componentsById;
		
		private int id;
		
		private List<ComponentInfo> components;
		
		private TreeMap<String, MessageInfo> messagesByName;
		
		private MessageInfo messageInfo;
		
		private TreeMap<Integer, MessageInfo> messagesById;
		
		private List<MessageInfo> messages;
		
		private String version;
		
		private int loadCount;
		
		private boolean result2;
		
		private boolean result3;
		
		private boolean result4;
		
		private boolean result5;
		
		private boolean result6;
		
		private boolean result7;
		
		private boolean result8;
		
		private boolean result9;
		
		private boolean result10;
		
		private boolean result11;
		
		private boolean result12;
		
		private boolean result13;
		
		private boolean result14;
		
		private boolean result15;
		
		private boolean result16;
		
		private boolean result17;
		
		private boolean result18;
		
		private boolean result19;
		
		private boolean result20;
		
		private boolean result21;
		
		private boolean result22;
		
		private boolean result23;
		
		private boolean result24;
		
		private boolean result25;
		
		private boolean result26;
		
		private boolean result27;
		
		private boolean result28;
		
		private boolean result29;
		
		private boolean result30;
		
		private boolean result31;
		
		private boolean result32;
		
		private boolean result33;
		
		private boolean result34;
		
		private boolean result35;
		
		private boolean result36;
		
		private boolean result37;
		
		private boolean result38;
		
		private boolean result39;
		
		private boolean result40;
		
		private boolean result41;
		
		private boolean result42;
		
		private boolean result43;
		
		private boolean result44;
		
		private boolean result45;
		
		private boolean result46;
		
		private boolean result47;
		
		private boolean result48;
		
		private boolean result49;
		
		private boolean result50;
		
		private boolean result51;
		
		private boolean result52;
		
		private boolean result53;
		
		private boolean result54;
		
		private boolean result55;
		
		private boolean result56;
		
		private boolean result57;
		
		private boolean result58;
		
		private boolean result59;
		
		private boolean result60;
		
		private boolean result61;
		
		private boolean result62;
		
		private boolean result63;
		
		private boolean result64;
		
		private boolean result65;
		
		private boolean result66;
		
		private boolean result67;
		
		private boolean result68;
		
		private boolean result69;
		
		private boolean result70;
		
		private boolean result71;
		
		private boolean result72;
		
		private boolean result73;
		
		private boolean result74;
		
		private boolean result75;
		
		private boolean result76;
		
		private boolean result77;
		
		private boolean result78;
		
		private boolean result79;
		
		private boolean result80;
		
		private boolean result81;
		
		private boolean result82;
		
		private boolean result83;
		
		private boolean result84;
		
		private boolean result85;
		
		private boolean result86;
		
		private boolean result87;
		
		private boolean result88;
		
		private boolean result89;
		
		private boolean result90;
		
		private boolean result91;
		
		private boolean result92;
		
		private boolean result93;
		
		private boolean result94;
		
		private boolean result95;
		
		private boolean result96;
		
		private boolean result97;
		
		private boolean result98;
		
		private boolean result99;
		
		private boolean result100;
		
		private boolean result101;
		
		private boolean result102;
		
		private boolean result103;
		
		private boolean result104;
		
		private boolean result105;
		
		private boolean result106;
		
		private boolean result107;
		
		private boolean result108;
		
		private boolean result109;
		
		private boolean result110;
		
		private boolean result111;
		
		private boolean result112;
		
		private boolean result113;
		
		private boolean result114;
		
		private boolean result115;
		
		private boolean result116;
		
		private boolean result117;
		
		private boolean result118;
		
		private boolean result119;
		
		private boolean result120;
		
		private boolean result121;
		
		private boolean result122;
		
		private boolean result123;
		
		private boolean result124;
		
		private boolean result125;
		
		private boolean result126;
		
		private boolean result127;
		
		private boolean result128;
		
		private boolean result129;
		
		private boolean result130;
		
		private boolean result131;
		
		private boolean result132;
		
		private boolean result133;
		
		private boolean result134;
		
		private boolean result135;
		
		private boolean result136;
		
		private boolean result137;
		
		private boolean result138;
		
		private boolean result139;
		
		private boolean result140;
		
		private boolean result141;
		
		private boolean result142;
		
		private boolean result143;
		
		private boolean result144;
		
		private boolean result145;
		
		private boolean result146;
		
		private boolean result147;
		
		private boolean result148;
		
		private boolean result149;
		
		private boolean result150;
		
		private boolean result151;
		
		private boolean result152;
		
		private boolean result153;
		
		private boolean result154;
		
		private boolean result155;
		
		private boolean result156;
		
		private boolean result157;
		
		private boolean result158;
		
		private boolean result159;
		
		private boolean result160;
		
		private boolean result161;
		
		private boolean result162;
		
		private boolean result163;
		
		private boolean result164;
		
		private boolean result165;
		
		private boolean result166;
		
		private boolean result167;
		
		private boolean result168;
		
		private boolean result169;
		
		private boolean result170;
		
		private boolean result171;
		
		private boolean result172;
		
		private boolean result173;
		
		private boolean result174;
		
		private boolean result175;
		
		private boolean result176;
		
		private boolean result177;
		
		private boolean result178;
		
		private boolean result179;
		
		private boolean result180;
		
		private boolean result181;
		
		private boolean result182;
		
		private boolean result183;
		
		private boolean result184;
		
		private boolean result185;
		
		private boolean result186;
		
		private boolean result187;
		
		private boolean result188;
		
		private boolean result189;
		
		private boolean result190;
		
		private boolean result191;
		
		private boolean result192;
		
		private boolean result193;
		
		private boolean result194;
		
		private boolean result195;
		
		private boolean result196;
		
		private boolean result197;
		
		private boolean result198;
		
		private boolean result199;
		
		private boolean result200;
		
		private boolean result201;
		
		private boolean result202;
		
		private boolean result203;
		
		private boolean result204;
		
		private boolean result205;
		
		private boolean result206;
		
		private boolean result207;
		
		private boolean result208;
		
		private boolean result209;
		
		private boolean result210;
		
		private boolean result211;
		
		private boolean result212;
		
		private boolean result213;
		
		private boolean result214;
		
		private boolean result215;
		
		private boolean result216;
		
		private boolean result217;
		
		private boolean result218;
		
		private boolean result219;
		
		private boolean result220;
		
		private boolean result221;
		
		private boolean result222;
		
		private boolean result223;
		
		private boolean result224;
		
		private boolean result225;
		
		private boolean result226;
		
		private boolean result227;
		
		private boolean result228;
		
		private boolean result229;
		
		private boolean result230;
		
		private boolean result231;
		
		private boolean result232;
		
		private boolean result233;
		
		private boolean result234;
		
		private boolean result235;
		
		private boolean result236;
		
		private boolean result237;
		
		private boolean result238;
		
		private boolean result239;
		
		private boolean result240;
		
		private boolean result241;
		
		private boolean result242;
		
		private boolean result243;
		
		private boolean result244;
		
		private boolean result245;
		
		private boolean result246;
		
		private boolean result247;
		
		private boolean result248;
		
		private boolean result249;
		
		private boolean result250;
		
		private boolean result251;
		
		private boolean result252;
		
		private boolean result253;
		
		private boolean result254;
		
		private boolean result255;
		
		private boolean result256;
		
		private boolean result257;
		
		private boolean result258;
		
		private boolean result259;
		
		private boolean result260;
		
		private boolean result261;
		
		private boolean result262;
		
		private boolean result263;
		
		private boolean result264;
		
		private boolean result265;
		
		private boolean result266;
		
		private boolean result267;
		
		private boolean result268;
		
		private boolean result269;
		
		private boolean result270;
		
		private boolean result271;
		
		private boolean result272;
		
		private boolean result273;
		
		private boolean result274;
		
		private boolean result275;
		
		private boolean result276;
		
		private boolean result277;
		
		private boolean result278;
		
		private boolean result279;
		
		private boolean result280;
		
		private boolean result281;
		
		private boolean result282;
		
		private boolean result283;
		
		private boolean result284;
		
		private boolean result285;
		
		private boolean result286;
		
		private boolean result287;
		
		private boolean result288;
		
		private boolean result289;
		
		private boolean result290;
		
		private boolean result291;
		
		private boolean result292;
		
		private boolean result293;
		
		private boolean result294;
		
		private boolean result295;
		
		private boolean result296;
		
		private boolean result297;
		
		private boolean result298;
		
		private boolean result299;
		
		private boolean result300;
		
		private boolean result301;
		
		private boolean result302;
		
		private boolean result303;
		
		private boolean result304;
		
		private boolean result305;
		
		private boolean result306;
		
		private boolean result307;
		
		private boolean result308;
		
		private boolean result309;
		
		private boolean result310;
		
		private boolean result311;
		
		private boolean result312;
		
		private boolean result313;
		
		private boolean result314;
		
		private boolean result315;
		
		private boolean result316;
		
		private boolean result317;
		
		private boolean result318;
		
		private boolean result319;
		
		private boolean result320;
		
		private boolean result321;
		
		private boolean result322;
		
		private boolean result323;
		
		private boolean result324;
		
		private boolean result325;
		
		private boolean result326;
		
		private boolean result327;
		
		private boolean result328;
		
		private boolean result329;
		
		private boolean result330;
		
		private boolean result331;
		
		private boolean result332;
		
		private boolean result333;
		
		private boolean result334;
		
		private boolean result335;
		
		private boolean result336;
		
		private boolean result337;
		
		private boolean result338;
		
		private boolean result339;
		
		private boolean result340;
		
		private boolean"
cmpl-6uBG8I6RQmDIW3lwxhleoPEpdP3lH,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,81.91094064712524,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the dictionary is not loaded.
		 * 		- The method returns null if the dictionary is loaded but the component is not found.
		 * 
		 * Test case 1 is a negative test case.
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(1));
				dictionaryInfo.incrementLoadCount();
				assertNull(dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 2 is a positive test case.
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 3 is a positive test case.
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 4 is a positive test case.
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 5 is a positive test case.
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 6 is a positive test case.
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * Test case 7 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 7 is a positive test case.
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * Test case 8 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 8 is a positive test case.
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * Test case 9 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 9 is a positive test case.
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * Test case 10 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 10 is a positive test case.
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
}

// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the dictionary is not loaded.
		 * 		- The method returns null if the dictionary is loaded but the component is not found.
		 * 
		 * Test case 1 is a negative test case.
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""TestComponent""));
				dictionaryInfo.incrementLoadCount();
				assertNull(dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 2 is a positive test case.
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 3 is a positive test case.
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 4 is a positive test case.
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 5 is a positive test case.
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoadCount();
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(""TestComponent""));
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns the component if the dictionary is loaded and the component is found.
		 * 
		 * Test case 6 is a positive test case.
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				dictionaryInfo.incrementLoadCount();
				dictionaryInfo.incrementLoad"
cmpl-6uBHSLphIxgBNjc3A8DW4iIChe9Nv,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,92.26896691322327,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {

		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 7 for method getComponent(String).
		 * 
		 * Test case 7 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 8 for method getComponent(String).
		 * 
		 * Test case 8 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 9 for method getComponent(String).
		 * 
		 * Test case 9 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 10 for method getComponent(String).
		 * 
		 * Test case 10 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
}

// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_4Test {
		
		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * Test case 7 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * Test case 8 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * Test case 9 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * Test case 10 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
}

// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_5Test {
		
		/**
		 * Test case 1 for method getField(String).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 2 for method getField(String).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 3 for method getField(String).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 4 for method getField(String).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 5 for method getField(String).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 6 for method getField(String).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns null if the field is not found.
		 * 
		 * @see DictionaryInfo#getField(String)
		 */
		@Test
		void testGetField_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getField(""""));
		}
		
		/**
		 * Test case 7 for method getField(String).
		 *"
cmpl-6uBIxdotf6TZ7kUHEmDO8tJe7HPBc,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,89.69506573677063,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(1);
				assertEquals(messageInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(2);
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(0);
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(-1);
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE - 1);
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE + 1);
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE / 2);
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE / 2);
				assertNull(result);
		}
}

// MessageInfo.java
/**
 * MessageInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    private int id;

    private String name;

    private String msgType;

    private String msgCategory;

    private boolean admin;

    private boolean app;

    private boolean repeatingGroup;

    private List<FieldInfo> fields;

    private List<FieldInfo> headerFields;

    private List<FieldInfo> trailerFields;

    private List<FieldInfo> bodyFields;

    private List<FieldInfo> repeatingGroupFields;

    private List<FieldInfo> repeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupBodyFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupHeaderFields;

    private List<FieldInfo> repeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupRepeatingGroupTrailerFields;

    private List<FieldInfo> repeatingGroupRepeatingGroup"
cmpl-6uBKODDQ1GZSaBn5n3OyCoyD0DZAr,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,91.15179586410522,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the case where the message name is not null.
		 * 
		 * Test case 1 expects the method to return the message with the given name.
		 */
		@Test
		void testGetMessage_1() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Heartbeat"");
				
				// Verify
				assertEquals(messageInfo, actual);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the message name is null.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetMessage_2() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(null);
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the message name is empty.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetMessage_3() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage("""");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetMessage_4() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""TestRequest"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetMessage_5() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Heartbeat1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetMessage_6() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Heartbeat "");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetMessage_7() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage("" Heartbeat"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetMessage_8() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Heartbeat "");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetMessage_9() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage("" Heartbeat "");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 10 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetMessage_10() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Heartbeat Heartbeat"");
				
				// Verify
				assertNull(actual);
		}
}

// MessageInfo.java
/**
 * MessageInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX message.
 *
 * @author jramoyo
 */
public class MessageInfo {

    private int id;

    private String name;

    private String msgType;

    private String msgCategory;

    private boolean admin;

    private boolean app;

    private boolean repeatingGroup;

    private List<FieldInfo> header;

    private List<FieldInfo> trailer;

    private List<FieldInfo> body;

    private List<FieldInfo> all;

    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    private TreeMap<String, ComponentInfo> componentsByName;

    /**
     * Creates a new MessageInfo
     *
     * @param id - a message id
     * @param name - a message name
     */
    public MessageInfo(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the msgType
     *
     * @return the msgType
     */
    public String getMsgType() {
        return msgType;
    }

    /**
     * Modifies the msgType
     *
     * @param msgType - the msgType to set
     */
    public void setMsgType(String msgType) {
        this.msgType = msgType;
    }

    /**
     * Returns the msgCategory
     *
     * @return the msgCategory
     */
    public String getMsgCategory() {
        return msgCategory;
    }

    /**
     * Modifies the msgCategory
     *
     * @param msgCategory - the msgCategory to set
     */
    public void setMsgCategory(String msgCategory) {
        this.msgCategory = msgCategory;
    }

    /**
     * Returns whether the message is an admin message
     *
     * @return whether the message is an admin message
     */
    public boolean isAdmin() {
        return admin;
    }

    /**
     * Modifies whether the message is an admin message
     *
     * @param admin - whether the message is an admin message
     */
    public void setAdmin(boolean admin) {
        this.admin = admin;
    }

    /**
     * Returns whether the message is an app message
     *
     * @return whether the message is an app message
     */
    public boolean isApp() {
        return app;
    }

    /**
     * Modifies whether the message is an app message
     *
     * @param app - whether the message is an app message
     */
    public void setApp(boolean app) {
        this.app = app;
    }

    /**
     * Returns whether the message is a repeating group
     *
     * @return whether the message is a repeating group
     */
    public boolean isRepeatingGroup() {
        return repeatingGroup;
    }

    /**
     * Modifies whether the message is a repeating group
     *
     * @param repeatingGroup - whether the message is a repeating group
     */
    public void setRepeatingGroup(boolean repeatingGroup) {
        this.repeatingGroup = repeatingGroup;
    }

    /**
     * Returns the header
     *
     * @return the header
     */
    public List<FieldInfo> getHeader() {
        return header;
    }

    /**
     * Modifies the header
     *
     * @param header - the header to set
     */
    public void setHeader(List<FieldInfo> header) {
        this.header = header;
    }

    /**
     * Returns the trailer
     *
     * @return the trailer
     */
    public List<FieldInfo> getTrailer() {
        return trailer;
    }

    /**
     * Modifies the trailer
     *
     * @param trailer - the trailer to set
     */
    public void setTrailer(List<FieldInfo> trailer) {
        this.trailer = trailer;
    }

    /**
     * Returns the body
     *
     * @return the body
     */
    public List<FieldInfo> getBody() {
        return body;
    }

    /**
     * Modifies the body
     *
     * @param body - the body to set
     */
    public void setBody(List<FieldInfo> body) {
        this.body = body;
    }

    /**
     * Returns the all
     *
     * @return the"
cmpl-6uBLs4Z3TQmLVgSbCczuJXXwFCSoI,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,88.95843029022217,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {

		/**
		 * Test case 1 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 2 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 3 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(null));
		}
		
		/**
		 * Test case 4 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 5 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 6 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 7 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 8 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 9 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 10 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_10() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
}

// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {
		
		/**
		 * Test case 1 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertTrue(fieldInfo.isValidValue(valueInfo.getValue()));
		}
		
		/**
		 * Test case 2 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(null));
		}
		
		/**
		 * Test case 3 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 4 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 5 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 6 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 7 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 8 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 9 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 10 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_10() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
}

// FieldInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#getValidValues()} method.
*/
class FieldInfo_2Test {
		
		/**
		 * Test case 1 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 2 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 3 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 4 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 5 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 6 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 7 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 8 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 9 for method getValidValues.
		 * 
		 * @see FieldInfo#getValidValues()
		 */
		@Test
		void testGetValidValues_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertEquals(1, fieldInfo.getValidValues().size());
		}
		
		/**
		 * Test case 10 for method getValidValues.
		 * 
		 * @see FieldInfo#getValid"
cmpl-6uBNIGLQrYKAnEKUprInLg6py2DFh,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,96.87049102783203,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns true if the given value is valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_1() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""10""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_2() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_3() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_4() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 5.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_5() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 6.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_6() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 7.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_7() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue"
cmpl-6uBOr42uBxv9HCYHUh1I908GahQKm,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_0Test.java,84.81882977485657,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(int)} method.
*/
class GroupInfo_0Test {","// GroupInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(int)} method.
*/
class GroupInfo_0Test {

		private GroupInfo groupInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private TreeMap<String, ComponentInfo> componentsByName;
		
		private TreeMap<Integer, ComponentInfo> componentsById;
		
		private TreeMap<Double, FixInfo> itemsByPosition;
		
		private HashMap<FixInfo, Double> itemsByContent;
		
		private List<FieldInfo> fields;
		
		private List<ComponentInfo> components;
		
		private List<FixInfo> items;
		
		private FieldInfo field;
		
		private ComponentInfo component;
		
		private FixInfo item;
		
		private double position;
		
		private int tagNumber;
		
		private String name;
		
		private int id;
		
		private String dataType;
		
		private String description;
		
		private String abbreviation;
		
		private String overrideXmlName;
		
		private String baseCategory;
		
		private String baseCategoryXmlName;
		
		private String unionDataType;
		
		private String usesEnumFromTag;
		
		private String comments;
		
		private int length;
		
		private String deprecatingVersion;
		
		private String requiringComponents;
		
		private HashMap<String, String> validValues;
		
		private HashMap<String, String> validValuesMap;
		
		private String key;
		
		private String value;
		
		private String key1;
		
		private String value1;
		
		private String key2;
		
		private String value2;
		
		private String key3;
		
		private String value3;
		
		private String key4;
		
		private String value4;
		
		private String key5;
		
		private String value5;
		
		private String key6;
		
		private String value6;
		
		private String key7;
		
		private String value7;
		
		private String key8;
		
		private String value8;
		
		private String key9;
		
		private String value9;
		
		private String key10;
		
		private String value10;
		
		private String key11;
		
		private String value11;
		
		private String key12;
		
		private String value12;
		
		private String key13;
		
		private String value13;
		
		private String key14;
		
		private String value14;
		
		private String key15;
		
		private String value15;
		
		private String key16;
		
		private String value16;
		
		private String key17;
		
		private String value17;
		
		private String key18;
		
		private String value18;
		
		private String key19;
		
		private String value19;
		
		private String key20;
		
		private String value20;
		
		private String key21;
		
		private String value21;
		
		private String key22;
		
		private String value22;
		
		private String key23;
		
		private String value23;
		
		private String key24;
		
		private String value24;
		
		private String key25;
		
		private String value25;
		
		private String key26;
		
		private String value26;
		
		private String key27;
		
		private String value27;
		
		private String key28;
		
		private String value28;
		
		private String key29;
		
		private String value29;
		
		private String key30;
		
		private String value30;
		
		private String key31;
		
		private String value31;
		
		private String key32;
		
		private String value32;
		
		private String key33;
		
		private String value33;
		
		private String key34;
		
		private String value34;
		
		private String key35;
		
		private String value35;
		
		private String key36;
		
		private String value36;
		
		private String key37;
		
		private String value37;
		
		private String key38;
		
		private String value38;
		
		private String key39;
		
		private String value39;
		
		private String key40;
		
		private String value40;
		
		private String key41;
		
		private String value41;
		
		private String key42;
		
		private String value42;
		
		private String key43;
		
		private String value43;
		
		private String key44;
		
		private String value44;
		
		private String key45;
		
		private String value45;
		
		private String key46;
		
		private String value46;
		
		private String key47;
		
		private String value47;
		
		private String key48;
		
		private String value48;
		
		private String key49;
		
		private String value49;
		
		private String key50;
		
		private String value50;
		
		private String key51;
		
		private String value51;
		
		private String key52;
		
		private String value52;
		
		private String key53;
		
		private String value53;
		
		private String key54;
		
		private String value54;
		
		private String key55;
		
		private String value55;
		
		private String key56;
		
		private String value56;
		
		private String key57;
		
		private String value57;
		
		private String key58;
		
		private String value58;
		
		private String key59;
		
		private String value59;
		
		private String key60;
		
		private String value60;
		
		private String key61;
		
		private String value61;
		
		private String key62;
		
		private String value62;
		
		private String key63;
		
		private String value63;
		
		private String key64;
		
		private String value64;
		
		private String key65;
		
		private String value65;
		
		private String key66;
		
		private String value66;
		
		private String key67;
		
		private String value67;
		
		private String key68;
		
		private String value68;
		
		private String key69;
		
		private String value69;
		
		private String key70;
		
		private String value70;
		
		private String key71;
		
		private String value71;
		
		private String key72;
		
		private String value72;
		
		private String key73;
		
		private String value73;
		
		private String key74;
		
		private String value74;
		
		private String key75;
		
		private String value75;
		
		private String key76;
		
		private String value76;
		
		private String key77;
		
		private String value77;
		
		private String key78;
		
		private String value78;
		
		private String key79;
		
		private String value79;
		
		private String key80;
		
		private String value80;
		
		private String key81;
		
		private String value81;
		
		private String key82;
		
		private String value82;
		
		private String key83;
		
		private String value83;
		
		private String key84;
		
		private String value84;
		
		private String key85;
		
		private String value85;
		
		private String key86;
		
		private String value86;
		
		private String key87;
		
		private String value87;
		
		private String key88;
		
		private String value88;
		
		private String key89;
		
		private String value89;
		
		private String key90;
		
		private String value90;
		
		private String key91;
		
		private String value91;
		
		private String key92;
		
		private String value92;
		
		private String key93;
		
		private String value93;
		
		private String key94;
		
		private String value94;
		
		private String key95;
		
		private String value95;
		
		private String key96;
		
		private String value96;
		
		private String key97;
		
		private String value97;
		
		private String key98;
		
		private String value98;
		
		private String key99;
		
		private String value99;
		
		private String key100;
		
		private String value100;
		
		private String key101;
		
		private String value101;
		
		private String key102;
		
		private String value102;
		
		private String key103;
		
		private String value103;
		
		private String key104;
		
		private String value104;
		
		private String key105;
		
		private String value105;
		
		private String key106;
		
		private String value106;
		
		private String key107;
		
		private String value107;
		
		private String key108;
		
		private String value108;
		
		private String key109;
		
		private String value109;
		
		private String key110;
		
		private String value110;
		
		private String key111;
		
		private String value111;
		
		private String key112;
		
		private String value112;
		
		private String key113;
		
		private String value113;
		
		private String key114;
		
		private String value114;
		
		private String key115;
		
		private String value115;
		
		private String key116;
		
		private String value116;
		
		private String key117;
		
		private String value117;
		
		private String key118;
		
		private String value118;
		
		private String key119;
		
		private String value119;
		
		private String key120;
		
		private String value120;
		
		private String key121;
		
		private String value121;
		
		private String key122;
		
		private String value122;
		
		private String key123;
		
		private String value123;
		
		private String key124;
		
		private String value124;
		
		private String key125;
		
		private String value125;
		
		private String key126;
		
		private String value126;
		
		private String key127;
		
		private String value127;
		
		private String key128;
		
		private String value128;
		
		private String key129;
		
		private String value129;
		
		private String key130;
		
		private String value130;
		
		private String key131;
		
		private String value131;
		
		private String key132;
		
		private String value132;
		
		private String key133;
		
		private String value133;
		
		private String key134;
		
		private String value134;
		
		private String key135;
		
		private String value135;
		
		private String key136;
		
		private String value136;
		
		private String key137;
		
		private String value137;
		
		private String key138;
		
		private String value138;
		
		private String key139;
		
		private String value139;
		
		private String key140;
		
		private String value140;
		
		private String key141;
		
		private String value141;
		
		private String key142;
		
		private String value142;
		
		private String key143;
		
		private String value143;
		
		private String key144;
		
		private String value144;
		
		private String key145;
		
		private String value145;
		
		private String key146;
		
		private String value146;
		
		private String key147;
		
		private String value147;
		
		private String key148;
		
		private String value148;
		
		private String key149;
		
		private String value149;
		
		private String key150;
		
		private String value150;
		
		private String key151;
		
		private String value151;
		
		private String key152;
		
		private String value152;
		
		private String key153;
		
		private String value153;
		
		private String key154;
		
		private String value154;
		
		private String key155;
		
		private String value155;
		
		private String key156;
		
		private String value156;
		
		private String key157;
		
		private String value157;
		
		private String key158;
		
		private String value158;
		
		private String key159;
		
		private String value159;
		
		private String key160;
		
		private String value160;
		
		private String key161;
		
		private String value161;
		
		private String key162;"
cmpl-6uBQEQImWWtJznrRFDaw4Q1ZRGgOx,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_1Test.java,84.43163800239563,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(String)} method.
*/
class GroupInfo_1Test {","// GroupInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(String)} method.
*/
class GroupInfo_1Test {

		/**
		 * Test case 1:
		 * 
		 * <PRE>
		 * 																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			"
cmpl-6uBRb8l3AmGyPy5cOyh8q2Kzqy3kV,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_2Test.java,87.31054139137268,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(int)} method.
*/
class GroupInfo_2Test {","// GroupInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(int)} method.
*/
class GroupInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				// Test case 1
				// Input:
				// -1
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(-1);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_2() {
				// Test case 2
				// Input:
				// 0
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(0);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_3() {
				// Test case 3
				// Input:
				// 1
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(1);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_4() {
				// Test case 4
				// Input:
				// 2
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(2);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_5() {
				// Test case 5
				// Input:
				// 3
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(3);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_6() {
				// Test case 6
				// Input:
				// 4
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(4);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_7() {
				// Test case 7
				// Input:
				// 5
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(5);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_8() {
				// Test case 8
				// Input:
				// 6
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(6);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_9() {
				// Test case 9
				// Input:
				// 7
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(7);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_10() {
				// Test case 10
				// Input:
				// 8
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(8);
				// Check result
				assertNull(result);
		}
}

// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				// Test case 1
				// Input:
				// null
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(null);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_2() {
				// Test case 2
				// Input:
				// """"
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent("""");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_3() {
				// Test case 3
				// Input:
				// "" ""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent("" "");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_4() {
				// Test case 4
				// Input:
				// ""a""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""a"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_5() {
				// Test case 5
				// Input:
				// ""ab""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""ab"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_6() {
				// Test case 6
				// Input:
				// ""abc""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""abc"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_7() {
				// Test case 7
				// Input:
				// ""abcd""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""abcd"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_8() {
				// Test case 8
				// Input:
				// ""abcde""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""abcde"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_9() {
				// Test case 9
				// Input:
				// ""abcdef""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""abcdef"");
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_10() {
				// Test case 10
				// Input:
				// ""abcdefg""
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(""abcdefg"");
				// Check result
				assertNull(result);
		}
}

// GroupInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(int)} method.
*/
class GroupInfo_4Test {
		
		/**
		 * Test case 1 for method getField(int).
		 * 
		 * @see GroupInfo#getField(int)
		 */
		@Test
		void testGetField_1() {
				// Test case 1
				// Input:
				// -1
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				FieldInfo result = groupInfo.getField(-1);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 2 for method getField(int).
		"
cmpl-6uBT0Dd2KOl4JBbE3lBgMm6TsihYy,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_3Test.java,84.97771334648132,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {","// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {

		/**
		 * Test case 1 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the correct component.
		 */
		@Test
		void testGetComponent_1() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component"");
				
				// Check if the result is correct.
				assertEquals(componentInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the component does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetComponent_2() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the component does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetComponent_3() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the component does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetComponent_4() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the component does not exist.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetComponent_5() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the component does not exist.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetComponent_6() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the component does not exist.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetComponent_7() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the component does not exist.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetComponent_8() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the component does not exist.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetComponent_9() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method {@link GroupInfo#getComponent(String)}.
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the component does not exist.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetComponent_10() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the component.
				componentInfo.setName(""component"");
				
				// Add the component to the group.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Get the component from the group.
				ComponentInfo result = groupInfo.getComponent(""component2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
}

// GroupInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(String)} method.
*/
class GroupInfo_4Test {
		
		/**
		 * Test case 1 for method {@link GroupInfo#getField(String)}.
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the correct field.
		 */
		@Test
		void testGetField_1() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new FieldInfo object.
				FieldInfo fieldInfo = new FieldInfo();
				
				// Set the name of the field.
				fieldInfo.setName(""field"");
				
				// Add the field to the group.
				groupInfo.addField(fieldInfo, 0.0);
				
				// Get the field from the group.
				FieldInfo result = groupInfo.getField(""field"");
				
				// Check if the result is correct.
				assertEquals(fieldInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link GroupInfo#getField(String)}.
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the field does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetField_2() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Get the field from the group.
				FieldInfo result = groupInfo.getField(""field"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link GroupInfo#getField(String)}.
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the field does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetField_3() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new FieldInfo object.
				FieldInfo fieldInfo = new FieldInfo();
				
				// Set the name of the field.
				fieldInfo.setName(""field"");
				
				// Add the field to the group.
				groupInfo.addField(fieldInfo, 0.0);
				
				// Get the field from the group.
				FieldInfo result = groupInfo.getField(""field2"");
				
				// Check if the result is correct.
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link GroupInfo#getField(String)}.
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the field does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		"
