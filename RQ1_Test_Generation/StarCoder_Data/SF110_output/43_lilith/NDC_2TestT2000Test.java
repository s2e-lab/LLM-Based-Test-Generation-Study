// NDC_2Test.java
package de.huxhorn.lilith.logback.classic;

import de.huxhorn.lilith.data.logging.Message;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NDC}.
* It contains ten unit test cases for the {@link NDC#getContextStack()} method.
*/
class NDC_2Test {

    @Test
    void test1() {
        NDC.push("message1");
        NDC.push("message2");
        NDC.push("message3");
        NDC.push("message4");
        NDC.push("message5");
        NDC.push("message6");
        NDC.push("message7");
        NDC.push("message8");
        NDC.push("message9");
        NDC.push("message10");
        Message[] contextStack = NDC.getContextStack();
        assertEquals(10, contextStack.length);
        assertEquals("message10", contextStack[9].getMessage());
        assertEquals("message9", contextStack[8].getMessage());
        assertEquals("message8", contextStack[7].getMessage());
        assertEquals("message7", contextStack[6].getMessage());
        assertEquals("message6", contextStack[5].getMessage());
        assertEquals("message5", contextStack[4].getMessage());
        assertEquals("message4", contextStack[3].getMessage());
        assertEquals("message3", contextStack[2].getMessage());
        assertEquals("message2", contextStack[1].getMessage());
        assertEquals("message1", contextStack[0].getMessage());
    }

    @Test
    void test2() {
        NDC.push("message1");
        NDC.push("message2");
        NDC.push("message3");
        NDC.push("message4");
        NDC.push("message5");
        NDC.push("message6");
        NDC.push("message7");
        NDC.push("message8");
        NDC.push("message9");
        NDC.push("message10");
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        Message[] contextStack = NDC.getContextStack();
        assertEquals(10, contextStack.length);
        assertEquals("message10", contextStack[9].getMessage());
        assertEquals("message9", contextStack[8].getMessage());
        assertEquals("message8", contextStack[7].getMessage());
        assertEquals("message7", contextStack[6].getMessage());
        assertEquals("message6", contextStack[5].getMessage());
        assertEquals("message5", contextStack[4].getMessage());
        assertEquals("message4", contextStack[3].getMessage());
        assertEquals("message3", contextStack[2].getMessage());
        assertEquals("message2", contextStack[1].getMessage());
        assertEquals("message1", contextStack[0].getMessage());
    }

    @Test
    void test3() {
        NDC.push("message1");
        NDC.push("message2");
        NDC.push("message3");
        NDC.push("message4");
        NDC.push("message5");
        NDC.push("message6");
        NDC.push("message7");
        NDC.push("message8");
        NDC.push("message9");
        NDC.push("message10");
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        NDC.pop();
        N