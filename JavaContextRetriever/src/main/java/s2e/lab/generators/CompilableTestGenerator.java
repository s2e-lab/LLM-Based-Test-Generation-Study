package s2e.lab.generators;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.commons.io.FilenameUtils;
import s2e.lab.searcher.JavaSearcher;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static s2e.lab.generators.JavaTestPromptGenerator.RQ1_BASE_DIR;
import static s2e.lab.generators.JavaTestPromptGenerator.RQ2_BASE_DIR;


public class CompilableTestGenerator {

    // where the tests generated by the LLM were saved
    public static String RQ1_TESTS_OUTPUT_DIR = RQ1_BASE_DIR + "OpenAI_Data/%s_output/%s/";
    public static String RQ2_TESTS_OUTPUT_DIR = RQ2_BASE_DIR + "OpenAI_Data/%s_output/%s/";

    public static String RQ1_JSON_OUTPUT = RQ1_BASE_DIR + "OpenAI_Data/%s_output/%s_output_%d.json";
    public static String RQ1_CSV_OUTPUT = RQ1_BASE_DIR + "OpenAI_Data/%s_output/%s_output_%d.csv";

    public static String RQ2_JSON_OUTPUT = RQ2_BASE_DIR + "OpenAI_Data/%s_output/%s_output_%d.json";
    public static String RQ2_CSV_OUTPUT = RQ2_BASE_DIR + "OpenAI_Data/%s_output/%s_output_%d.csv";

    public void computeCompilableTests() throws IOException {
        String[] scenarios = {"original", "scenario1", "scenario2", "scenario3"};
        for (int i = 0; i < scenarios.length; i++) {
            String scenario = scenarios[i];
            String rqFolder = i == 0 ? RQ1_TESTS_OUTPUT_DIR : RQ2_TESTS_OUTPUT_DIR;
            File outputDir = new File(String.format(rqFolder, "HumanEvalJava", scenario));
            List<File> javaFiles = JavaSearcher.findJavaFiles(outputDir);
            for (File javaFile : javaFiles) {
                try {
                    CompilationUnit cu = StaticJavaParser.parse(javaFile);
                    System.out.println("success " + javaFile.getName());
                } catch (Exception e) {
                    // System.err.println("Parse error " + javaFile.getName());
                }
            }
        }
    }





    public static void main(String[] args) {
//        File file = new File(RQ1_OUTPUT_FILE);
//        if (!file.exists()) {
//            file.mkdirs();
//        }

        String[] scenarios = {"original", "scenario1", "scenario2", "scenario3"};
        int[] tokens = {2000, 4000};
        for (int i = 0; i < scenarios.length; i++) {
            for (int token : tokens) {
                String scenario = scenarios[i];
                String rqFolder = i == 0 ? RQ1_JSON_OUTPUT : RQ2_JSON_OUTPUT;
                JsonArray jsonArray = getJsonArray(String.format(rqFolder, "HumanEvalJava", scenario, token));
                if (jsonArray != null) {
                    for (JsonElement jsonElement : jsonArray) {
                        JsonObject jsonObject = jsonElement.getAsJsonObject();

                        String promptID = jsonObject.get("prompt_id").getAsString();
                        String filename = FilenameUtils.getBaseName(promptID);
                        System.out.println(promptID);

                        String prompt = jsonObject.get("test_prompt").getAsString();
                        JsonElement choice = jsonObject.get("choices").getAsJsonArray().get(0);
                        String generatedTest = choice.getAsJsonObject().get("text").getAsString();
                        String jUnitCode = prompt + "\n\t\t" + generatedTest;
                        System.out.println(jUnitCode);


//                for (JsonElement jsonElement1 : choice) {
//                    JsonObject jsonObject1 = jsonElement1.getAsJsonObject();
//                    String text = jsonObject1.get("text").getAsString();
//                    CompilationUnit cu = getCompilationUnit(prompt + "\n\t\t" + text);
//                    if (cu != null) {
//                        //collect the class names
//                        List<String> classNames = new ArrayList<>();
//                        VoidVisitor<List<String>> classNameCollector = new ClassNameCollector();
//                        classNameCollector.visit(cu, classNames);
//                        System.out.println("Class Names: " + classNames);
//                        String fileName = RQ1_OUTPUT_FILE + classNames.get(0) + ".java";
//                        System.out.println(fileName);
//                        try {
//                            Files.write(Paths.get(fileName), cu.toString().getBytes());
//                        } catch (IOException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
                    }
                }
            }
        }


    }

    public static CompilationUnit getCompilationUnit(String code) {
        try {
            CompilationUnit cu = StaticJavaParser.parse(code);
            return cu;
        } catch (Exception e) {
            System.out.println("Exception: Not compilable");
        }
        return null;

    }

    public static JsonArray getJsonArray(String fileName) {
        Path path = Paths.get(fileName);

        try (Reader reader = Files.newBufferedReader(path,
                StandardCharsets.UTF_8)) {

            JsonParser parser = new JsonParser();
            JsonElement tree = parser.parse(reader);

            JsonArray array = tree.getAsJsonArray();
            return array;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

}
